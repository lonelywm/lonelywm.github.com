<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[阿蒙的工作室]]></title>
  <subtitle><![CDATA[每天进步一点点]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.wxameng.com/"/>
  <updated>2015-12-29T07:35:32.000Z</updated>
  <id>http://www.wxameng.com/</id>
  
  <author>
    <name><![CDATA[阿蒙]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[好RESTful API的设计原则]]></title>
    <link href="http://www.wxameng.com/design-a-RESTful-API/"/>
    <id>http://www.wxameng.com/design-a-RESTful-API/</id>
    <published>2015-12-29T07:01:01.000Z</published>
    <updated>2015-12-29T07:35:32.000Z</updated>
    <content type="html"><![CDATA[<p>文章是转的，有两个版本，先看一个简版的，后面再跟一个全文版的</p>
<h2 id="简版_RESTful">简版 RESTful</h2><h3 id="协议">协议</h3><p>API与用户的通信协议，总是使用HTTPs协议。</p>
<h3 id="域名">域名</h3><p>应该尽量将API部署在专用域名之下。</p>
<pre><code><span class="string">https:</span><span class="comment">//api.example.com</span>
</code></pre><p>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</p>
<pre><code><span class="label">https:</span>//example<span class="preprocessor">.org</span>/api/
</code></pre><h3 id="版本（Versioning）">版本（Versioning）</h3><p>应该将API的版本号放入URL。</p>
<pre><code><span class="string">https:</span><span class="comment">//api.example.com/v1/</span>
</code></pre><p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github采用这种做法。</p>
<h3 id="路径（Endpoint）">路径（Endpoint）</h3><p>路径又称”终点”（endpoint），表示API的具体网址。<br>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。<br>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p>
<pre><code><span class="string">https:</span><span class="comment">//api.example.com/v1/zoos</span>
<span class="string">https:</span><span class="comment">//api.example.com/v1/animals</span>
<span class="string">https:</span><span class="comment">//api.example.com/v1/employees</span>
</code></pre><h3 id="HTTP动词">HTTP动词</h3><p>对于资源的具体操作类型，由HTTP动词表示。<br>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p>
<pre><code>GET（<span class="operator"><span class="keyword">SELECT</span>）：从服务器取出资源（一项或多项）。
POST（<span class="keyword">CREATE</span>）：在服务器新建一个资源。
PUT（<span class="keyword">UPDATE</span>）：在服务器更新资源（客户端提供改变后的完整资源）。
<span class="keyword">PATCH</span>（<span class="keyword">UPDATE</span>）：在服务器更新资源（客户端提供改变的属性）。
<span class="keyword">DELETE</span>（<span class="keyword">DELETE</span>）：从服务器删除资源。</span>
</code></pre><p>还有两个不常用的HTTP动词。</p>
<pre><code><span class="keyword">HEAD</span>：获取资源的元数据。
<span class="keyword"><span class="common">OPTIONS</span></span>：获取信息，关于资源的哪些属性是客户端可以改变的。
</code></pre><p>下面是一些例子。</p>
<pre><code>GET /zoos：列出所有动物园
POST /zoos：新建一个动物园
GET <span class="regexp">/zoos/</span>ID：获取某个指定动物园的信息
PUT <span class="regexp">/zoos/</span>ID：更新某个指定动物园的信息（提供该动物园的全部信息）
PATCH <span class="regexp">/zoos/</span>ID：更新某个指定动物园的信息（提供该动物园的部分信息）
DELETE <span class="regexp">/zoos/</span>ID：删除某个动物园
GET <span class="regexp">/zoos/</span>ID/animals：列出某个指定动物园的所有动物
DELETE <span class="regexp">/zoos/</span>ID<span class="regexp">/animals/</span>ID：删除某个指定动物园的指定动物
</code></pre><h3 id="过滤信息（Filtering）">过滤信息（Filtering）</h3><pre><code>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。下面是一些常见的参数。

?limit=<span class="number">10</span>：指定返回记录的数量
?offset=<span class="number">10</span>：指定返回记录的开始位置。
?page=<span class="number">2</span>&amp;per_page=<span class="number">100</span>：指定第几页，以及每页的记录数。
?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。
?animal_type_id=<span class="number">1</span>：指定筛选条件
</code></pre><p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p>
<h3 id="状态码（Status_Codes）">状态码（Status Codes）</h3><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p>
<pre><code><span class="number">200</span> OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。
<span class="number">201</span> CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。
<span class="number">202</span> Accepted - [*]：表示一个请求已经进入后台排队（异步任务）
<span class="number">204</span> NO CONTENT - [DELETE]：用户删除数据成功。
<span class="number">400</span> INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。
<span class="number">401</span> Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。
<span class="number">403</span> Forbidden - [*] 表示用户得到授权（与<span class="number">401</span>错误相对），但是访问是被禁止的。
<span class="number">404</span> NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。
<span class="number">406</span> Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。
<span class="number">410</span> Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。
<span class="number">422</span> Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。
<span class="number">500</span> INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。
</code></pre><p>状态码的完全列表参见<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="external">这里</a>。</p>
<h3 id="错误处理（Error_handling）">错误处理（Error handling）</h3><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p>
<pre><code><span class="rules">{
    <span class="rule"><span class="attribute">error</span>:<span class="value"> <span class="string">"Invalid API key"</span>
</span></span></span>}
</code></pre><h3 id="返回结果">返回结果</h3><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p>
<pre><code>GET /collection：返回资源对象的列表（数组）
GET <span class="regexp">/collection/</span>resource：返回单个资源对象
POST /collection：返回新生成的资源对象
PUT <span class="regexp">/collection/</span>resource：返回完整的资源对象
PATCH <span class="regexp">/collection/</span>resource：返回完整的资源对象
DELETE <span class="regexp">/collection/</span>resource：返回一个空文档
</code></pre><h3 id="Hypermedia_API">Hypermedia API</h3><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。<br>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p>
<pre><code>{"<span class="attribute">link</span>": <span class="value">{
  "<span class="attribute">rel</span>":   <span class="value"><span class="string">"collection https://www.example.com/zoos"</span></span>,
  "<span class="attribute">href</span>":  <span class="value"><span class="string">"https://api.example.com/zoos"</span></span>,
  "<span class="attribute">title</span>": <span class="value"><span class="string">"List of zoos"</span></span>,
  "<span class="attribute">type</span>":  <span class="value"><span class="string">"application/vnd.yourformat+json"</span>
</span>}</span>}
</code></pre><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p>
<p>Hypermedia API的设计被称为<a href="http://en.wikipedia.org/wiki/HATEOAS" target="_blank" rel="external">HATEOAS</a>。Github的API就是这种设计，访问<a href="https://api.github.com/" target="_blank" rel="external">api.github.com</a>会得到一个所有可用API的网址列表。</p>
<pre><code>{
  <span class="string">"current_user_url"</span>: <span class="string">"https://api.github.com/user"</span>,
  <span class="string">"authorizations_url"</span>: <span class="string">"https://api.github.com/authorizations"</span>,
  <span class="comment">// ...</span>
}
</code></pre><p>从上面可以看到，如果想获取当前用户的信息，应该去访问<a href="api.github.com/user">api.github.com/user</a>，然后就得到了下面结果。</p>
<pre><code>{
  "<span class="attribute">message</span>": <span class="value"><span class="string">"Requires authentication"</span></span>,
  "<span class="attribute">documentation_url</span>": <span class="value"><span class="string">"https://developer.github.com/v3"</span>
</span>}
</code></pre><p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p>
<p>说在前面，这篇文章是无意中发现的，因为感觉写的很好，所以翻译了一下。由于英文水平有限，难免有出错的地方，请看官理解一下。翻译和校正文章花了我大约2周的业余时间，如有人愿意转载请注明出处，谢谢^_^</p>
<h3 id="其他">其他</h3><p>API的身份认证应该使用OAuth 2.0框架。</p>
<p>服务器返回的数据格式，应该尽量使用JSON，避免使用XML。</p>
<h2 id="全文版_RESTful">全文版 RESTful</h2><p>Principles of good RESTful API Design<br>好RESTful API的设计原则</p>
<p>Good API design is hard! An API represents a contract between you and those who Consume your data. Breaking this contract will result in many angry emails, and a slew of sad users with mobile apps which no longer work. Documentation is half the battle, and it is very difficult to find programmer who also likes to write.</p>
<p>Building an API is one of the most important things you can do to increase the value of your service. By having an API, your service / core application has the potential to become a platform from which other services grow. Look at the current huge tech companies: Facebook, Twitter, Google, GitHub, Amazon, Netflix… None of them would be nearly as big as they are today if they hadn’t opened up their data via API. In fact, an entire industry exists with the sole purpose of consuming data provided by said platforms.</p>
<p><strong>The easier your API is to consume, the more people that will consume it.</strong></p>
<p>The principles of this document, if followed closely when designing your API, will ensure that Consumers of your API will be able to understand what is going on, and should drastically reduce the number of confused and/or angry emails you receive. I’ve organized everything into topics, which don’t necessarily need to be read in order.</p>
<p>做出一个好的API设计很难。API表达的是你的数据和你的数据使用者之间的契约。打破这个契约将会招致很多愤怒的邮件，和一大堆伤心的用户-因为他们手机上的App不工作了。而文档化只能达到一半的效果，并且也很难找到一个愿意写文档的程序员。</p>
<p>你所能做的最重要一件事来提高服务的价值就是创建一个API。因为随着其他服务的成长，有这样一个API会使你的服务或者核心应用将有机会变成一个平台。环顾一下现有的这些大公司：Facebook，Twitter，Google， Github，Amazon，Netflix等。如果当时他们没有通过API来开放数据的话，也不可能成长到如今的规模。事实上，整个行业存在的唯一目的就是消费所谓平台上的数据。</p>
<p><strong>你的API越容易使用，那么就会有越多的人去用它</strong></p>
<p>本文提到的这些原则，如果你的API能严格按照这些原则来设计，使用者就可以知道它接下来要做什么，并且能减少大量不必要的疑惑或者是愤怒的邮件。我已经把所有内容都整理到不同的主题里了，你无需按顺序去阅读它。</p>
<h2 id="Definitions">Definitions</h2><p>定义</p>
<p>Here’s a few of the important terms I will use throughout the course of this document:</p>
<p>Resource: A single instance of an object. For example, an animal.<br>Collection: A collection of homogeneous objects. For example, animals.<br>HTTP: A protocol for communicating over a network.<br>Consumer: A client computer application capable of making HTTP requests.<br>Third Party Developer: A developer not a part of your project but who wishes to consume your data.<br>Server: An HTTP server/application accessible from a Consumer over a network.<br>Endpoint: An API URL on a Server which represents either a Resource or an entire Collection.<br>Idempotent: Side-effect free, can happen multiple times without penalty.<br>URL Segment: A slash-separated piece of information in the URL.<br>这里有一些非常重要的术语，我将在本文里面一直用到它们：</p>
<p>资源：一个对象的单独实例，如一只动物<br>集合：一群同种对象，如动物<br>HTTP：跨网络的通信协议<br>客户端：可以创建HTTP请求的客户端应用程序<br>第三方开发者：这个开发者不属于你的项目但是有想使用你的数据<br>服务器：一个HTTP服务器或者应用程序，客户端可以跨网络访问它<br>端点：这个API在服务器上的URL用于表达一个资源或者一个集合<br>幂等：无边际效应，多次操作得到相同的结果<br>URL段：在URL里面已斜杠分隔的内容</p>
<h2 id="Data_Design_and_Abstraction">Data Design and Abstraction</h2><p>数据设计与抽象</p>
<p>Planning how your API will look begins earlier than you’d think; first you need to decide how your data will be designed and how your core service / application will work. If you’re doing API First Development this should be easy. If you’re attaching an API to an existing project, you may need to provide more abstraction.</p>
<p>Occasionally, a Collection can represent a database table, and a Resource can represent a row within that table. However, this is not the usual case. In fact, your API should abstract away as much of your data and business logic as possible. It is very important that you don’t overwhelm Third-Party Developers with any complex application data, if you do they won’t want to use your API.</p>
<p>There are also many parts of your service which you SHOULD NOT expose via API at all. A common example is that many APIs will not allow third parties to create users.</p>
<p>规划好你的API的外观要先于开发它实际的功能。首先你要知道数据该如何设计和核心服务/应用程序会如何工作。如果你纯粹新开发一个API，这样会比较容易一些。但如果你是往已有的项目中增加API，你可能需要提供更多的抽象。</p>
<p>有时候一个集合可以表达一个数据库表，而一个资源可以表达成里面的一行记录，但是这并不是常态。事实上，你的API应该尽可能通过抽象来分离数据与业务逻辑。这点非常重要，只有这样做你才不会打击到那些拥有复杂业务的第三方开发者，否则他们是不会使用你的API的。</p>
<p>当然你的服务可能很多部分是不应该通过API暴露出去的。比较常见的例子就是很多API是不允许第三方来创建用户的。</p>
<h2 id="Verbs">Verbs</h2><p>动词</p>
<p>Surely you know about GET and POST requests. These are the two most commonly requests used when your browser visits different webpages. The term POST is so popular that it has even invaded common language, where people who know nothing about how the Internet works do know they can “post” something on a friends Facebook wall.</p>
<p>There are four and a half very important HTTP verbs that you need to know about. I say “and a half”, because the PATCH verb is very similar to the PUT verb, and two two are often combined by many an API developer. Here are the verbs, and next to them are their associated database call (I’m assuming most people reading this know more about writing to a database than designing an API).</p>
<ul>
<li>GET (SELECT): Retrieve a specific Resource from the Server, or a listing of Resources.</li>
<li>POST (CREATE): Create a new Resource on the Server.</li>
<li>PUT (UPDATE): Update a Resource on the Server, providing the entire Resource.</li>
<li>PATCH (UPDATE): Update a Resource on the Server, providing only changed attributes.</li>
<li><p>DELETE (DELETE): Remove a Resource from the Server.<br>Here are two lesser known HTTP verbs:</p>
</li>
<li><p>HEAD – Retrieve meta data about a Resource, such as a hash of the data or when it was last updated.</p>
</li>
<li>OPTIONS – Retrieve information about what the Consumer is allowed to do with the Resource.<br>A good RESTful API will make use of the four and a half HTTP verbs for allowing third parties to interact with its data, and will never include actions / verbs as URL segments.</li>
</ul>
<p>Typically, GET requests can be cached (and often are!) Browsers, for example, will cache GET requests (depending on cache headers), and will go as far as prompt the user if they attempt to POST for a second time. A HEAD request is basically a GET without the response body, and can be cached as well.</p>
<p>显然你了解GET和POST请求。当你用浏览器去访问不同页面的时候，这两个是最常见的请求。POST术语如此流行以至于开始侵扰通俗用语。即使是那些不知道互联网如何工作的人们也能“post”一些东西到朋友的Facebook墙上。</p>
<p>这里至少有四个半非常重要的HTTP动词需要你知道。我之所以说“半个”的意思是PATCH这个动词非常类似于PUT，并且它们俩也常常被开发者绑定到同一个API上。</p>
<ul>
<li>GET (选择)：从服务器上获取一个具体的资源或者一个资源列表。</li>
<li>POST （创建）： 在服务器上创建一个新的资源。</li>
<li>PUT （更新）：以整体的方式更新服务器上的一个资源。</li>
<li>PATCH （更新）：只更新服务器上一个资源的一个属性。</li>
<li><p>DELETE （删除）：删除服务器上的一个资源。<br>还有两个不常用的HTTP动词：</p>
</li>
<li><p>HEAD ： 获取一个资源的元数据，如数据的哈希值或最后的更新时间。</p>
</li>
<li>OPTIONS：获取客户端能对资源做什么操作的信息。</li>
<li>一个好的RESTful API只允许第三方调用者使用这四个半HTTP动词进行数据交互，并且在URL段里面不出现任何其他的动词。</li>
</ul>
<p>一般来说，GET请求可以被浏览器缓存（通常也是这样的）。例如，缓存请求头用于第二次用户的POST请求。HEAD请求是基于一个无响应体的GET请求，并且也可以被缓存的。</p>
<h2 id="Versioning">Versioning</h2><p>版本化</p>
<p>No matter what you are building, no matter how much planning you do beforehand, your core application is going to change, your data relationships will change, attributes will invariably be added and removed from your Resources. This is just how software development works, and is especially true if your project is alive and used by many people (which is likely the case if you’re building an API).</p>
<p>Remember than an API is a published contract between a Server and a Consumer. If you make changes to the Servers API and these changes break backwards compatibility, you will break things for your Consumer and they will resent you for it. Do it enough, and they will leave. To ensure your application evolves AND you keep your Consumers happy, you need to occasionally introduce new versions of the API while still allowing old versions to be accessible.</p>
<p>As a side note, if you are simply ADDING new features to your API, such as new attributes on a Resource (which are not required and the Resource will function without), or if you are ADDING new Endpoints, you do not need to increment your API version number since these changes do not break backwards compatibility. You will want to update your API Documentation (your Contract), of course.</p>
<p>Over time you can deprecate old versions of the API. To deprecate a feature doesn’t mean to shut if off or diminish the quality of it, but to tell Consumers of your API that the older version will be removed on a specific date and that they should upgrade to a newer version.</p>
<p>A good RESTful API will keep track of the version in the URL. The other most common solution is to put a version number in a request header, but after working with many different Third Party Developers, I can tell you that adding headers is no where near as easy as adding a URL Segment.</p>
<p>无论你正在构建什么，无论你在入手前做了多少计划，你核心的应用总会发生变化，数据关系也会变化，资源上的属性也会被增加或删除。只要你的项目还活着，并且有大量的用户在用，这种情况总是会发生。</p>
<p>请谨记一点，API是服务器与客户端之间的一个公共契约。如果你对服务器上的API做了一个更改，并且这些更改无法向后兼容，那么你就打破了这个契约，客户端又会要求你重新支持它。为了避免这样的事情，你既要确保应用程序逐步的演变，又要让客户端满意。那么你必须在引入新版本API的同时保持旧版本API仍然可用。</p>
<p>注：如果你只是简单的增加一个新的特性到API上，如资源上的一个新属性或者增加一个新的端点，你不需要增加API的版本。因为这些并不会造成向后兼容性的问题，你只需要修改文档即可。</p>
<p>随着时间的推移，你可能声明不再支持某些旧版本的API。申明不支持一个特性并不意味着关闭或者破坏它。而是告诉客户端旧版本的API将在某个特定的时间被删除，并且建议他们使用新版本的API。</p>
<p> 一个好的RESTful API会在URL中包含版本信息。另一种比较常见的方案是在请求头里面保持版本信息。但是跟很多不同的第三方开发者一起工作后，我可以很明确的告诉你，在请求头里面包含版本信息远没有放在URL里面来的容易。</p>
<h2 id="Analytics">Analytics</h2><p>分析</p>
<p>Keep track of the version/endpoints of your API being used by Consumers. This can be as simple as incrementing an integer in a database each time a request is made. There are many reasons that keeping track of API Analytics is a good idea, for example, the most commonly used API calls should be made efficient.</p>
<p>For the purposes of building an API which Third Party Developers will love, the most important thing is that when you do deprecate a version of your API, you can actually contact developers using deprecated API features. This is the perfect way to remind them to upgrade before you kill the old API version.</p>
<p>The process of Third Party Developer notification can be automated, e.g. mail the developer every time 10,000 requests to a deprecated feature are made.</p>
<p>所谓API分析就是持续跟踪那些正为人使用的API的版本和端点信息。而这可能就跟每次请求都往数据库增加一个整数那样简单。有很多的原因显示API跟踪分析是一个好主意，例如，对那些使用最广泛的API来说效率是最重要的。</p>
<p>第三方开发者通常会关注API的构建目的，其中最重要的一个目的是你决定什么时候不再支持某个版本。你需要明确的告知开发者他们正在使用那些即将被移除的API特性。这是一个很好的方式在你准备删除旧的API之前去提醒他们进行升级。</p>
<p>当然第三方开发者的通知流程可以以某种条件被自动触发，例如每当一个过时的特性上发生10000次请求时就发邮件通知开发者。</p>
<h2 id="API_Root_URL">API Root URL</h2><p>API根URL</p>
<p>The root location of your API is important, believe it or not. When a developer (read as code archaeologist) inherits an old project using your API and needs to build new features, they may not know about your service at all. Perhaps all they know is a list of URLs which the Consumer calls out to. It’s important that the root entry point into your API is as simple as possible, as a long complex URL will appear daunting and can turn developers away.</p>
<p>Here are two common URL Roots:</p>
<ul>
<li><a href="https://example.org/api/v1/*" target="_blank" rel="external">https://example.org/api/v1/*</a></li>
<li><a href="https://api.example.com/v1/*" target="_blank" rel="external">https://api.example.com/v1/*</a></li>
</ul>
<p>If your application is huge, or you anticipate it becoming huge, putting the API on its own subdomain (e.g. api.) is a good choice. This can allow for some more flexible scalability down the road.</p>
<ul>
<li><a href="https://example.org/api/v1/*" target="_blank" rel="external">https://example.org/api/v1/*</a></li>
<li><a href="https://api.example.com/v1/*" target="_blank" rel="external">https://api.example.com/v1/*</a></li>
</ul>
<p>If you anticipate your API will never grow to be that large, or you want a much simpler application setup (e.g. you want to host the website AND API from the same framework), placing your API beneath a URL segment at the root of the domain (e.g. /api/) works as well.</p>
<p>It’s a good idea to have content at the root of your API. Hitting the root of GitHub’s API returns a listing of endpoints, for example. Personally, I’m a fan of having the root URL give information which a lost developer would find useful, e.g., how to get to the developer documentation for the API.</p>
<p>Also, notice the HTTPS prefix. As a good RESTful API, you must host your API behind HTTPS.</p>
<p>无论你信不信，API的根地址很重要。当一个开发者接手了一个旧项目（如进行代码考古时）。而这个项目正在使用你的API，同时开发者还想构建一个新的特性，但他们完全不知道你的服务。幸运的是他们知道客户端对外调用的那些URL列表。让你的API根入口点保持尽可能的简单是很重要的，因为开发者很可能一看到那些冗长而又复杂的URL就转身而走。</p>
<p>这里有两个常见的URL根例子：</p>
<ul>
<li><a href="https://example.org/api/v1/*" target="_blank" rel="external">https://example.org/api/v1/*</a></li>
<li><a href="https://api.example.com/v1/*" target="_blank" rel="external">https://api.example.com/v1/*</a></li>
</ul>
<p>如果你的应用很庞大或者你预期它将会变的很庞大，那么将API放到子域下通常是一个好选择。这种做法可以保持某些规模化上的灵活性。</p>
<p>但如果你觉得你的API不会变的很庞大，或是你只是想让应用安装更简单些（如你想用相同的框架来支持站点和API），将你的API放到根域名下也是可以的。</p>
<p>让API根拥有一些内容通常也是个好主意。Github的API根就是一个典型的例子。从个人角度来说我是一个通过根URL发布信息的粉丝，这对很多人来说是有用的，例如如何获取API相关的开发文档。</p>
<p>同样也请注意HTTPS前缀，一个好的RESTful API总是基于HTTPS来发布的。</p>
<h2 id="Endpoints">Endpoints</h2><p>端点</p>
<p>An Endpoint is a URL wi个thin your API which points to a specific Resource or a Collection of Resources.</p>
<p>If you were building a fictional API to represent several different Zoo’s, each containing many Animals (with an animal belonging to exactly one Zoo), employees (who can work at multiple zoos) and keeping track of the species of each animal, you might have the following endpoints:</p>
<ul>
<li><a href="https://api.example.com/v1/zoos" target="_blank" rel="external">https://api.example.com/v1/zoos</a></li>
<li><a href="https://api.example.com/v1/animals" target="_blank" rel="external">https://api.example.com/v1/animals</a></li>
<li><a href="https://api.example.com/v1/animal_types" target="_blank" rel="external">https://api.example.com/v1/animal_types</a></li>
<li><a href="https://api.example.com/v1/employees" target="_blank" rel="external">https://api.example.com/v1/employees</a></li>
</ul>
<p>When referring to what each endpoint can do, you’ll want to list valid HTTP Verb and Endpoint combinations. For example, here’s a semi-comprehensive list of actions one can perform with our fictional API. Notice that I’ve preceded each endpoint with the HTTP Verb, as this is the same notation used within an HTTP Request header.</p>
<ul>
<li>GET /zoos: List all Zoos (ID and Name, not too much detail)</li>
<li>POST /zoos: Create a new Zoo</li>
<li>GET /zoos/ZID: Retrieve an entire Zoo object</li>
<li>PUT /zoos/ZID: Update a Zoo (entire object)</li>
<li>PATCH /zoos/ZID: Update a Zoo (partial object)</li>
<li>DELETE /zoos/ZID: Delete a Zoo</li>
<li>GET /zoos/ZID/animals: Retrieve a listing of Animals (ID and Name).</li>
<li>GET /animals: List all Animals (ID and Name).</li>
<li>POST /animals: Create a new Animal</li>
<li>GET /animals/AID: Retrieve an Animal object</li>
<li>PUT /animals/AID: Update an Animal (entire object)</li>
<li>PATCH /animals/AID: Update an Animal (partial object)</li>
<li>GET /animal_types: Retrieve a listing (ID and Name) of all Animal Types</li>
<li>GET /animal_types/ATID: Retrieve an entire Animal Type object</li>
<li>GET /employees: Retrieve an entire list of Employees</li>
<li>GET /employees/EID: Retreive a specific Employee</li>
<li>GET /zoos/ZID/employees: Retrieve a listing of Employees (ID and Name) who work at this Zoo</li>
<li>POST /employees: Create a new Employee</li>
<li>POST /zoos/ZID/employees: Hire an Employee at a specific Zoo</li>
<li>DELETE /zoos/ZID/employees/EID: Fire an Employee from a specific Zoo</li>
</ul>
<p>In the above list, ZID means Zoo ID, AID means Animal ID, EID means Employee ID, and ATID means Animal Type ID. Having a key in your documentation for whatever convention you choose is a good idea.</p>
<p>I’ve left out the common API URL prefix in the above examples for brevity. While this can be fine during communications, in your actual API documentation, you should always display the full URL to each endpoint (e.g. GET <a href="http://api.example.com/v1/animal_type/ATID" target="_blank" rel="external">http://api.example.com/v1/animal_type/ATID</a>).</p>
<p>Notice how the relationships between data is displayed, specifically the many to many relationships between employees and zoos. By adding an additional URL segment, one can perform more specific interactions. Of course there is no HTTP verb for “FIRE”-ing an employee, but by performing a DELETE on an Employee located within a Zoo, we’re able to achieve the same effect.</p>
<p>一个端点就是指向特定资源或资源集合的URL。</p>
<p>如果你正在构建一个虚构的API来展现几个不同的动物园，每一个动物园又包含很多动物，员工和每个动物的物种，你可能会有如下的端点信息：</p>
<ul>
<li><a href="https://api.example.com/v1/zoos" target="_blank" rel="external">https://api.example.com/v1/zoos</a></li>
<li><a href="https://api.example.com/v1/animals" target="_blank" rel="external">https://api.example.com/v1/animals</a></li>
<li><a href="https://api.example.com/v1/animal_types" target="_blank" rel="external">https://api.example.com/v1/animal_types</a></li>
<li><a href="https://api.example.com/v1/employees" target="_blank" rel="external">https://api.example.com/v1/employees</a></li>
</ul>
<p>针对每一个端点来说，你可能想列出所有可行的HTTP动词和端点的组合。如下所示，请注意我把HTTP动词都放在了虚构的API之前，正如将同样的注解放在每一个HTTP请求头里一样。（下面的URL就不翻译了，我觉得没啥必要翻^_^）</p>
<ul>
<li>GET /zoos: List all Zoos (ID and Name, not too much detail)</li>
<li>POST /zoos: Create a new Zoo</li>
<li>GET /zoos/ZID: Retrieve an entire Zoo object</li>
<li>PUT /zoos/ZID: Update a Zoo (entire object)</li>
<li>PATCH /zoos/ZID: Update a Zoo (partial object)</li>
<li>DELETE /zoos/ZID: Delete a Zoo</li>
<li>GET /zoos/ZID/animals: Retrieve a listing of Animals (ID and Name).</li>
<li>GET /animals: List all Animals (ID and Name).</li>
<li>POST /animals: Create a new Animal</li>
<li>GET /animals/AID: Retrieve an Animal object</li>
<li>PUT /animals/AID: Update an Animal (entire object)</li>
<li>PATCH /animals/AID: Update an Animal (partial object)</li>
<li>GET /animal_types: Retrieve a listing (ID and Name) of all Animal Types</li>
<li>GET /animal_types/ATID: Retrieve an entire Animal Type object</li>
<li>GET /employees: Retrieve an entire list of Employees</li>
<li>GET /employees/EID: Retreive a specific Employee</li>
<li>GET /zoos/ZID/employees: Retrieve a listing of Employees (ID and Name) who work at this Zoo</li>
<li>POST /employees: Create a new Employee</li>
<li>POST /zoos/ZID/employees: Hire an Employee at a specific Zoo</li>
<li>DELETE /zoos/ZID/employees/EID: Fire an Employee from a specific Zoo</li>
</ul>
<p>在上面的列表里，ZID表示动物园的ID， AID表示动物的ID，EID表示雇员的ID，还有ATID表示物种的ID。让文档里所有的东西都有一个关键字是一个好主意。</p>
<p>为了简洁起见，我已经省略了所有API共有的URL前缀。作为沟通方式这没什么问题，但是如果你真要写到API文档中，那就必须包含完整的路径（如，GET <a href="http://api.example.com/v1/animal_type/ATID）。" target="_blank" rel="external">http://api.example.com/v1/animal_type/ATID）。</a></p>
<p>请注意如何展示数据之间的关系，特别是雇员与动物园之间的多对多关系。通过添加一个额外的URL段就可以实现更多的交互能力。当然没有一个HTTP动词能表示正在解雇一个人，但是你可以使用DELETE一个动物园里的雇员来达到相同的效果。</p>
<h2 id="Filtering">Filtering</h2><p>过滤器</p>
<p>When a Consumer makes a request for a listing of objects, it is important that you give them a list of every single object matching the requested criteria. This list could be massive. But, it is important that you don’t perform any arbitrary limitations of the data. It is these arbitrary limits which make it hard for a third party developer to know what is going on. If they request a certain Collection, and iterate over the results, and they never see more than 100 items, it is now their job to figure out where this limit is coming from. Is their ORM buggy and limiting items to 100? Is the network chopping up large packets?</p>
<p>Minimize the arbitrary limits imposed on Third Party Developers.</p>
<p>It is important, however, that you do offer the ability for a Consumer to specify some sort of filtering/limitation of the results. The most important reason for this is that the network activity is minimal and the Consumer gets their results back as soon as possible. The second most important reason for this is the Consumer may be lazy, and if the Server can do filtering and pagination for them, all the better. The not-so-important reason (from the Consumers perspective), yet a great benefit for the Server, is that the request will be less resource heavy.</p>
<p>Filtering is mostly useful for performing GETs on Collections of resources. Since these are GET requests, filtering information should be passed via the URL. Here are some examples of the types of filtering you could conceivably add to your API:</p>
<ul>
<li>?limit=10: Reduce the number of results returned to the Consumer (for Pagination) </li>
<li>?offset=10: Send sets of information to the Consumer (for Pagination)</li>
<li>?animal_type_id=1: Filter records which match the following condition (WHERE animal_type_id = 1) </li>
<li>?sortby=name&amp;order=asc: Sort the results based on the specified attribute (ORDER BY name ASC) </li>
</ul>
<p>Some of these filterings can be redundant with endpoint URLS. For example I previously mentioned GET /zoo/ZID/animals. This would be the same thing as GET /animals?zoo_id=ZID. Dedicated endpoints being made available to the Consumer will make their lives easier, this is especially true with requests you anticipate they will make a lot. In the documentation, mention this redundancy so that Third Party Developers aren’t left wondering if differences exist.</p>
<p>Also, this goes without saying, but whenever you perform filtering or sorting of data, make sure you white-list the columns for which the Consumer can filter and sort by. We don’t want any database errors being sent to Consumers!</p>
<p>当客户端创建了一个请求来获取一个对象列表时，很重要一点就是你要返回给他们一个符合查询条件的所有对象的列表。这个列表可能会很大。但你不能随意给返回数据的数量做限制。因为这些无谓的限制会导致第三方开发者不知道发生了什么。如果他们请求一个确切的集合并且要遍历结果，然而他们发现只拿到了100条数据。接下来他们就不得不去查找这个限制条件的出处。到底是ORM的bug导致的，还是因为网络截断了大数据包？</p>
<p>尽可能减少那些会影响到第三方开发者的无谓限制</p>
<p>这点很重要，但你可以让客户端自己对结果做一些具体的过滤或限制。这么做最重要的一个原因是可以最小化网络传输，并让客户端尽可能快的得到查询结果。其次是客户端可能比较懒，如果这时服务器能对结果做一些过滤或分页，对大家都是好事。另外一个不那么重要的原因是（从客户端角度来说），对服务器来说响应请求的负载越少越好。</p>
<p>过滤器是最有效的方式去处理那些获取资源集合的请求。所以只要出现GET的请求，就应该通过URL来过滤信息。以下有一些过滤器的例子，可能是你想要填加到API中的：</p>
<ul>
<li>?limit=10: 减少返回给客户端的结果数量（用于分页）</li>
<li>?offset=10: 发送一堆信息给客户端（用于分页）</li>
<li>?animal_type_id=1: 使用条件匹配来过滤记录</li>
<li>?sortby=name&amp;order=asc:  对结果按特定属性进行排序</li>
</ul>
<p>有些过滤器可能会与端点URL的效果重复。例如我之前提到的GET /zoo/ZID/animals。它也同样可以通过GET /animals?zoo_id=ZID来实现。独立的端点会让客户端更好过一些，因为他们的需求往往超出你的预期。本文中提到这种冗余差异可能对第三方开发者并不可见。</p>
<p>无论怎么说，当你准备过滤或排序数据时，你必须明确的将那些客户端可以过滤或排序的列放到白名单中，因为我们不想将任何的数据库错误发送给客户端。</p>
<h2 id="Status_Codes">Status Codes</h2><p>状态码</p>
<p>It is very important that as a RESTful API, you make use of the proper HTTP Status Codes; they are a standard after all! Various network equipment is able to read these status codes, e.g. load balancers can be configured to avoid sending requests to a web server sending out lots of 50x errors. There are a plethora of HTTP Status Codes to choose from, however this list should be a good starting point:</p>
<p>对于一个RESTful API来说很重要的一点就是要使用HTTP的状态码，因为它们是HTTP的标准。很多的网络设备都可以识别这些状态码，例如负载均衡器可能会通过配置来避免发送请求到一台web服务器，如果这台服务器已经发送了很多的50x错误回来。这里有大量的HTTP状态码可以选择，但是下面的列表只给出了一些重要的代码作为一个参考：</p>
<ul>
<li>200 OK – [GET]<ul>
<li>The Consumer requested data from the Server, and the Server found it for them (Idempotent)</li>
<li>客户端向服务器请求数据，服务器成功找到它们</li>
</ul>
</li>
<li>201 CREATED – [POST/PUT/PATCH]<ul>
<li>The Consumer gave the Server data, and the Server created a resource</li>
<li>客户端向服务器提供数据，服务器根据要求创建了一个资源</li>
</ul>
</li>
<li>204 NO CONTENT – [DELETE]<ul>
<li>The Consumer asked the Server to delete a Resource, and the Server deleted it</li>
<li>客户端要求服务器删除一个资源，服务器删除成功</li>
</ul>
</li>
<li>400 INVALID REQUEST – [POST/PUT/PATCH]<ul>
<li>The Consumer gave bad data to the Server, and the Server did nothing with it (Idempotent)</li>
<li>客户端向服务器提供了不正确的数据，服务器什么也没做</li>
</ul>
</li>
<li>404 NOT FOUND – [*]<ul>
<li>The Consumer referenced an inexistant Resource or Collection, and the Server did nothing (Idempotent)</li>
<li>客户端引用了一个不存在的资源或集合，服务器什么也没做</li>
</ul>
</li>
<li>500 INTERNAL SERVER ERROR – [*]<ul>
<li>The Server encountered an error, and the Consumer has no knowledge if the request was successful</li>
<li>服务器发生内部错误，客户端无法得知结果，即便请求已经处理成功</li>
</ul>
</li>
</ul>
<h2 id="Status_Code_Ranges">Status Code Ranges</h2><p>状态码范围</p>
<ul>
<li><p>The 1xx range is reserved for low-level HTTP stuff, and you’ll very likely go your entire career without manually sending one of these status codes.</p>
</li>
<li><p>The 2xx range is reserved for successful messages where all goes as planned. Do your best to ensure your Server sends as many of these to the Consumer as possible.</p>
</li>
<li><p>The 3xx range is reserved for traffic redirection. Most APIs do not use these requests much (not nearly as often as the SEO folks use them ;), however, the newer Hypermedia style APIs will make more use of these.</p>
</li>
<li><p>The 4xx range is reserved for responding to errors made by the Consumer, e.g. they’re providing bad data or asking for things which don’t exist. These requests should be be idempotent, and not change the state of the server.</p>
</li>
<li><p>The 5xx range is reserved as a response when the Server makes a mistake. Often times, these errors are thrown by low-level functions even outside of the developers hands, to ensure a Consumer gets some sort of response. The Consumer can’t possibly know the state of the server when a 5xx response is received, and so these should be avoidable.</p>
</li>
<li><p>1xx范围的状态码是保留给底层HTTP功能使用的，并且估计在你的职业生涯里面也用不着手动发送这样一个状态码出来。</p>
</li>
<li><p>2xx范围的状态码是保留给成功消息使用的，你尽可能的确保服务器总发送这些状态码给用户。</p>
</li>
<li><p>3xx范围的状态码是保留给重定向用的。大多数的API不会太常使用这类状态码，但是在新的超媒体样式的API中会使用更多一些。</p>
</li>
<li><p>4xx范围的状态码是保留给客户端错误用的。例如，客户端提供了一些错误的数据或请求了不存在的内容。这些请求应该是幂等的，不会改变任何服务器的状态。</p>
</li>
<li><p>5xx范围的状态码是保留给服务器端错误用的。这些错误常常是从底层的函数抛出来的，并且开发人员也通常没法处理。发送这类状态码的目的是确保客户端能得到一些响应。收到5xx响应后，客户端没办法知道服务器端的状态，所以这类状态码是要尽可能的避免。</p>
</li>
</ul>
<h2 id="Expected_Return_Documents">Expected Return Documents</h2><p>预期的返回文档</p>
<p>When performing actions using the different HTTP verbs to Server endpoints, a Consumer needs to get some sort of information in return. This list is pretty typical of RESTful APIs:</p>
<ul>
<li>GET /collection: Return a listing (array) of Resource objects</li>
<li>GET /collection/resource: Return an individual Resource object</li>
<li>POST /collection: Return the newly created Resource object</li>
<li>PUT /collection/resource: Return the complete Resource object</li>
<li>PATCH /collection/resource: Return the complete Resource object</li>
<li>DELETE /collection/resource: Return an empty document</li>
</ul>
<p>Note that when a Consumer creates a Resource, they usually do not know the ID of the Resource being created (nor other attributes such as created and modified timestamps, if applicable). These additional attributes are returned with subsequent request, and of course as a response to the initial POST.</p>
<p>当使用不同的HTTP动词向服务器请求时，客户端需要在返回结果里面拿到一系列的信息。下面的列表是非常经典的RESTful API定义：</p>
<ul>
<li>GET /collection: 返回一系列资源对象</li>
<li>GET /collection/resource: 返回单独的资源对象</li>
<li>POST /collection: 返回新创建的资源对象</li>
<li>PUT /collection/resource: 返回完整的资源对象</li>
<li>PATCH /collection/resource: 返回完整的资源对象</li>
<li>DELETE /collection/resource: 返回一个空文档</li>
</ul>
<p>请注意当一个客户端创建一个资源时，她们常常不知道新建资源的ID（也许还有其他的属性，如创建和修改的时间戳等）。这些属性将在随后的请求中返回，并且作为刚才POST请求的一个响应结果。</p>
<h2 id="Authentication">Authentication</h2><p>认证</p>
<p>Most of the time a Server will want to know exactly who is making which Requests. Sure, some APIs provide endpoints to be consumed by the general (anonymous) public, but most of the time work is being perform on behalf of someone.</p>
<p>OAuth 2.0 provides a great way of doing this. With each Request, you can be sure you know which Consumer is making requests, which User they are making requests on behalf of, and provides a (mostly) standardized way of expiring access or allowing Users to revoke access from a Consumer, all without the need for a third-party consumer to know the Users login credentials.</p>
<p>There are also OAuth 1.0 and xAuth, which fill the same space. Whichever method you choose, make sure it is something common and well documented with many different libraries written for the languages/platforms which your Consumers will likely be using.</p>
<p>I can honestly tell you that OAuth 1.0a, while it is the most secure of the options, is a huge pain in the ass to implement. I was surprised by the number of Third Party Developers who had to implement their own library since one didn’t exist for their language already. I’ve spent enough hours debugging cryptic “invalid signature” errors to recommend you choose an alternative.</p>
<p>服务器在大多数情况下是想确切的知道谁创建了什么请求。当然，有些API是提供给公共用户（匿名用户）的，但是大部分时间里也是代表某人的利益。</p>
<p>OAuth2.0提供了一个非常好的方法去做这件事。在每一个请求里，你可以明确知道哪个客户端创建了请求，哪个用户提交了请求，并且提供了一种标准的访问过期机制或允许用户从客户端注销，所有这些都不需要第三方的客户端知道用户的登陆认证信息。</p>
<p>还有OAuth1.0和xAuth同样适用这样的场景。无论你选择哪个方法，请确保它为多种不同语言/平台上的库提供了一些通用的并且设计良好文档，因为你的用户可能会使用这些语言和平台来编写客户端。</p>
<h2 id="Content_Type">Content Type</h2><p>内容类型</p>
<p>Currently, the most “exciting” of APIs provide JSON data from RESTful interfaces. This includes Facebook, Twitter, GitHub, you name it. XML appears to have lost the war a while ago (except in large corporate environments). SOAP, thankfully, is all but dead, and we really don’t see much APIs providing HTML to be consumed (unless, that is, you’re building a scraper!)</p>
<p>Developers using popular languages and frameworks can very likely parse any valid data format you return to them. You can even provide data in any of the aforementioned data formats (not including SOAP) quite easily, if you’re building a common response object and using a different serializer. What does matter though, is that you make use of the Accept header when responding with data.</p>
<p>Some API creators recommend adding a .json, .xml, or .html file extension to the URL (after the endpoint) for specifying the content type to be returned, although I’m personally not a fan of this. I really like the Accept header (which is built into the HTTP spec) and feel that is the appropriate thing to use.</p>
<p>目前，大多数“精彩”的API都为RESTful接口提供JSON数据。诸如Facebook，Twitter，Github等等你所知的。XML曾经也火过一把（通常在一个大企业级环境下）。这要感谢SOAP，不过它已经挂了，并且我们也没看到太多的API把HTML作为结果返回给客户端（除非你在构建一个爬虫程序）。</p>
<p>只要你返回给他们有效的数据格式，开发者就可以使用流行的语言和框架进行解析。如果你正在构建一个通用的响应对象，通过使用一个不同的序列化器，你也可以很容易的提供之前所提到的那些数据格式（不包括SOAP）。而你所要做的就是把使用方式放在响应数据的接收头里面。</p>
<p>有些API的创建者会推荐把.json, .xml, .html等文件的扩展名放在URL里面来指示返回内容类型，但我个人并不习惯这么做。我依然喜欢通过接收头来指示返回内容类型（这也是HTTP标准的一部分），并且我觉得这么做也比较适当一些。</p>
<h2 id="Hypermedia_APIs">Hypermedia APIs</h2><p>超媒体API</p>
<p>Hypermedia APIs are very likely the future of RESTful API design. They’re actually a pretty amazing concept, going “back to the roots” of how HTTP and HTML was intended to work.</p>
<p>When working with non-Hypermedia RESTful APIs, the URL Endpoints are part of the contract between the Server and the Consumer. These Endpoints MUST be known by the Consumer ahead of time, and changing them means the Consumer is no longer able to communicate with the Server as intended. This, as you can assume, is quite a limitation.</p>
<p>Now, API Consumers are of course not the only user agent making HTTP requests on the Internet. Far from it. Humans, with their web browsers, are the most common user agent making HTTP requests. Humans, however, are NOT locked into this predefined Endpoint URL contract that RESTful APIs are. What makes humans so special? Well, they’re able to read content, click links for headings which look interesting, and in general explore a website and interpret content to get to where they want to go. If a URL changes, a human is not affected (unless, that is, they bookmarked a page, in which case they go to the homepage and find a new route to their beloved data).</p>
<p>The Hypermedia API concept works the same way a human would. Requesting the Root of the API returns a listing of URLs which point perhaps to each collection of information, and describing each collection in a way which the Consumer can understand. Providing IDs for each resource isn’t important (or necessarily required), as long as a URL is provided.</p>
<p>With the Consumer of a Hypermedia API crawling links and gathering information, URLs are always up-to-date within responses, and do not need to be known beforehand as part of a contract. If a URL is ever cached, and a subsequent request returns a 404, the Consumer can simply go back to the root and discover the content again.</p>
<p>When retrieving a list of Resources within a Collection, an attribute containing a complete URL for the individual Resources are returned. When performing a POST/PATCH/PUT, the response can be a 3xx redirect to the complete Resource.</p>
<p>JSON doesn’t quite give us the semantics we need for specifying which attributes are URLs, nor how URLs relate to the current document. HTML, as you can probably guess, does provide this information. We may very well see our APIs coming full circle and returning back to consuming HTML. Considering how far we’ve come with CSS, one day we may even see  it be common practice for APIs and Websites to use the exact same URLs and content.</p>
<p>超媒体API很可能就是RESTful API设计的将来。超媒体是一个非常棒的概念，它回归到了HTTP和HTML如何运作的“本质”。</p>
<p>在非超媒体RESTful API的情景中，URL端点是服务器与客户端契约的一部分。这些端点必须让客户端事先知道，并且修改它们也意味着客户端可能再也无法与服务器通信了。你可以先假定这是一个限制。</p>
<p>时至今日，英特网上的API客户端已经不仅仅只有那些创建HTTP请求的用户代理了。大多数HTTP请求是由人们通过浏览器产生的。人们不会被哪些预先定义好的RESTful API端点URL所束缚。是什么让人们变的如此与众不同？因为人们可以阅读内容，可以点击他们感兴趣的链接，并浏览一下网站，然后跳到他们关注的内容那里。即使一个URL改变了，人们也不会受到影响（除非他们事先给某个页面做了书签，这时他们回到主页并发现原来有一条新的路径可以去往之前的页面）。</p>
<p>超媒体API概念的运作跟人们的行为类似。通过请求API的根来获得一个URL的列表，这个列表里面的每一个URL都指向一个集合，并且提供了客户端可以理解的信息来描述每一个集合。是否为每一个资源提供ID并不重要（或者不是必须的），只要提供URL即可。</p>
<p>一个超媒体API一旦具有了客户端，那么它就可以爬行链接并收集信息，而URL总是在响应中被更新，并且不需要如契约的一部分那样事先被知晓。如果一个URL曾经被缓存过，并且在随后的请求中返回404错误，那么客户端可以很简单的回退到根URL并重新发现内容。</p>
<p>在获取集合中的一个资源列表时会返回一个属性，这个属性包含了各个资源的完整URL。当实施一个POST/PATCH/PUT请求后，响应可以被一个3xx的状态码重定向到完整的资源上。</p>
<p>JSON不仅告诉了我们需要定义哪些属性作为URL，也告诉了我们如何将URL与当前文档关联的语义。正如你猜的那样，HTML就提供了这样的信息。我们可能很乐意看到我们的API走完了完整的周期，并回到了处理HTML上来。想一下我们与CSS一起前行了多远，有一天我们可能再次看到它变成了一个通用实践让API和网站可以去使用相同的URL和内容。</p>
<h2 id="Documentation">Documentation</h2><p>文档</p>
<p>Honestly, if you don’t conform 100% to the criteria in this guide, your API will not necessarily be horrible. However, if you don’t properly document your API, nobody is going to know how to use it, and it WILL be a horrible API.</p>
<p>Make your Documentation available to unauthenticated developers.</p>
<p>Do not use automatic documentation generators, or if you do, at least make sure you’re doctoring it up and making it presentable.</p>
<p>Do not truncate example request and response bodies; show the whole thing. Use a syntax highlighter in your documentation.</p>
<p>Document expected response codes and possible error messages for each endpoint, and what could have gone wrong to cause those error messages.</p>
<p>If you’ve got the spare time, build a developer API console so that developers can immediately experiment with your API. It’s not as hard as you might think and developers (both internal and third party) will love you for it!</p>
<p>Make sure your documentation can be printed; CSS is a powerful thing; don’t be afraid to hide that sidebar when the docs are printed. Even if nobody ever prints a physical copy, you’d be surprised at how many developers like to print to PDF for offline reading.</p>
<p>老实说，即使你不能百分之百的遵循指南中的条款，你的API也不是那么糟糕。但是，如果你不为API准备文档的话，没有人会知道怎么使用它，那它真的会成为一个糟糕的API。</p>
<p>让你的文档对那些未经认证的开发者也可用<br>不要使用文档自动化生成器，即便你用了，你也要保证自己审阅过并让它具有更好的版式。<br>不要截断示例中请求与响应的内容，要展示完整的东西。并在文档中使用高亮语法。<br>文档化每一个端点所预期的响应代码和可能的错误消息，和在什么情况下会产生这些的错误消息<br>如果你有富余的时间，那就创建一个控制台来让开发者可以立即体验一下API的功能。创建一个控制台并没有想象中那么难，并且开发者们（内部或者第三方）也会因此而拥戴你。</p>
<p>另外确保你的文档能够被打印。CSS是个强大的工具可以帮助到你。而且在打印的时候也不用太担心边侧栏的问题。即便没有人会打印到纸上，你也会惊奇的发现很多开发者愿意转化成PDF格式进行离线阅读。</p>
<h2 id="Errata:_Raw_HTTP_Packet">Errata: Raw HTTP Packet</h2><p>勘误：原始的HTTP封包</p>
<p>Since everything we do is over HTTP, I’m going to show you a dissection of an HTTP packet. I’m often surprised at how many people don’t know what these things look like! When the Consumer sends a Request to the Server, they provide a set of Key/Value pairs, called a Header, along with two newline characters, and finally the request body. This is all sent in the same packet.</p>
<p>The server then responds in the say Key/Value pair format, with two newlines and then the response body. HTTP is very much a request/response protocol; there is no “Push” support (the Server sending data to the Consumer unprovoked), unless you use a different protocol such as Websockets.</p>
<p>When designing your API, you should be able to work with tools which allow you to look at raw HTTP packets. Consider using Wireshark, for example. Also, make sure you are using a framework / web server which allows you to read and change as many of these fields as possible.</p>
<p>因为我们所做的都是基于HTTP协议，所以我将展示给你一个解析了的HTTP封包。我经常很惊讶的发现有多少人不知道这些东西。当客户端发送一个请求道服务器时，他们会提供一个键值对集，先是一个头，紧跟着是两个回车换行符，然后才是请求体。所有这些都是在一个封包里被发送。</p>
<p>服务器响应也是同样的键值对集，带两个回车换行符，然后是响应体。HTTP就是一个请求/响应协议；它不支持“推送”模式（服务器直接发送数据给客户端），除非你采用其他协议，如Websockets。</p>
<p>当你设计API时，你应该能够使用工具去查看原始的HTTP封包。Wireshark是个不错的选择。同时，你也该采用一个框架/web服务器，使你能够在必要时修改某些字段的值。</p>
<p><em>Example HTTP Request</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Date: Wed, <span class="number">18</span> Dec <span class="number">2013</span> <span class="number">06</span>:<span class="number">08</span>:<span class="number">22</span> GMT</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Access-Control-Max-Age: <span class="number">1728000</span></span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="string">"created"</span>: <span class="number">1386363036</span>,</span><br><span class="line">  <span class="string">"modified"</span>: <span class="number">1386363036</span>,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"Gir"</span>,</span><br><span class="line">  <span class="string">"animal_type"</span>: <span class="number">12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>文章是转的，有两个版本，先看一个简版的，后面再跟一个全文版的</p>
<h2 id="简版_RESTful">简版 RESTful</h2><h3 id="协议">协议</h3><p>API与用户的通信协议，总是使用HTTPs协议。</p>
<h3 id="域名">域名</]]>
    </summary>
    
      <category term="API" scheme="http://www.wxameng.com/tags/API/"/>
    
      <category term="RESTful" scheme="http://www.wxameng.com/tags/RESTful/"/>
    
      <category term="Server" scheme="http://www.wxameng.com/categories/Server/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AES加密原理与实现]]></title>
    <link href="http://www.wxameng.com/Principle-and-implementation-of-AES/"/>
    <id>http://www.wxameng.com/Principle-and-implementation-of-AES/</id>
    <published>2015-12-28T00:15:36.000Z</published>
    <updated>2015-12-28T00:16:14.000Z</updated>
    <content type="html"><![CDATA[<p>Encrypt It<br>Keep Your Data Secure with the New Advanced Encryption Standard</p>
<h2 id="Introduction">Introduction</h2><p>The National Institute of Standards and Technology (NIST) established the new Advanced Encryption Standard (AES) specification on May 26, 2002. In this article I will provide a working implementation of AES written in C#, and a complete explanation of exactly what AES is and how the code works. I’ll show you how to encrypt data using AES and extend the code given here to develop a commercial-quality AES class. I’ll also explain how and why to incorporate AES encryption into your software systems, and how to test AES-based software.</p>
<p>Note that the code presented in this article and any other implementation based on this article is subject to applicable Federal cryptographic module export controls (see Commercial Encryption Export Controls for the exact regulations).</p>
<a id="more"></a>
<p>AES is a new cryptographic algorithm that can be used to protect electronic data. Specifically, AES is an iterative, symmetric-key block cipher that can use keys of 128, 192, and 256 bits, and encrypts and decrypts data in blocks of 128 bits (16 bytes). Unlike public-key ciphers, which use a pair of keys, symmetric-key ciphers use the same key to encrypt and decrypt data. Encrypted data returned by block ciphers have the same number of bits that the input data had. Iterative ciphers use a loop structure that repeatedly performs permutations and substitutions of the input data. Figure 1 shows AES in action encrypting and then decrypting a 16-byte block of data using a 192-bit key.</p>
<p><img src="../Principle-and-implementation-of-AES/1.gif" alt=""><br><em>Figure 1 Some Data</em></p>
<p>AES is the successor to the older Data Encryption Standard (DES). DES was approved as a Federal standard in 1977 and remained viable until 1998 when a combination of advances in hardware, software, and cryptanalysis theory allowed a DES-encrypted message to be decrypted in 56 hours. Since that time numerous other successful attacks on DES-encrypted data have been made and DES is now considered past its useful lifetime.</p>
<p>In late 1999, the Rijndael (pronounced “rain doll”) algorithm, created by researchers Joan Daemen and Vincent Rijmen, was selected by the NIST as the proposal that best met the design criteria of security, implementation efficiency, versatility, and simplicity. Although the terms AES and Rijndael are sometimes used interchangeably, they are distinct. AES is widely expected to become the de facto standard for encrypting all forms of electronic data including data used in commercial applications such as banking and financial transactions, telecommunications, and private and Federal information.</p>
<h2 id="Overview_of_the_AES_Algorithm">Overview of the AES Algorithm</h2><p>The AES algorithm is based on permutations and substitutions. Permutations are rearrangements of data, and substitutions replace one unit of data with another. AES performs permutations and substitutions using several different techniques. To illustrate these techniques, let’s walk through a concrete example of AES encryption using the data shown in Figure 1.</p>
<p>The following is the 128-bit value that you will encrypt with the indexes array: </p>
<pre><code><span class="number">00</span> <span class="number">11</span> <span class="number">22</span> <span class="number">33</span> <span class="number">44</span> <span class="number">55</span> <span class="number">66</span> <span class="number">77</span> <span class="number">88</span> <span class="number">99</span> aa bb cc dd ee ff
<span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span>
</code></pre><p>The 192-bit key value is: </p>
<pre><code><span class="number">00</span> <span class="number">01</span> <span class="number">02</span> <span class="number">03</span> <span class="number">04</span> <span class="number">05</span> <span class="number">06</span> <span class="number">07</span> <span class="number">08</span> <span class="number">09</span> <span class="number">0</span>a <span class="number">0</span>b <span class="number">0</span>c <span class="number">0</span>d <span class="number">0</span>e <span class="number">0f</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span>
<span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>
</code></pre><p><img src="../Principle-and-implementation-of-AES/2.gif" alt=""><br><em>Figure 2 Sbox</em></p>
<p>Figure 2 SboxWhen the AES constructor is called, two tables that will be used by the encryption method are initialized. The first table is a substitution box named Sbox. It is a 16 × 16 matrix. The first five rows and columns of Sbox are shown in Figure 2. Behind the scenes, the encryption routine takes the key array and uses it to generate a “key schedule” table named w[], shown in Figure 3.</p>
<p><img src="../Principle-and-implementation-of-AES/3.gif" alt=""><br><em>Figure 3 Key Sched.</em></p>
<p>Figure 3 Key Sched.The first Nk (6) rows of w[] are seeded with the original key value (0x00 through 0x17) and the remaining rows are generated from the seed key. The variable Nk represents the size of the seed key in 32-bit words. You’ll see exactly how w[] is generated later when I examine the AES implementation. The point is that there are now many keys to use instead of just one. These new keys are called the round keys to distinguish them from the original seed key.</p>
<p><img src="../Principle-and-implementation-of-AES/4.gif" alt=""><br><em>Figure 4 State</em> </p>
<p>Figure 4 StateThe AES encryption routine begins by copying the 16-byte input array into a 4×4 byte matrix named State (see Figure 4). The AES encryption algorithm is named Cipher and operates on State[] and can be described in pseudocode (see Figure 5).</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Cipher(<span class="keyword">byte</span>[] input, <span class="keyword">byte</span>[] output)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">byte</span>[<span class="number">4</span>,<span class="number">4</span>] State;</span><br><span class="line">  <span class="keyword">copy</span> input[] <span class="keyword">into</span> State[]</span><br><span class="line">  AddRoundKey</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">round</span> = <span class="number">1</span>; <span class="keyword">round</span> &lt; Nr-<span class="number">1</span>; ++<span class="keyword">round</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    SubBytes</span><br><span class="line">    ShiftRows</span><br><span class="line">    MixColumns</span><br><span class="line">    AddRoundKey</span><br><span class="line">  &#125;</span><br><span class="line">  SubBytes</span><br><span class="line">  ShiftRows</span><br><span class="line">  AddRoundKey</span><br><span class="line">  <span class="keyword">copy</span> State[] to output[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Figure 5 Cipher Algorithm Pseudocode</em></p>
<p>The encryption algorithm performs a preliminary processing step that’s called AddRoundKey in the specification. AddRoundKey performs a byte-by-byte XOR operation on the State matrix using the first four rows of the key schedule, and XORs input State[r,c] with round keys table w[c,r].</p>
<p>For example, if the first row of the State matrix holds the bytes { 00, 44, 88, cc }, and the first column of the key schedule is { 00, 04, 08, 0c }, then the new value of State[0,2] is the result of XORing State[0,2] (0x88) with w[2,0] (0x08), or 0x80: </p>
<pre><code><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>
<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>  XOR

<span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>
</code></pre><p>The main loop of the AES encryption algorithm performs four different operations on the State matrix, called SubBytes, ShiftRows, MixColumns, and AddRoundKey in the specification. The AddRoundKey operation is the same as the preliminary AddRoundKey except that each time AddRoundKey is called, the next four rows of the key schedule are used. The SubBytes routine is a substitution operation that takes each byte in the State matrix and substitutes a new byte determined by the Sbox table. For example, if the value of State[0,1] is 0x40 and you want to find its substitute, you take the value at State[0,1] (0x40) and let x equal the left digit (4) and y equal the right digit (0). Then you use x and y as indexes into the Sbox table to find the substitution value, as shown in Figure 2.</p>
<p>ShiftRows is a permutation operation that rotates bytes in the State matrix to the left. Figure 6 shows how ShiftRows works on State[]. Row 0 of State is rotated 0 positions to the left, row 1 is rotated 1 position left, row 2 is rotated 2 positions left, and row 3 is rotated 3 positions left.</p>
<p><img src="../Principle-and-implementation-of-AES/5.gif" alt=""><br><em>Figure 6 Running ShiftRows on State</em></p>
<p>Figure 6 Running ShiftRows on StateThe MixColumns operation is a substitution operation that is the trickiest part of the AES algorithm to understand. It replaces each byte with the result of mathematical field additions and multiplications of values in the byte’s column. I will explain the details of special field addition and multiplication in the next section.</p>
<p>Suppose the value at State[0,1] is 0x09, and the other values in column 1 are 0x60, 0xe1, and 0x04; then the new value for State[0,1] is shown in the following: </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">State[<span class="number">0</span>,<span class="number">1</span>] = (State[<span class="number">0</span>,<span class="number">1</span>] * <span class="number">0x01</span>) + </span><br><span class="line">             (State[<span class="number">1</span>,<span class="number">1</span>] * <span class="number">0x02</span>) +</span><br><span class="line">             (State[<span class="number">2</span>,<span class="number">1</span>] * <span class="number">0x03</span>) +</span><br><span class="line">             (State[<span class="number">3</span>,<span class="number">1</span>] * <span class="number">0x01</span>)</span><br><span class="line"></span><br><span class="line">           = (<span class="number">0x09</span> * <span class="number">0x01</span>) + (<span class="number">0x60</span> * <span class="number">0x02</span>) + (<span class="number">0xe1</span> * <span class="number">0x03</span>) +</span><br><span class="line">             (<span class="number">0x04</span> * <span class="number">0x01</span>)</span><br><span class="line"></span><br><span class="line">           = <span class="number">0x57</span></span><br></pre></td></tr></table></figure>
<p>The addition and multiplication are special mathematical field operations, not the usual addition and multiplication on integers.</p>
<p>The four operations SubBytes, ShiftRows, MixColumns, and AddRoundKey are called inside a loop that executes Nr times—the number of rounds for a given key size, less 1. The number of rounds that the encryption algorithm uses is either 10, 12, or 14 and depends on whether the seed key size is 128, 192, or 256 bits. In this example, because Nr equals 12, the four operations are called 11 times. After this iteration completes, the encryption algorithm finishes by calling SubBytes, ShiftRows, and AddRoundKey before copying the State matrix to the output parameter.</p>
<p>In summary, there are four operations that are at the heart of the AES encryption algorithm. AddRoundKey substitutes groups of 4 bytes using round keys generated from the seed key value. SubBytes substitutes individual bytes using a substitution table. ShiftRows permutes groups of 4 bytes by rotating 4-byte rows. MixColumns substitutes bytes using a combination of both field addition and multiplication.</p>
<h2 id="Field_Addition_and_Multiplication_in_GF(28)">Field Addition and Multiplication in GF(28)</h2><p>As you’ve seen, the AES encryption algorithm uses fairly straightforward techniques for substitution and permutation, except for the MixColumns routine. The MixColumns routine uses special addition and multiplication. The addition and multiplication used by AES are based on mathematical field theory. In particular, AES is based on a field called GF(28).</p>
<p>The GF(28) field consists of a set of 256 values from 0x00 to 0xff, plus addition and multiplication, hence the (28). GF stands for Galois Field, named after the mathematician who founded field theory. One of the characteristics of GF(28) is that the result of an addition or multiplication operation must be in the set {0x00 … 0xff}. Although the theory of fields is rather deep, the net result for GF(28) addition is simple: GF(28) addition is just the XOR operation.</p>
<p>Multiplication in GF(28) is trickier, however. As you’ll see later in the C# implementation, the AES encryption and decryption routines need to know how to multiply by only the seven constants 0x01, 0x02, 0x03, 0x09, 0x0b, 0x0d, and 0x0e. So instead of explaining GF(28) multiplication theory in general, I will explain it just for these seven specific cases.</p>
<p>Multiplication by 0x01 in GF(28) is special; it corresponds to multiplication by 1 in normal arithmetic and works the same way—any value times 0x01 equals itself.</p>
<p>Now let’s look at multiplication by 0x02. As in the case of addition, the theory is deep, but the net result is fairly simple. If the value being multiplied is less than 0x80, then the result of multiplication is just the value left-shifted 1 bit position. If the value being multiplied is greater than or equal to 0x80, then the result of multiplication is the value left-shifted 1 bit position XORed with the value 0x1b. This prevents “field overflow” and keeps the product of the multiplication in range.</p>
<p>Once you’ve established addition and multiplication by 0x02 in GF(28), you can use them to define multiplication by any constant. To multiply by 0x03 in GF(28), you can decompose 0x03 as powers of 2 and additions. To multiply an arbitrary byte b by 0x03, observe that 0x03 = 0x02 + 0x01. Thus: </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b * <span class="number">0x03</span> = b * (<span class="number">0x02</span> + <span class="number">0x01</span>)</span><br><span class="line">         = (b * <span class="number">0x02</span>) + (b * <span class="number">0x01</span>)</span><br></pre></td></tr></table></figure>
<p>This can be done because you know how to multiply by 0x02 and 0x01 and how to perform addition. Similarly, to multiply an arbitrary byte b by 0x0d, you do this:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b * <span class="number">0x0d</span> = b * (<span class="number">0x08</span> + <span class="number">0x04</span> + <span class="number">0x01</span>)</span><br><span class="line">         = (b * <span class="number">0x08</span>) + (b * <span class="number">0x04</span>) + (b * <span class="number">0x01</span>)</span><br><span class="line">         = (b * <span class="number">0x02</span> * <span class="number">0x02</span> * <span class="number">0x02</span>) + (b * <span class="number">0x02</span> * <span class="number">0x02</span>) + (b * <span class="number">0x01</span>)</span><br></pre></td></tr></table></figure></p>
<p>The other multiplications needed for the AES MixColumns routine in the encryption and decryption algorithm follow the same general pattern, as shown here: </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">b * <span class="number">0x09</span> = b * (<span class="number">0x08</span> + <span class="number">0x01</span>)</span><br><span class="line">         = (b * <span class="number">0x02</span> * <span class="number">0x02</span> * <span class="number">0x02</span>) + (b * <span class="number">0x01</span>)</span><br><span class="line"></span><br><span class="line">b * <span class="number">0x0b</span> = b * (<span class="number">0x08</span> + <span class="number">0x02</span> + <span class="number">0x01</span>)</span><br><span class="line">         = (b * <span class="number">0x02</span> * <span class="number">0x02</span> * <span class="number">0x02</span>) + (b * <span class="number">0x02</span>) + (b * <span class="number">0x01</span>)</span><br><span class="line"></span><br><span class="line">b * <span class="number">0x0e</span> = b * (<span class="number">0x08</span> + <span class="number">0x04</span> + <span class="number">0x02</span>)</span><br><span class="line">         = (b * <span class="number">0x02</span> * <span class="number">0x02</span> * <span class="number">0x02</span>) + (b * <span class="number">0x02</span> * <span class="number">0x02</span>) + (b * <span class="number">0x02</span>)</span><br></pre></td></tr></table></figure>
<p>To summarize, addition in GF(28) is the XOR operation. Multiplication in GF(28) reduces to additions and multiplications by 0x02, where multiplication by 0x02 is a conditional 1-bit left shift. The AES specification contains a lot of additional information about operations in GF(28).</p>
<h2 id="Key_Expansion">Key Expansion</h2><p>The AES encryption and decryption algorithms use a key schedule generated from the seed key array of bytes. The AES specification refers to this as the KeyExpansion routine. Generating, in essence, multiple keys from an initial key instead of using a single key greatly increases the diffusion of bits. Although not overwhelmingly difficult, understanding KeyExpansion is one of the trickier parts of the AES algorithm. In high-level pseudocode, the KeyExpansion routine looks like the following: </p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">KeyExpansion(<span class="keyword">byte</span>[] key, <span class="keyword">byte</span>[][<span class="number">4</span>] w)</span><br><span class="line">&#123;</span><br><span class="line">  copy <span class="operator">the</span> seed key <span class="keyword">into</span> <span class="operator">the</span> <span class="keyword">first</span> rows <span class="operator">of</span> w</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">each</span> remaining row <span class="operator">of</span> w</span><br><span class="line">  &#123;</span><br><span class="line">    use <span class="constant">two</span> <span class="operator">of</span> <span class="operator">the</span> previous rows <span class="built_in">to</span> <span class="built_in">create</span> <span class="operator">a</span> <span class="built_in">new</span> row</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The “use two of the previous rows to create a new row” routine makes use of two subroutines, RotWord and SubWord, and a table of constants named Rcon (for “round constants”). Let’s look at each of these three items and then come back to the KeyExpansion routine as a whole.</p>
<p>The RotWord routine is simple. It accepts an array of 4 bytes and rotates them 1 position left. Because the round schedule table w[] has four columns, RotWord rotates a row of w[] to the left. Notice that the RotWord function used by KeyExpansion is very similar to the ShiftRows routine used by the encryption algorithm except that it works on a single row of the key schedule w[] instead of the entire encryption state table State[].</p>
<p>The SubWord routine performs a byte-by-byte substitution on a given row of the key schedule table w[] using the substitution table Sbox. The substitutions in KeyExpansion operate exactly like those in the encryption algorithm. The input byte to be substituted is separated into an (x,y) pair which are used as indexes into the substitution table Sbox. For example, substitution for 0x27 results in x = 2 and y = 7, and Sbox[2,7] returns 0xcc.</p>
<p>The KeyExpansion routine uses an array Rcon[], called the round constant table. These constants are 4 bytes each to match with a row of the key schedule table. The AES KeyExpansion routine requires 11 round constants. You can see these constants listed in Figure 7.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BuildRcon</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.Rcon = <span class="keyword">new</span> byte[<span class="number">11</span>,<span class="number">4</span>] &#123; &#123;<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;,  </span><br><span class="line">                               &#123;<span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;,</span><br><span class="line">                               &#123;<span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;,</span><br><span class="line">                               &#123;<span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;,</span><br><span class="line">                               &#123;<span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;,</span><br><span class="line">                               &#123;<span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;,</span><br><span class="line">                               &#123;<span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;,</span><br><span class="line">                               &#123;<span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;,</span><br><span class="line">                               &#123;<span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;,</span><br><span class="line">                               &#123;<span class="number">0x1b</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;,</span><br><span class="line">                               &#123;<span class="number">0x36</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125; &#125;;</span><br><span class="line">&#125;  <span class="comment">// BuildRcon()</span></span><br></pre></td></tr></table></figure>
<p><em>Figure 7 Initializing Rcon (Close Figure 7) </em></p>
<p>The leftmost byte of each round constant is a power of 2 in the GF(28) field. Another way of looking at it is to observe that each value is the previous value times 0x02, as described in the previous section discussing multiplication in GF(28). Notice that 0x80 × 0x02 = 0x1b is 0x80 left-shifted 1 bit followed by an XOR with 0x1b, as described earlier.</p>
<p>Now let’s take a closer look at the loop inside KeyExpansion. In more detailed pseudocode than before, the loop is: </p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">for <span class="list">(<span class="keyword">row</span> = Nk<span class="comment">; row &lt; (4 * Nr+1); ++row)</span></span><br><span class="line">&#123;</span><br><span class="line">  temp = w[row-1]</span><br><span class="line"></span><br><span class="line">  if <span class="list">(<span class="keyword">row</span> % Nk == <span class="number">0</span>)</span> </span><br><span class="line">    temp = SubWord<span class="list">(<span class="keyword">RotWord</span><span class="list">(<span class="keyword">temp</span>)</span>)</span> xor Rcon[row/Nk]</span><br><span class="line">  else if <span class="list">(<span class="keyword">Nk</span> == <span class="number">8</span> and row % Nk == <span class="number">4</span>)</span></span><br><span class="line">    temp = SubWord<span class="list">(<span class="keyword">temp</span>)</span></span><br><span class="line"></span><br><span class="line">  w[row] = w[row-Nk] xor temp</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Ignoring the if clause for a moment, you’ll see that each row of the key schedule table w[] is the result of XORing the previous row with the row Nk (4, 6, or 8 depending on the key size) rows before. The first part of the if conditional modifies every fourth, sixth, or eighth row of the key schedule with SubWord, RotWord, and XORing with a round constant, depending on whether the key size is 128, 192, or 256 bits. The second part of the conditional will modify rows 12, 20, 28 and so on—every eighth row—for a 256-bit key to add additional variability to the key schedule.</p>
<p>Let’s see how KeyExpansion gets started with the example presented at the beginning of this article. The seed key is the 192-bit / 6-word value: </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">01</span> <span class="number">02</span> <span class="number">03</span> <span class="number">04</span> <span class="number">05</span> <span class="number">06</span> <span class="number">07</span> <span class="number">08</span> <span class="number">09</span> <span class="number">0</span>a <span class="number">0</span>b <span class="number">0</span>c <span class="number">0</span>d <span class="number">0</span>e <span class="number">0f</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span></span><br></pre></td></tr></table></figure>
<p>The key schedule byte table w[] has the dimensions 4 columns and Nb × (Nr + 1) equals 4 × (12 + 1), or 52 rows. The KeyExpansion routine copies the values in the seed key into the first rows of the key schedule byte table w[]. Because my seed key is 192 bits (24 bytes), and the w[] table always has 4 columns, in this case KeyExapansion copies the seed key into the first 6 rows of w[]. Now let’s see how the KeyExpansion routine fills the rest of the key schedule table. In my example, the first calculated row is row 6 because rows 0 to 5 were filled with the seed key values: </p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">temp = w[row-<span class="number">1</span>] = <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span></span><br><span class="line"><span class="type">The</span> condition (row % <span class="type">Nk</span> == <span class="number">0</span>) <span class="keyword">is</span> <span class="literal">true</span>, so first the <span class="type">RotWord</span> subroutine <span class="keyword">is</span> applied: </span><br><span class="line">temp = <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">14</span></span><br><span class="line"><span class="type">Then</span> <span class="type">SubWord</span> <span class="keyword">is</span> applied: </span><br><span class="line">temp = <span class="number">59</span> <span class="number">47</span> f0 fa</span><br><span class="line"><span class="type">Then</span> <span class="type">XORed</span> <span class="keyword">with</span> <span class="type">Rcon</span>[row / <span class="type">Nk</span>] = <span class="type">Rcon</span>[<span class="number">6</span> / <span class="number">6</span>] = <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>: </span><br><span class="line">temp = <span class="number">58</span> <span class="number">47</span> f0 fa</span><br><span class="line"><span class="type">This</span> <span class="keyword">is</span> then <span class="type">XORed</span> <span class="keyword">with</span> w[row-<span class="type">Nk</span>] = w[<span class="number">6</span>-<span class="number">6</span>] = <span class="number">00</span> <span class="number">01</span> <span class="number">02</span> <span class="number">03</span>, yielding the following <span class="literal">result</span>: </span><br><span class="line">w[<span class="number">6</span>] = <span class="number">58</span> <span class="number">46</span> f2 f9</span><br><span class="line"><span class="type">The</span> process repeats itself <span class="keyword">for</span> all <span class="keyword">of</span> the remaining rows <span class="keyword">in</span> key schedule table w[].</span><br></pre></td></tr></table></figure>
<p>To summarize, an important part of AES encryption and decryption is the generation of multiple round keys from the initial seed key. This KeyExpansion algorithm generates a key schedule and uses substitution and permutation in a way that is similar in most respects to the encryption and decryption algorithms.</p>
<h2 id="The_AES_Class_Constructor_in_C">The AES Class Constructor in C</h2><p>Now that I’ve examined all the components of the AES encryption algorithm, I’ll implement it in C#. The official specification of the AES algorithm is contained in Federal Information Processing Standards Publication 197. I decided to base my implementation on it as closely as possible, but I quickly discovered that the specification was more of a theory document than an implementation guide. To exploit the official specification as a resource, I have used the same variable names as those used in the standards publication (even when they are rather cryptic like “Nr” and “w”).</p>
<p>My design uses the nine data members and one enumeration type as shown here: </p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">KeySize</span> &#123;</span> Bits128, Bits192, </span><br><span class="line">                      Bits256 &#125;;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="typename">int</span> Nb;         </span><br><span class="line"><span class="keyword">private</span> <span class="typename">int</span> Nk;         </span><br><span class="line"><span class="keyword">private</span> <span class="typename">int</span> Nr;         </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="typename">byte</span>[] key;     </span><br><span class="line"><span class="keyword">private</span> <span class="typename">byte</span>[,] Sbox;   </span><br><span class="line"><span class="keyword">private</span> <span class="typename">byte</span>[,] iSbox;  </span><br><span class="line"><span class="keyword">private</span> <span class="typename">byte</span>[,] w;       </span><br><span class="line"><span class="keyword">private</span> <span class="typename">byte</span>[,] Rcon;   </span><br><span class="line"><span class="keyword">private</span> <span class="typename">byte</span>[,] State;</span><br></pre></td></tr></table></figure>
<p>Because the key size can only be 128, 192, or 256 bits, it is a great candidate for an enumerated type: </p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">KeySize</span> &#123; <span class="title">Bits128</span>, <span class="title">Bits192</span>, <span class="title">Bits256</span> &#125;;</span></span><br></pre></td></tr></table></figure>
<p>The specification document generally uses bytes as its basic storage unit but uses 4-byte words as the size for two important data members. The two members Nb and Nk represent the block size in words and key size in words, respectively. Nr represents the number of rounds. The block size is always 16 bytes (or 128 bits, which is 4 words for AES), so it could have been declared as a constant. The key size is assigned a value of 4, 6, or 8 according to the value of the enumeration parameter KeySize. The AES algorithm iterates through a number of rounds to increase the complexity of the encrypted data. The number of rounds is either 10, 12, or 14 and is based on cryptanalysis theory. It depends directly on the key size.</p>
<p>When designing a class interface, I like to work backwards. I imagine calling the constructor and methods from an application. Using this approach, I decided that I wanted to instantiate an AES object like the following: </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Aes <span class="tag">a</span> = new <span class="function"><span class="title">Aes</span><span class="params">(the key size, the seed key)</span></span></span><br></pre></td></tr></table></figure>
<p>I called the encryption and decryption routines as follows:<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">a</span>.Cipher(plainText, cipherText)<span class="comment">;</span></span><br><span class="line"><span class="literal">a</span>.InvCipher(cipherText, decipheredText)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>I chose the slightly awkward method names Cipher and InvCipher because they are used in the AES specification document. Here is the code for the AES class constructor: </p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Aes(KeySize keySize, <span class="built_in">byte</span>[] keyBytes)</span><br><span class="line">&#123;</span><br><span class="line">  SetNbNkNr(keySize);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.<span class="variable">key</span> = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="keyword">this</span>.Nk * <span class="number">4</span>];  </span><br><span class="line">  keyBytes.CopyTo(<span class="keyword">this</span>.<span class="variable">key</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  BuildSbox();</span><br><span class="line">  BuildInvSbox();</span><br><span class="line">  BuildRcon();</span><br><span class="line">  KeyExpansion();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The constructor first set the values of Nb, Nk, and Nr by calling a helper method SetNbNkNr, which is shown in Figure 8. If efficiency is a concern, you could put this code directly in the constructor to avoid the overhead of a method call.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetNbNkNr</span><span class="params">(KeySize keySize)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.Nb = <span class="number">4</span>;     </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (keySize == KeySize.Bits128)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>.Nk = <span class="number">4</span>;   </span><br><span class="line">    <span class="keyword">this</span>.Nr = <span class="number">10</span>;  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (keySize == KeySize.Bits192)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>.Nk = <span class="number">6</span>;   </span><br><span class="line">    <span class="keyword">this</span>.Nr = <span class="number">12</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (keySize == KeySize.Bits256)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>.Nk = <span class="number">8</span>;   </span><br><span class="line">    <span class="keyword">this</span>.Nr = <span class="number">14</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  <span class="comment">// SetNbNkNr()</span></span><br></pre></td></tr></table></figure>
<p><em>Figure 8 SetNbNkNr Method  (Close Figure 8)</em></p>
<p>Next, you have to copy the bytes that are passed into the constructor into the class field variable. The key is declared with the other class fields and it gets its value by doing this:</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.<span class="variable">key</span> = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="keyword">this</span>.Nk * <span class="number">4</span>];  </span><br><span class="line">keyBytes.CopyTo(<span class="keyword">this</span>.<span class="variable">key</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>I decided to call the initialization of the substitution tables Sbox[] and iSbox[] using the private helper methods BuildSbox and BuildInvSbox in the constructor. Now Sbox[] and iSbox[] are required by the key expansion routine and the Cipher and InvCipher methods, respectively, so I could have put initialization of Sbox[] and invocation of the KeyExpansion method in both the Cipher and the InvCipher methods, but putting them in the constructor results in a cleaner code structure. sBox[] gets populated in Figure 9. The code that populates iSbox[] is similar. The code is structured for readability. As you’ll see later, there is a surprising alternative to this way of supplying values for the Sbox and iSbox tables.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BuildSbox</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.Sbox = <span class="keyword">new</span> byte[<span class="number">16</span>,<span class="number">16</span>] &#123;  <span class="comment">// populate the Sbox matrix</span></span><br><span class="line"><span class="comment">/*        0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f */</span></span><br><span class="line"><span class="comment">/*0*/</span>  &#123;<span class="number">0x63</span>, <span class="number">0x7c</span>, <span class="number">0x77</span>, <span class="number">0x7b</span>, <span class="number">0xf2</span>, <span class="number">0x6b</span>, <span class="number">0x6f</span>, <span class="number">0xc5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2b</span>, <span class="number">0xfe</span>, <span class="number">0xd7</span>, <span class="number">0xab</span>, <span class="number">0x76</span>&#125;,</span><br><span class="line"><span class="comment">/*1*/</span>  &#123;<span class="number">0xca</span>, <span class="number">0x82</span>, <span class="number">0xc9</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xf0</span>, <span class="number">0xad</span>, <span class="number">0xd4</span>, <span class="number">0xa2</span>, <span class="number">0xaf</span>, <span class="number">0x9c</span>, <span class="number">0xa4</span>, <span class="number">0x72</span>, <span class="number">0xc0</span>&#125;,</span><br><span class="line"><span class="comment">/*2*/</span>  &#123;<span class="number">0xb7</span>, <span class="number">0xfd</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3f</span>, <span class="number">0xf7</span>, <span class="number">0xcc</span>, <span class="number">0x34</span>, <span class="number">0xa5</span>, <span class="number">0xe5</span>, <span class="number">0xf1</span>, <span class="number">0x71</span>, <span class="number">0xd8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>&#125;,</span><br><span class="line"><span class="comment">/*3*/</span>  &#123;<span class="number">0x04</span>, <span class="number">0xc7</span>, <span class="number">0x23</span>, <span class="number">0xc3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9a</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xe2</span>, <span class="number">0xeb</span>, <span class="number">0x27</span>, <span class="number">0xb2</span>, <span class="number">0x75</span>&#125;,</span><br><span class="line"><span class="comment">/*4*/</span>  &#123;<span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2c</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>, <span class="number">0x6e</span>, <span class="number">0x5a</span>, <span class="number">0xa0</span>, <span class="number">0x52</span>, <span class="number">0x3b</span>, <span class="number">0xd6</span>, <span class="number">0xb3</span>, <span class="number">0x29</span>, <span class="number">0xe3</span>, <span class="number">0x2f</span>, <span class="number">0x84</span>&#125;,</span><br><span class="line"><span class="comment">/*5*/</span>  &#123;<span class="number">0x53</span>, <span class="number">0xd1</span>, <span class="number">0x00</span>, <span class="number">0xed</span>, <span class="number">0x20</span>, <span class="number">0xfc</span>, <span class="number">0xb1</span>, <span class="number">0x5b</span>, <span class="number">0x6a</span>, <span class="number">0xcb</span>, <span class="number">0xbe</span>, <span class="number">0x39</span>, <span class="number">0x4a</span>, <span class="number">0x4c</span>, <span class="number">0x58</span>, <span class="number">0xcf</span>&#125;,</span><br><span class="line"><span class="comment">/*6*/</span>  &#123;<span class="number">0xd0</span>, <span class="number">0xef</span>, <span class="number">0xaa</span>, <span class="number">0xfb</span>, <span class="number">0x43</span>, <span class="number">0x4d</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xf9</span>, <span class="number">0x02</span>, <span class="number">0x7f</span>, <span class="number">0x50</span>, <span class="number">0x3c</span>, <span class="number">0x9f</span>, <span class="number">0xa8</span>&#125;,</span><br><span class="line"><span class="comment">/*7*/</span>  &#123;<span class="number">0x51</span>, <span class="number">0xa3</span>, <span class="number">0x40</span>, <span class="number">0x8f</span>, <span class="number">0x92</span>, <span class="number">0x9d</span>, <span class="number">0x38</span>, <span class="number">0xf5</span>, <span class="number">0xbc</span>, <span class="number">0xb6</span>, <span class="number">0xda</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xff</span>, <span class="number">0xf3</span>, <span class="number">0xd2</span>&#125;,</span><br><span class="line"><span class="comment">/*8*/</span>  &#123;<span class="number">0xcd</span>, <span class="number">0x0c</span>, <span class="number">0x13</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xc4</span>, <span class="number">0xa7</span>, <span class="number">0x7e</span>, <span class="number">0x3d</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x19</span>, <span class="number">0x73</span>&#125;,</span><br><span class="line"><span class="comment">/*9*/</span>  &#123;<span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4f</span>, <span class="number">0xdc</span>, <span class="number">0x22</span>, <span class="number">0x2a</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xee</span>, <span class="number">0xb8</span>, <span class="number">0x14</span>, <span class="number">0xde</span>, <span class="number">0x5e</span>, <span class="number">0x0b</span>, <span class="number">0xdb</span>&#125;,</span><br><span class="line"><span class="comment">/*a*/</span>  &#123;<span class="number">0xe0</span>, <span class="number">0x32</span>, <span class="number">0x3a</span>, <span class="number">0x0a</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5c</span>, <span class="number">0xc2</span>, <span class="number">0xd3</span>, <span class="number">0xac</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xe4</span>, <span class="number">0x79</span>&#125;,</span><br><span class="line"><span class="comment">/*b*/</span>  &#123;<span class="number">0xe7</span>, <span class="number">0xc8</span>, <span class="number">0x37</span>, <span class="number">0x6d</span>, <span class="number">0x8d</span>, <span class="number">0xd5</span>, <span class="number">0x4e</span>, <span class="number">0xa9</span>, <span class="number">0x6c</span>, <span class="number">0x56</span>, <span class="number">0xf4</span>, <span class="number">0xea</span>, <span class="number">0x65</span>, <span class="number">0x7a</span>, <span class="number">0xae</span>, <span class="number">0x08</span>&#125;,</span><br><span class="line"><span class="comment">/*c*/</span>  &#123;<span class="number">0xba</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2e</span>, <span class="number">0x1c</span>, <span class="number">0xa6</span>, <span class="number">0xb4</span>, <span class="number">0xc6</span>, <span class="number">0xe8</span>, <span class="number">0xdd</span>, <span class="number">0x74</span>, <span class="number">0x1f</span>, <span class="number">0x4b</span>, <span class="number">0xbd</span>, <span class="number">0x8b</span>, <span class="number">0x8a</span>&#125;,</span><br><span class="line"><span class="comment">/*d*/</span>  &#123;<span class="number">0x70</span>, <span class="number">0x3e</span>, <span class="number">0xb5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xf6</span>, <span class="number">0x0e</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xb9</span>, <span class="number">0x86</span>, <span class="number">0xc1</span>, <span class="number">0x1d</span>, <span class="number">0x9e</span>&#125;,</span><br><span class="line"><span class="comment">/*e*/</span>  &#123;<span class="number">0xe1</span>, <span class="number">0xf8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xd9</span>, <span class="number">0x8e</span>, <span class="number">0x94</span>, <span class="number">0x9b</span>, <span class="number">0x1e</span>, <span class="number">0x87</span>, <span class="number">0xe9</span>, <span class="number">0xce</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xdf</span>&#125;,</span><br><span class="line"><span class="comment">/*f*/</span>  &#123;<span class="number">0x8c</span>, <span class="number">0xa1</span>, <span class="number">0x89</span>, <span class="number">0x0d</span>, <span class="number">0xbf</span>, <span class="number">0xe6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2d</span>, <span class="number">0x0f</span>, <span class="number">0xb0</span>, <span class="number">0x54</span>, <span class="number">0xbb</span>, <span class="number">0x16</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// BuildSbox()</span></span><br></pre></td></tr></table></figure>
<p><em>Figure 9 Sbox Initialization (Close Figure 9) </em></p>
<p>Declaring the key schedule table w[], the round constants table Rcon[] and the state matrix State[] in the constructor, and assigning values to Rcon[] and w[] with private helper methods seems to me to be the best way to organize them, but that is mostly a matter of style. The code that populates the round constant table Rcon is shown in Figure 7.</p>
<p>Recall that the left byte of each row of Rcon[] is a power of 2 in GF(28) so this table could be built computationally using something like the following: </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newVal = prevVal * <span class="number">0x02</span>;</span><br></pre></td></tr></table></figure>
<p>The AES constructor finishes by building the key schedule table w[] which is done in the KeyExpansion method (see Figure 10). The code is fairly straightforward. The specification document uses a hypothetical 4-byte word data type. Since C# has no such type, it is simulated with an array of 4 bytes. After the key schedule w[] is allocated space using the operator new, the first Nk (4, 6, or 8) rows of w[] get values from the seed key[] array that was passed into the constructor: </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.w[row,<span class="number">0</span>] = <span class="keyword">this</span>.key[<span class="number">4</span>*row];</span><br><span class="line"><span class="keyword">this</span>.w[row,<span class="number">1</span>] = <span class="keyword">this</span>.key[<span class="number">4</span>*row+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">this</span>.w[row,<span class="number">2</span>] = <span class="keyword">this</span>.key[<span class="number">4</span>*row+<span class="number">2</span>];</span><br><span class="line"><span class="keyword">this</span>.w[row,<span class="number">3</span>] = <span class="keyword">this</span>.key[<span class="number">4</span>*row+<span class="number">3</span>];</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">KeyExpansion</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.w = <span class="keyword">new</span> byte[Nb * (Nr+<span class="number">1</span>), <span class="number">4</span>];  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; Nk; ++row)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>.w[row,<span class="number">0</span>] = <span class="keyword">this</span>.key[<span class="number">4</span>*row];</span><br><span class="line">    <span class="keyword">this</span>.w[row,<span class="number">1</span>] = <span class="keyword">this</span>.key[<span class="number">4</span>*row+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">this</span>.w[row,<span class="number">2</span>] = <span class="keyword">this</span>.key[<span class="number">4</span>*row+<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">this</span>.w[row,<span class="number">3</span>] = <span class="keyword">this</span>.key[<span class="number">4</span>*row+<span class="number">3</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  byte[] temp = <span class="keyword">new</span> byte[<span class="number">4</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> row = Nk; row &lt; Nb * (Nr+<span class="number">1</span>); ++row)</span><br><span class="line">  &#123;</span><br><span class="line">    temp[<span class="number">0</span>] = <span class="keyword">this</span>.w[row-<span class="number">1</span>,<span class="number">0</span>]; temp[<span class="number">1</span>] = <span class="keyword">this</span>.w[row-<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line">    temp[<span class="number">2</span>] = <span class="keyword">this</span>.w[row-<span class="number">1</span>,<span class="number">2</span>]; temp[<span class="number">3</span>] = <span class="keyword">this</span>.w[row-<span class="number">1</span>,<span class="number">3</span>];</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (row % Nk == <span class="number">0</span>)  </span><br><span class="line">    &#123;</span><br><span class="line">      temp = SubWord(RotWord(temp));</span><br><span class="line">  </span><br><span class="line">      temp[<span class="number">0</span>] = (byte)( (<span class="keyword">int</span>)temp[<span class="number">0</span>] ^ (<span class="keyword">int</span>)<span class="keyword">this</span>.Rcon[row/Nk,<span class="number">0</span>] );</span><br><span class="line">      temp[<span class="number">1</span>] = (byte)( (<span class="keyword">int</span>)temp[<span class="number">1</span>] ^ (<span class="keyword">int</span>)<span class="keyword">this</span>.Rcon[row/Nk,<span class="number">1</span>] );</span><br><span class="line">      temp[<span class="number">2</span>] = (byte)( (<span class="keyword">int</span>)temp[<span class="number">2</span>] ^ (<span class="keyword">int</span>)<span class="keyword">this</span>.Rcon[row/Nk,<span class="number">2</span>] );</span><br><span class="line">      temp[<span class="number">3</span>] = (byte)( (<span class="keyword">int</span>)temp[<span class="number">3</span>] ^ (<span class="keyword">int</span>)<span class="keyword">this</span>.Rcon[row/Nk,<span class="number">3</span>] );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( Nk &gt; <span class="number">6</span> &amp;&amp; (row % Nk == <span class="number">4</span>) )  </span><br><span class="line">    &#123;</span><br><span class="line">      temp = SubWord(temp);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// w[row] = w[row-Nk] xor temp</span></span><br><span class="line">    <span class="keyword">this</span>.w[row,<span class="number">0</span>] = (byte) ( (<span class="keyword">int</span>)<span class="keyword">this</span>.w[row-Nk,<span class="number">0</span>] ^ (<span class="keyword">int</span>)temp[<span class="number">0</span>] );</span><br><span class="line">    <span class="keyword">this</span>.w[row,<span class="number">1</span>] = (byte) ( (<span class="keyword">int</span>)<span class="keyword">this</span>.w[row-Nk,<span class="number">1</span>] ^ (<span class="keyword">int</span>)temp[<span class="number">1</span>] );</span><br><span class="line">    <span class="keyword">this</span>.w[row,<span class="number">2</span>] = (byte) ( (<span class="keyword">int</span>)<span class="keyword">this</span>.w[row-Nk,<span class="number">2</span>] ^ (<span class="keyword">int</span>)temp[<span class="number">2</span>] );</span><br><span class="line">    <span class="keyword">this</span>.w[row,<span class="number">3</span>] = (byte) ( (<span class="keyword">int</span>)<span class="keyword">this</span>.w[row-Nk,<span class="number">3</span>] ^ (<span class="keyword">int</span>)temp[<span class="number">3</span>] );</span><br><span class="line">  </span><br><span class="line">  &#125;  <span class="comment">// for loop</span></span><br><span class="line">&#125;  <span class="comment">// KeyExpansion()</span></span><br></pre></td></tr></table></figure>
<p><em>Figure 10 KeyExpansion Method (Close Figure 10)</em></p>
<p>The operation of XORing 2 bytes together happens a lot in this code. It requires some casting from byte to int and back to byte because the XOR operator ^ is not defined on the C# byte type. For example </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">temp[<span class="number">0</span>] = (byte)( (<span class="keyword">int</span>)temp[<span class="number">0</span>] ^ (<span class="keyword">int</span>)<span class="keyword">this</span>.Rcon[row/Nk,<span class="number">0</span>] );</span><br><span class="line">is used instead of: </span><br><span class="line">temp[<span class="number">0</span>] = temp[<span class="number">0</span>] ^ <span class="keyword">this</span>.Rcon[row/Nk,<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<p>The KeyExpansion method conditionally calls the private methods SubWord and RotWord to maintain naming consistency with the specification. Again, because there is no word type in C#, I implemented one using an array of 4 bytes. The code for SubWord and RotWord is fairly simple and you should be able to understand it easily by examining it in the AesLib source code that accompanies this article.</p>
<p>The slightly tricky part is looking up the substitution values in SubWord. Recall that to find the substitute value, you separate the input byte into its leftmost 4 bits and its rightmost 4 bits. For a given byte, right-shifting 4 bits with the &gt;&gt; operator will yield the x index, and logical ANDing with 0000 1111 will yield the y value. In slightly longer, but more readable form than the actual code, I could have done something like the following </p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = word[<span class="number">0</span>] &gt;&gt; <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> y = word[<span class="number">0</span>] &amp; <span class="number">0x0f</span>;</span><br><span class="line">byte substitute = this.<span class="type">Sbox</span>[x,y];</span><br><span class="line"><span class="literal">result</span>[<span class="number">0</span>] = substitute;</span><br><span class="line">instead <span class="keyword">of</span> the code I used: </span><br><span class="line"><span class="literal">result</span>[<span class="number">0</span>] = this.<span class="type">Sbox</span>[ word[<span class="number">0</span>] &gt;&gt; <span class="number">4</span>, word[<span class="number">0</span>] &amp; <span class="number">0x0f</span> ];</span><br></pre></td></tr></table></figure>
<p>To summarize, the AES constructor accepts a key size of 128, 192, or 256 bits and a byte array seed key value. The constructor assigns values for the input block size, the seed key size, and the number of rounds for the encryption algorithm and copies the seed key to a data member named key. The constructor also builds four tables: two substitution tables used by the encryption and decryption methods, a table of round constants, and a key schedule of round keys.</p>
<h3 id="The_AES_Cipher_Method_in_C">The AES Cipher Method in C</h3><p>The code for the Cipher method is shown in Figure 11. It is really very simple because it mostly farms out the work to the private methods AddRoundKey, SubBytes, ShiftRows, and MixColumns.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Cipher</span><span class="params">(byte[] input, byte[] output)</span>  </span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="comment">// state = input</span></span><br><span class="line">  <span class="keyword">this</span>.State = <span class="keyword">new</span> byte[<span class="number">4</span>,Nb];  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">4</span> * Nb); ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>.State[i % <span class="number">4</span>, i / <span class="number">4</span>] = input[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  AddRoundKey(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> round = <span class="number">1</span>; round &lt;= (Nr - <span class="number">1</span>); ++round)  </span><br><span class="line">  &#123;</span><br><span class="line">    SubBytes(); </span><br><span class="line">    ShiftRows();  </span><br><span class="line">    MixColumns(); </span><br><span class="line">    AddRoundKey(round);</span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  SubBytes();</span><br><span class="line">  ShiftRows();</span><br><span class="line">  AddRoundKey(Nr);</span><br><span class="line">          </span><br><span class="line">  <span class="comment">// output = state</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">4</span> * Nb); ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    output[i] = <span class="keyword">this</span>.State[i % <span class="number">4</span>, i / <span class="number">4</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// Cipher()</span></span><br></pre></td></tr></table></figure>
<p><em>Figure 11 The Cipher Method (Close Figure 11) </em></p>
<p>The Cipher method starts by copying the plaintext input array to the state matrix State[]. After an initial call to AddRoundKey, the Cipher method iterates one time fewer than the total number of rounds. On the last round, the call to MixColumns is omitted as described in the specification.</p>
<p>The code for the AddRoundKey and SubBytes private methods is shown in Figure 12. The AddRoundKey method needs to know what round it is at so that it can reference the correct four rows of the key schedule array w[]. Notice that State[r,c] is XORed with w[c,r] and not w[r,c]. The SubBytes method extracts indexes from the input byte using the same right-shift-4-bits and mask-with-0x0f technique used in the KeyExpansion method.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddRoundKey</span><span class="params">(<span class="keyword">int</span> round)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; <span class="number">4</span>; ++r)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">4</span>; ++c)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">this</span>.State[r,c] = (byte) ( (<span class="keyword">int</span>)<span class="keyword">this</span>.State[r,c] ^</span><br><span class="line">                                 (<span class="keyword">int</span>)w[(round*<span class="number">4</span>)+c,r] );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  <span class="comment">// AddRoundKey()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SubBytes</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; <span class="number">4</span>; ++r)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">4</span>; ++c)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">this</span>.State[r,c] = <span class="keyword">this</span>.Sbox[ (<span class="keyword">this</span>.State[r,c] &gt;&gt; <span class="number">4</span>),</span><br><span class="line">                                   (<span class="keyword">this</span>.State[r,c] &amp; <span class="number">0x0f</span>) ];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  <span class="comment">// SubBytes</span></span><br></pre></td></tr></table></figure>
<p><em>Figure 12 AddRoundKey and SubBytes Methods (Close Figure 12)</em></p>
<p>The code for the ShiftRows method is shown in Figure 13. Recall that ShiftRows (which might have been better named RotateRows) rotates row[0] 0 positions to the left, row[1] 1 position to the left, and so forth.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShiftRows</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  byte[,] temp = <span class="keyword">new</span> byte[<span class="number">4</span>,<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; <span class="number">4</span>; ++r)  </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">4</span>; ++c)</span><br><span class="line">    &#123;</span><br><span class="line">      temp[r,c] = <span class="keyword">this</span>.State[r,c];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">1</span>; r &lt; <span class="number">4</span>; ++r)  <span class="comment">// </span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">4</span>; ++c)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">this</span>.State[r,c] = temp[ r, (c + r) % Nb ];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  <span class="comment">// ShiftRows()</span></span><br></pre></td></tr></table></figure>
<p><em>Figure 13 ShiftRows Method (Close Figure 13)</em></p>
<p>After copying State[] into a temp[] matrix, the shifts are then performed with: </p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="variable">State</span>[r, (c + r) <span class="comment">% Nb ] = temp[r,c];</span></span><br><span class="line"><span class="variable">This</span> takes advantage <span class="keyword">of</span> the <span class="comment">% operator to wrap around a row.</span></span><br></pre></td></tr></table></figure>
<p>The MixColumns method (see Figure 14) takes every byte and substitutes it with a linear combination of all the other values in the byte’s column using GF(28) addition and multiplication. The constant coefficients used for multiplication are based on field theory and are either 0x01, 0x02, or 0x03. The substitution for a given column c is:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">State[<span class="number">0</span>,c] = <span class="number">0x02</span> * State[<span class="number">0</span>,c] + <span class="number">0x03</span> * State[<span class="number">1</span>,c] + <span class="number">0x01</span> * State[<span class="number">2</span>,c] +</span><br><span class="line">    <span class="number">0x01</span> * State[<span class="number">3</span>,c]</span><br><span class="line">State[<span class="number">1</span>,c] = <span class="number">0x01</span> * State[<span class="number">0</span>,c] + <span class="number">0x02</span> * State[<span class="number">1</span>,c] + <span class="number">0x03</span> * State[<span class="number">2</span>,c] +</span><br><span class="line">    <span class="number">0x01</span> * State[<span class="number">3</span>,c]</span><br><span class="line">State[<span class="number">2</span>,c] = <span class="number">0x01</span> * State[<span class="number">0</span>,c] + <span class="number">0x01</span> * State[<span class="number">1</span>,c] + <span class="number">0x02</span> * State[<span class="number">2</span>,c] +</span><br><span class="line">    <span class="number">0x03</span> * State[<span class="number">3</span>,c]</span><br><span class="line">State[<span class="number">3</span>,c] = <span class="number">0x03</span> * State[<span class="number">0</span>,c] + <span class="number">0x01</span> * State[<span class="number">1</span>,c] + <span class="number">0x01</span> * State[<span class="number">2</span>,c] +</span><br><span class="line">    <span class="number">0x02</span> * State[<span class="number">3</span>,c]</span><br></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MixColumns</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  byte[,] temp = <span class="keyword">new</span> byte[<span class="number">4</span>,<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; <span class="number">4</span>; ++r)  </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">4</span>; ++c)</span><br><span class="line">    &#123;</span><br><span class="line">      temp[r,c] = <span class="keyword">this</span>.State[r,c];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">      </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">4</span>; ++c)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>.State[<span class="number">0</span>,c] = (byte) ( (<span class="keyword">int</span>)gfmultby02(temp[<span class="number">0</span>,c]) ^</span><br><span class="line">                               (<span class="keyword">int</span>)gfmultby03(temp[<span class="number">1</span>,c]) ^</span><br><span class="line">                               (<span class="keyword">int</span>)gfmultby01(temp[<span class="number">2</span>,c]) ^</span><br><span class="line">                               (<span class="keyword">int</span>)gfmultby01(temp[<span class="number">3</span>,c]) );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.State[<span class="number">1</span>,c] = (byte) ( (<span class="keyword">int</span>)gfmultby01(temp[<span class="number">0</span>,c]) ^</span><br><span class="line">                               (<span class="keyword">int</span>)gfmultby02(temp[<span class="number">1</span>,c]) ^</span><br><span class="line">                               (<span class="keyword">int</span>)gfmultby03(temp[<span class="number">2</span>,c]) ^</span><br><span class="line">                               (<span class="keyword">int</span>)gfmultby01(temp[<span class="number">3</span>,c]) );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.State[<span class="number">2</span>,c] = (byte) ( (<span class="keyword">int</span>)gfmultby01(temp[<span class="number">0</span>,c]) ^</span><br><span class="line">                               (<span class="keyword">int</span>)gfmultby01(temp[<span class="number">1</span>,c]) ^</span><br><span class="line">                               (<span class="keyword">int</span>)gfmultby02(temp[<span class="number">2</span>,c]) ^</span><br><span class="line">                               (<span class="keyword">int</span>)gfmultby03(temp[<span class="number">3</span>,c]) );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.State[<span class="number">3</span>,c] = (byte) ( (<span class="keyword">int</span>)gfmultby03(temp[<span class="number">0</span>,c]) ^</span><br><span class="line">                               (<span class="keyword">int</span>)gfmultby01(temp[<span class="number">1</span>,c]) ^</span><br><span class="line">                               (<span class="keyword">int</span>)gfmultby01(temp[<span class="number">2</span>,c]) ^</span><br><span class="line">                               (<span class="keyword">int</span>)gfmultby02(temp[<span class="number">3</span>,c]) );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  <span class="comment">// MixColumns</span></span><br></pre></td></tr></table></figure>
<p><em>Figure 14 MixColumns Method (Close Figure 14)</em></p>
<p>These expressions are a bit long already so I decided to write private helper functions that return the product of GF(28) multiplication by 0x01, 0x02, and 0x03. The helper functions are very short. For example, the code that’s used to field-multiply a byte b by 0x03 is as follows:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return <span class="list">(<span class="keyword">byte</span>)</span> <span class="list">( <span class="list">(<span class="keyword">int</span>)</span>gfmultby02<span class="list">(<span class="keyword">b</span>)</span> ^ <span class="list">(<span class="keyword">int</span>)</span>b )</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>As I discussed earlier, multiplication by 0x02 is the essential operation for all GF(28) multiplication. I called my gfmultby02 method, bending my convention of using the same method names that have been used in the specification; the specification calls this routine xtime.</p>
<p>The Cipher method iteratively applies four operations on its input to produce encrypted output. AddRoundKey substitutes bytes using multiple round keys derived from the single original seed key. SubBytes substitutes bytes using values in a substitution table. ShiftRows permutes bytes by shifting rows of bytes, and MixColumns substitutes bytes using field addition and multiplication of values in a column.</p>
<h3 id="The_AES_InvCipher_Method_in_C">The AES InvCipher Method in C</h3><p>The basic premise behind the AES decipher algorithm is simple: to decrypt an encrypted block, just undo every operation in the reverse order. Although this is the basic concept, there are a few details to handle.</p>
<p>The AES specification names the decipher routine InvCipher rather than alternatives Decipher or Decrypt. This is a reflection of the mathematics behind AES, which are based in terms of inverse mathematical operations.</p>
<p>If you compare this code with the Cipher code, you will see that it is pretty much what you might expect, but with two exceptions. First, the order of the inverse method calls (like InvSubBytes) in the InvCipher method is not exactly the reverse of the corresponding calls (like SubBytes) in the Cipher method, and second, InvCipher calls the AddRoundKey method instead of an InvAddRoundKey method. Notice that the InvCipher algorithm uses the key schedule table but starts at the higher-numbered indexes and works its way down to row 0.</p>
<p>The code for the InvSubBytes, InvShiftRows, and InvMixColumns methods closely mirrors the code for the related SubBytes, ShiftRows, and MixColumns methods. The InvSubBytes method is just like the SubBytes method except that it uses the inverse substitution table iSbox[] instead of the Sbox[] table.</p>
<p>As you might guess, iSbox[] just undoes any mapping performed by Sbox[]. For example, if you have byte b that equals 0x20 and find its substitution value in Sbox[], you get 0xb7. If you look up the substitution value for 0xb7 in iSbox[], you get 0x20.</p>
<p>Similarly the InvShiftRows method undoes the ShiftRows method—row[0] is shifted 0 positions to the right, row[1] is shifted 1 position right, row[2] is shifted 2 positions right, and row[3] is shifted 3 positions right.</p>
<p>The InvMixColumns method undoes the work of MixColumns, but not in an obvious way. Recall that MixColumns replaces each byte in the state matrix with a linear combination of bytes in the original byte’s column and that the coefficients were 0x01, 0x02, and 0x03. Once again, field theory comes into play. It turns out that the inverse operation is similar but uses multiplication by 0x09, 0x0b, 0x0d, and 0x0e like this: </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">State[<span class="number">0</span>,c] = <span class="number">0x0e</span> * State[<span class="number">0</span>,c] + <span class="number">0x0b</span> * State[<span class="number">1</span>,c] + <span class="number">0x0d</span> * State[<span class="number">2</span>,c] +</span><br><span class="line">    <span class="number">0x09</span> * State[<span class="number">3</span>,c]</span><br><span class="line">State[<span class="number">1</span>,c] = <span class="number">0x09</span> * State[<span class="number">0</span>,c] + <span class="number">0x0e</span> * State[<span class="number">1</span>,c] + <span class="number">0x0b</span> * State[<span class="number">2</span>,c] +</span><br><span class="line">    <span class="number">0x0d</span> * State[<span class="number">3</span>,c]</span><br><span class="line">State[<span class="number">2</span>,c] = <span class="number">0x0d</span> * State[<span class="number">0</span>,c] + <span class="number">0x09</span> * State[<span class="number">1</span>,c] + <span class="number">0x0e</span> * State[<span class="number">2</span>,c] +</span><br><span class="line">    <span class="number">0x0b</span> * State[<span class="number">3</span>,c]</span><br><span class="line">State[<span class="number">3</span>,c] = <span class="number">0x0b</span> * State[<span class="number">0</span>,c] + <span class="number">0x0d</span> * State[<span class="number">1</span>,c] + <span class="number">0x09</span> * State[<span class="number">2</span>,c] +</span><br><span class="line">    <span class="number">0x0e</span> * State[<span class="number">3</span>,c]</span><br></pre></td></tr></table></figure>
<p>As with the MixColumns method, I decided to write dedicated helper functions rather than expand the already long expressions inline or write a general multiplication helper function. Let me show you how I wrote the function that multiplies any byte, b, by the constant 0x0e (14 in base 10). The number 14, like any number, can be expressed as the sum of powers of 2. In this case, 14 equals 2 + 4 + 8. And since 4 equals 2 squared and 8 equals 2 cubed, you can express 14 as 2 + 22 + 23. Remember that addition is just XOR (^) in GF(28) and since I already have the gfmultby02 function, I can use it to get my result: </p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">return <span class="list">(<span class="keyword">byte</span>)</span><span class="list">( <span class="list">(<span class="keyword">int</span>)</span>gfmultby02<span class="list">(<span class="keyword">gfmultby02</span><span class="list">(<span class="keyword">gfmultby02</span><span class="list">(<span class="keyword">b</span>)</span>)</span>)</span> ^  /* <span class="number">23</span> + <span class="variable">*/</span><br><span class="line">                    (int)gfmultby02(gfmultby02(b)) ^         /*</span> <span class="number">22</span> + <span class="variable">*/</span><br><span class="line">                    (int)gfmultby02(b) );                    /*</span> <span class="number">2</span>    <span class="variable">*/</span></span></span><br></pre></td></tr></table></figure>
<p>All of the operations used by the AES encryption algorithm are invertible, so the decryption algorithm essentially reverses all the operations performed by encryption.</p>
<h3 id="Using_the_AES_Class">Using the AES Class</h3><p>One of the features of AES as implemented in C# is its simplicity. Consider the code in Figure 15 that I used to generate the output shown in Figure 1. After declaring hardcoded values for the 16-byte plaintext input and the 24-byte (192-bit) seed key, an AES object is initialized, the encrypting Cipher method encrypts the plaintext to cipher text, and then the cipher text is decrypted back using InvCipher. Very clean and simple.</p>
<figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> Main(<span class="built_in">string</span>[] args)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">byte</span>[] plainText = <span class="keyword">new</span> <span class="keyword">byte</span>[] &#123;<span class="number">0</span>x00, <span class="number">0</span>x11, <span class="number">0</span>x22, <span class="number">0</span>x33, <span class="number">0</span>x44, <span class="number">0</span>x55, </span><br><span class="line">      <span class="number">0</span>x66, <span class="number">0</span>x77,<span class="number">0</span>x88, <span class="number">0</span>x99, <span class="number">0</span>xaa, <span class="number">0</span>xbb, <span class="number">0</span>xcc, <span class="number">0</span>xdd, <span class="number">0</span>xee, <span class="number">0</span>xff&#125;;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">byte</span>[] cipherText = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>];</span><br><span class="line">  <span class="keyword">byte</span>[] decipheredText = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>];</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">byte</span>[] keyBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[] &#123;<span class="number">0</span>x00, <span class="number">0</span>x01, <span class="number">0</span>x02, <span class="number">0</span>x03, <span class="number">0</span>x04, <span class="number">0</span>x05, <span class="number">0</span>x06, </span><br><span class="line">      <span class="number">0</span>x07,<span class="number">0</span>x08, <span class="number">0</span>x09, <span class="number">0</span>x0a, <span class="number">0</span>x0b, <span class="number">0</span>x0c, <span class="number">0</span>x0d, <span class="number">0</span>x0e, <span class="number">0</span>x0f,<span class="number">0</span>x10, <span class="number">0</span>x11, </span><br><span class="line">      <span class="number">0</span>x12, <span class="number">0</span>x13, <span class="number">0</span>x14, <span class="number">0</span>x15, <span class="number">0</span>x16, <span class="number">0</span>x17&#125;;</span><br><span class="line">  </span><br><span class="line">  Aes a = <span class="keyword">new</span> Aes(Aes.KeySize.Bits192, keyBytes);</span><br><span class="line"></span><br><span class="line">  Console.WriteLine(<span class="string">"\nAdvanced Encryption System Demo in .NET"</span>);</span><br><span class="line">  Console.WriteLine(<span class="string">"\nThe plaintext is: "</span>);</span><br><span class="line">  DisplayAsBytes(plainText);</span><br><span class="line"></span><br><span class="line">  Console.WriteLine(<span class="string">"\nUsing a "</span> + Aes.KeySize.Bits192.ToString() + </span><br><span class="line">      <span class="string">"-key of: "</span>);</span><br><span class="line">  DisplayAsBytes(keyBytes);</span><br><span class="line">   </span><br><span class="line">  a.Cipher(plainText, cipherText);</span><br><span class="line"></span><br><span class="line">  Console.WriteLine(<span class="string">"\nThe resulting ciphertext is: "</span>);</span><br><span class="line">  DisplayAsBytes(cipherText);</span><br><span class="line"></span><br><span class="line">  a.InvCipher(cipherText, decipheredText);</span><br><span class="line"></span><br><span class="line">  Console.WriteLine(<span class="string">"\nAfter deciphering the ciphertext, the result </span><br><span class="line">      is: "</span>);</span><br><span class="line">  DisplayAsBytes(decipheredText);</span><br><span class="line"></span><br><span class="line">  Console.WriteLine(<span class="string">"\nDone"</span>);</span><br><span class="line">  Console.ReadLine();</span><br><span class="line">&#125;  <span class="comment">// Main()</span></span><br></pre></td></tr></table></figure>
<p><em>Figure 15 Using AES (Close Figure 15)</em></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DisplayAsBytes</span><span class="params">(byte[] bytes)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.Length; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    Console.Write(bytes[i].ToString(<span class="string">"x2"</span>) + <span class="string">" "</span> );</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; i % <span class="number">16</span> == <span class="number">0</span>) Console.Write(<span class="string">"\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Console.WriteLine(<span class="string">""</span>);</span><br><span class="line">&#125;  <span class="comment">// DisplayAsBytes()</span></span><br></pre></td></tr></table></figure>
<p>Because an AES object works on byte arrays, you can easily adapt it to work on other .NET data types. I constructed a little Windows®-based demo app that accepts a single 8-character (16-byte) string and then encrypts and decrypts it. A sample run is shown in Figure 16.</p>
<p>Figure 16 Encryption Demo</p>
<p>Because both the encryption and decryption routines need to know what key size the user has specified, I declared it as a class-scope variable, like this: </p>
<p>private Aes.KeySize keysize;<br>Notice that the seed key is not specified by the user. The demo uses a “null key” which consists of all zero bytes by supplying a dummy new byte[16] to the constructor. The size of the dummy argument is irrelevant because the seed key will also be initialized to all zeros. Null key encryption and decryption is an easy and effective way to deter casual external examination of your data. The Encoding.Unicode.GetBytes and Encoding.Unicode.GetString methods in System.Text make it very easy to convert a .NET string to a byte array, and vice versa.</p>
<p>Implementation Alternatives<br>Now let’s look at some important variations of the AES implementation presented in this article, possible extensions of the code presented here, and cryptanalysis attacks against AES.</p>
<p>As much as any code that I’ve ever worked on, the AES algorithm has significant alternative approaches to implementation. Why is this important? AES is intended to be applicable to a wide range of systems, from smart cards with tiny memory capacities to large multiprocessor mainframe systems. In many scenarios, performance is critical and sometimes memory or processing resources are limited. Virtually every routine in AES can be modified to optimize performance at the expense of memory, or vice versa. For example, assigning the 256 values to the substitution table Sbox[] seems straightforward enough. However, these values are based on GF(28) theory and it turns out that these values can be generated programmatically. The same is true for the inverse substitution table and the round constants table.</p>
<p>Another interesting possibility for alternate implementation is the GF(28) multiplication used by the Cipher and InvCipher methods. My implementation codes a basic function that multiplies by 0x02 and then six additional functions which call gfmultby02. Another possibility would be to write a general multiplication function and use it instead of implementing seven separate functions like I did. At another extreme you could use a complete table of the product of all 256 possible byte values multiplied by 0x01, 0x02, 0x03, 0x09, 0x0b, 0x0d, and 0x0e. Yet another way to approach GF(28) multiplication is to implement it as a lookup into two 256-byte arrays, usually called alog[] and log[] because they are based on certain logarithm-like properties of GF(28).</p>
<p>Although the AES class presented here is fully capable of encrypting any form of .NET data, you might want to consider extending it in a number of ways. First, because the emphasis of this article is on presenting a clear explanation of AES, all error checking was stripped away. In my experience, adding a reasonable amount of error checking to a class similar to this AES class would triple the size of the source code. Because AES uses so many arrays, there is a lot of index bounds checking that should be done. For example, the constructor presented does not even check the size of the seed key parameter.</p>
<p>You might also consider extending this AES class by adding more features. The most obvious place to start would be to add methods that encrypt and decrypt fundamental .NET data types such as System.String and System.Int32. A more ambitious extension would be to implement an encrypted stream class.</p>
<p>How secure is AES? This is a hard question to answer, but the general consensus is that it is the most secure encryption algorithm available. AES has been subjected to more scrutiny than any other encryption algorithm to date. On both a theoretical and practical basis, AES is considered “secure” in the sense that the only effective way to crack it is through a brute-force generation of all possible keys. With a key size of 256 bits, no known brute-force attack can break AES in a reasonable amount of time (it would take years even on the fastest systems available).</p>
<p>Note that the most likely successful attack on an AES cipher results from a weak implementation that allows what is called a timing attack. The attacker uses different keys and precisely measures the time the encryption routine requires. If the encryption routine is carelessly coded so that execution time depends on the key value, it is possible to deduce information about the key. In AES, this is most likely to occur in the MixColumns routine because of field multiplication. Two safeguards against this attack are to insert dummy instructions so that all multiplications require the same number of instructions, or to implement field multiplication as a lookup table, as I’ve described.</p>
<p>There are many possible implementations of AES, especially using lookup tables rather than computation. The basic AES class presented in this article can be used to encrypt and decrypt any form of .NET data or can be extended into a class with added functionality.</p>
<h2 id="Conclusion">Conclusion</h2><p>The new AES will certainly become the de facto standard for encrypting all forms of electronic information, replacing DES. AES-encrypted data is unbreakable in the sense that no known cryptanalysis attack can decrypt the AES cipher text without using a brute-force search through all possible 256-bit keys.</p>
<p>The major obstacle I found when implementing an AES class in the Microsoft® .NET Framework was that the official specification document was written from a mathematician’s point of view rather than from a software developer’s point of view. In particular, the specification assumes that the reader is fairly familiar with the GF(28) field and it leaves out a few key facts regarding GF(28) multiplication that are necessary to correctly implement AES. I’ve tried here to remove the mystery from AES, especially surrounding GF(28) field multiplication.</p>
<p>It is only a question of time before AES encryption becomes widely available from Microsoft and third-party vendors in the form of .NET Framework libraries. However, having this code in your skill set will remain valuable for a number of reasons. This implementation is particularly simple and will have low resource overhead. In addition, access to and an understanding of the source code will enable you to customize the AES class and use any implementation of it more effectively.</p>
<p>Security is no longer an afterthought in anyone’s software design and development process. AES is an important advance and using and understanding it will greatly increase the reliability and safety of your software systems.</p>
<p>For related articles see:<br>Security: Protect Private Data with the Cryptography Namespaces of the .NET Framework<br>Exploring Kerberos, the Protocol for Distributed Security in Windows 2000 </p>
<p>For background information see:<br>The Design of Rijndael: AES - The Advanced Encryption Standard by Joan Daemen and Vincent Rijmen. (Springer-Verlag, 2002)<br>Announcing the Advanced Encryption Standard (AES): Federal Information Processing Standards Pub 197</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Encrypt It<br>Keep Your Data Secure with the New Advanced Encryption Standard</p>
<h2 id="Introduction">Introduction</h2><p>The National Institute of Standards and Technology (NIST) established the new Advanced Encryption Standard (AES) specification on May 26, 2002. In this article I will provide a working implementation of AES written in C#, and a complete explanation of exactly what AES is and how the code works. I’ll show you how to encrypt data using AES and extend the code given here to develop a commercial-quality AES class. I’ll also explain how and why to incorporate AES encryption into your software systems, and how to test AES-based software.</p>
<p>Note that the code presented in this article and any other implementation based on this article is subject to applicable Federal cryptographic module export controls (see Commercial Encryption Export Controls for the exact regulations).</p>]]>
    
    </summary>
    
      <category term="aes" scheme="http://www.wxameng.com/tags/aes/"/>
    
      <category term="Secure" scheme="http://www.wxameng.com/categories/Secure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP协议详解]]></title>
    <link href="http://www.wxameng.com/http-protocol-detail/"/>
    <id>http://www.wxameng.com/http-protocol-detail/</id>
    <published>2015-12-26T15:39:56.000Z</published>
    <updated>2015-12-25T15:50:21.000Z</updated>
    <content type="html"><![CDATA[<h2 id="什么是HTTP协议">什么是HTTP协议</h2><p>协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的规定或规则，超文本传输协议(HTTP)是一种通信协议，它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器目前我们使用的是HTTP/1.1版本</p>
<h2 id="Web服务器，浏览器，代理服务器">Web服务器，浏览器，代理服务器</h2><p>当我们打开浏览器，在地址栏中输入URL，然后我们就看到了网页。 原理是怎样的呢？</p>
<p>实际上我们输入URL后，我们的浏览器给Web服务器发送了一个Request, Web服务器接到Request后进行处理，生成相应的Response，然后发送给浏览器， 浏览器解析Response中的HTML,这样我们就看到了网页，过程如下图所示<br><a id="more"></a><br><img src="../http-protocol-detail/1.png" alt=""></p>
<p>我们的Request 有可能是经过了代理服务器，最后才到达Web服务器的。过程如下图所示</p>
<p><img src="../http-protocol-detail/2.png" alt=""></p>
<p>代理服务器就是网络信息的中转站，有什么功能呢？</p>
<ol>
<li>提高访问速度， 大多数的代理服务器都有缓存功能。</li>
<li>突破限制， 也就是翻墙了</li>
<li>隐藏身份。</li>
</ol>
<h2 id="URL详解">URL详解</h2><p>URL(Uniform Resource Locator) 地址用于描述一个网络上的资源，基本格式如下</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schema://host[<span class="link_label">:port#</span>]/path/.../[<span class="link_label">;url-params</span>][<span class="link_reference">?query-string</span>][<span class="link_label">#anchor</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>scheme:指定低层使用的协议(例如：http, https, ftp)</li>
<li>host:HTTP服务器的IP地址或者域名</li>
<li>port:HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如 <a href="http://www.cnblogs.com:8080/" target="_blank" rel="external">http://www.cnblogs.com:8080/</a></li>
<li>path:访问资源的路径</li>
<li>url-params:附加参数</li>
<li>query-string:发送给http服务器的数据</li>
<li>anchor:锚</li>
</ul>
<p>URL 的一个例子<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//www.mywebsite.com/sj/test;id=8079?name=sviergn&amp;x=true#stuff</span></span><br><span class="line"><span class="string">Schema:</span> http</span><br><span class="line"><span class="string">host:</span> www.mywebsite.com</span><br><span class="line"><span class="string">path:</span> <span class="regexp">/sj/</span>test</span><br><span class="line">URL <span class="string">params:</span> id=<span class="number">8079</span></span><br><span class="line">Query <span class="string">String:</span> name=sviergn&amp;x=<span class="literal">true</span></span><br><span class="line"><span class="string">Anchor:</span> stuff</span><br></pre></td></tr></table></figure></p>
<h2 id="HTTP协议是无状态的">HTTP协议是无状态的</h2><p>http协议是无状态的，同一个客户端的这次请求和上次请求是没有对应关系，对http服务器来说，它并不知道这两个请求来自同一个客户端。 为了解决这个问题， Web程序引入了Cookie机制来维护状态.</p>
<h2 id="HTTP消息的结构">HTTP消息的结构</h2><p>先看Request 消息的结构，Request消息分为3部分，第一部分叫请求行（单行字符串）， 第二部分叫http header，（由很多字符串键值对组成），第三部分是body，header和body之间有个空行。</p>
<p>结构如下图<br><img src="../http-protocol-detail/3.png" alt=""></p>
<p>第一行中的Method表示请求方法，比如”POST”，”GET”，  Path-to-resoure表示请求的资源， Http/version-number 表示HTTP协议的版本号<strong>当使用的是”GET” 方法的时候， body是为空的</strong>，比如我们打开博客园首页的request 如下<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="request">GET <span class="string">http://www.cnblogs.com/</span> HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span>: <span class="string">www.cnblogs.com</span></span><br></pre></td></tr></table></figure></p>
<p>我们用Fiddler 捕捉一个博客园登录的Request 然后分析下它的结构， 在Inspectors tab下以Raw的方式可以看到完整的Request的消息，如下图<br><img src="../http-protocol-detail/4.png" alt=""></p>
<p>我们再看Response消息的结构，和Request消息的结构基本一样。 同样也分为三部分，第一部分叫request line，第二部分叫request header，第三部分是body. header和body之间也有个空行，结构如下图<br><img src="../http-protocol-detail/5.png" alt=""></p>
<p>HTTP/version-number表示HTTP协议的版本号，status-code 和message 请看下节[状态代码]的详细解释。</p>
<p>我们用Fiddler 捕捉一个博客园首页的Response然后分析下它的结构， 在Inspectors tab下以Raw的方式可以看到完整的Response的消息，如下图<br><img src="../http-protocol-detail/6.png" alt=""></p>
<h2 id="Get和Post方法的区别">Get和Post方法的区别</h2><p>Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET,POST,PUT,DELETE. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息.</p>
<p>我们看看GET和POST的区别</p>
<ol>
<li>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456.  POST方法是把提交的数据放在HTTP包的Body中.</li>
<li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.</li>
<li>GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。</li>
<li>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码。</li>
</ol>
<h2 id="状态码">状态码</h2><p>Response 消息中的第一行叫做状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。<br>状态码用来告诉HTTP客户端，HTTP服务器是否产生了预期的Response.<br>HTTP/1.1中定义了5类状态码， 状态码由三位数字组成，第一个数字定义了响应的类别</p>
<ul>
<li>1XX  提示信息 - 表示请求已被成功接收，继续处理</li>
<li>2XX  成功 - 表示请求已被成功接收，理解，接受</li>
<li>3XX  重定向 - 要完成请求必须进行更进一步的处理</li>
<li>4XX  客户端错误 -  请求有语法错误或请求无法实现</li>
<li>5XX  服务器端错误 -   服务器未能实现合法的请求</li>
</ul>
<p>看看一些常见的状态码<code>200</code> OK<br>最常见的就是成功响应状态码<code>200</code>了， 这表明该请求被成功地完成，所请求的资源发送回客户端，如下图，打开博客园首页<br><img src="../http-protocol-detail/7.png" alt=""></p>
<p>302 Found<br>重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。</p>
<p>例如在IE中输入<a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a>. HTTP服务器会返回304， IE取到Response中Location header的新URL, 又重新发送了一个Request.<br><img src="../http-protocol-detail/8.png" alt=""></p>
<p>304 Not Modified<br>代表上次的文档已经被缓存了， 还可以继续使用，<br>例如打开博客园首页， 发现很多 Response 的status code 都是304<br><img src="../http-protocol-detail/9.png" alt=""></p>
<p>提示：　如果你不想使用本地缓存可以用Ctrl+F5强制刷新页面<br>400 Bad Request  客户端请求与语法错误，不能被服务器所理解<br>403 Forbidden 服务器收到请求，但是拒绝提供服务<br>404 Not Found<br>请求资源不存在（输错了URL）<br>比如在IE中输入一个错误的URL， <a href="http://www.cnblogs.com/tesdf.aspx" target="_blank" rel="external">http://www.cnblogs.com/tesdf.aspx</a><br><img src="../http-protocol-detail/10.png" alt=""></p>
<p>500 Internal Server Error 服务器发生了不可预期的错误<br>503 Server Unavailable 服务器当前不能处理客户端的请求，一段时间后可能恢复正常</p>
<h2 id="HTTP_Request_header">HTTP Request header</h2><p>使用Fiddler 能很方便的查看Reques header, 点击Inspectors tab -&gt; Request tab -&gt; headers  如下图所示.<br><img src="../http-protocol-detail/12.png" alt=""></p>
<p>header 有很多，比较难以记忆，我们也按照Fiddler那样把header 进行分类，这样比较清晰也容易记忆。</p>
<h3 id="Cache_头域">Cache 头域</h3><p>If-Modified-Since<br>作用： 把浏览器端缓存页面的最后修改时间发送到服务器去，服务器会把这个时间与服务器上实际文件的最后修改时间进行对比。如果时间一致，那么返回304，客户端就直接使用本地缓存文件。如果时间不一致，就会返回200和新的文件内容。客户端接到之后，会丢弃旧文件，把新文件缓存起来，并显示在浏览器中。<br>例如：If-Modified-Since: Thu, 09 Feb 2012 09:07:57 GMT<br>实例如下图<br><img src="../http-protocol-detail/13.png" alt=""></p>
<p>If-None-Match<br>作用: If-None-Match和ETag一起工作，工作原理是在HTTP Response中添加ETag信息。 当用户再次请求该资源时，将在HTTP Request 中加入If-None-Match信息(ETag的值)。如果服务器验证资源的ETag没有改变（该资源没有更新），将返回一个304状态告诉客户端使用本地缓存文件。否则将返回200状态和新的资源和Etag.  使用这样的机制将提高网站的性能<br>例如: If-None-Match: “03f2b33c0bfcc1:0”<br>实例如下图<br><img src="../http-protocol-detail/14.png" alt=""></p>
<p>Pragma<br>作用： 防止页面被缓存， 在HTTP/1.1版本中，它和Cache-Control:no-cache作用一模一样<br>Pargma只有一个用法， 例如： Pragma: no-cache<br>注意: 在HTTP/1.0版本中，只实现了Pragema:no-cache, 没有实现Cache-Control<br>Cache-Control<br>作用: 这个是非常重要的规则。 这个用来指定Response-Request遵循的缓存机制。各个指令含义如下</p>
<ul>
<li>Cache-Control:Public   可以被任何缓存所缓存（）</li>
<li>Cache-Control:Private     内容只缓存到私有缓存中</li>
<li>Cache-Control:no-cache  所有内容都不会被缓存</li>
</ul>
<p>还有其他的一些用法， 我没搞懂其中的意思， 请大家参考其他的资料</p>
<h3 id="Client_头域">Client 头域</h3><ul>
<li><p>Accept<br>作用： 浏览器端可以接受的媒体类型,<br>例如：  Accept: text/html  代表浏览器可以接受服务器回发的类型为 text/html  也就是我们常说的html文档,<br>如果服务器无法返回text/html类型的数据，服务器应该返回一个406错误(non acceptable)<br>通配符 <em> 代表任意类型<br>例如  Accept: </em>/*  代表浏览器可以处理所有类型，(一般浏览器发给服务器都是发这个)</p>
</li>
<li><p>Accept-Encoding：<br>作用： 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate），（注意：这不是只字符编码）;<br>例如： Accept-Encoding: gzip, deflate</p>
</li>
<li><p>Accept-Language<br>作用： 浏览器申明自己接收的语言。<br>语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk等等；<br>例如： Accept-Language: en-us</p>
</li>
<li><p>User-Agent<br>作用：告诉HTTP服务器， 客户端使用的操作系统和浏览器的名称和版本.<br>我们上网登陆论坛的时候，往往会看到一些欢迎信息，其中列出了你的操作系统的名称和版本，你所使用的浏览器的名称和版本，这往往让很多人感到很神奇，实际上，服务器应用程序就是从User-Agent这个请求报头域中获取到这些信息User-Agent请求报头域允许客户端将它的操作系统、浏览器和其它属性告诉服务器。<br>例如： User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; CIBA; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C; InfoPath.2; .NET4.0E)</p>
</li>
<li><p>Accept-Charset<br>作用：浏览器申明自己接收的字符集，这就是本文前面介绍的各种字符集和字符编码，如gb2312，utf-8（通常我们说Charset包括了相应的字符编码方案）；</p>
</li>
</ul>
<h2 id="Cookie/Login_头域">Cookie/Login 头域</h2><ul>
<li>Cookie:<br>作用： 最重要的header, 将cookie的值发送给HTTP 服务器</li>
</ul>
<h3 id="Entity头域">Entity头域</h3><ul>
<li><p>Content-Length<br>作用：发送给HTTP服务器数据的长度。<br>例如： Content-Length: 38</p>
</li>
<li><p>Content-Type<br>作用：<br>例如：Content-Type: application/x-www-form-urlencoded</p>
</li>
</ul>
<h3 id="Miscellaneous_头域">Miscellaneous 头域</h3><ul>
<li>Referer:<br>作用： 提供了Request的上下文信息的服务器，告诉服务器我是从哪个链接过来的，比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站。<br>例如: Referer:<a href="http://translate.google.cn/?hl=zh-cn&amp;tab=wT" target="_blank" rel="external">http://translate.google.cn/?hl=zh-cn&amp;tab=wT</a></li>
</ul>
<h3 id="Transport_头域">Transport 头域</h3><ul>
<li><p>Connection<br>例如：　Connection: keep-alive   当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接<br>例如：  Connection: close  代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。</p>
</li>
<li><p>Host（发送请求时，该报头域是必需的）<br>作用: 请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的<br>例如: 我们在浏览器中输入：<a href="http://www.guet.edu.cn/index.html" target="_blank" rel="external">http://www.guet.edu.cn/index.html</a><br>浏览器发送的请求消息中，就会包含Host请求报头域，如下：<br>Host：<a href="http://www.guet.edu.cn" target="_blank" rel="external">http://www.guet.edu.cn</a><br>此处使用缺省端口号80，若指定了端口号，则变成：Host：指定端口号</p>
</li>
</ul>
<h3 id="HTTP_Response_header">HTTP Response header</h3><ul>
<li>同样使用Fiddler 查看Response header, 点击Inspectors tab -&gt;Response tab-&gt; headers 我们也按照Fiddler那样把header 进行分类，这样比较清晰也容易记忆。如下图所示<br><img src="../http-protocol-detail/15.png" alt=""></li>
</ul>
<h3 id="Cache头域">Cache头域</h3><ul>
<li>Date<br>作用:  生成消息的具体时间和日期<br>例如：　Date: Sat, 11 Feb 2012 11:35:14 GMT </li>
<li>Expires<br>作用: 浏览器会在指定过期时间内使用本地缓存<br>例如: Expires: Tue, 08 Feb 2022 11:35:14 GMT</li>
<li>Vary<br>作用：<br>例如: Vary: Accept-Encoding</li>
</ul>
<h3 id="Cookie/Login_头域-1">Cookie/Login 头域</h3><ul>
<li>P3P<br>作用: 用于跨域设置Cookie, 这样可以解决iframe跨域访问cookie的问题<br>例如: P3P: CP=CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR</li>
<li>Set-Cookie<br>作用： 非常重要的header, 用于把cookie 发送到客户端浏览器， 每一个写入cookie都会生成一个Set-Cookie.<br>例如: Set-Cookie: sc=4c31523a; path=/; domain=.acookie.taobao.com<br><img src="../http-protocol-detail/16.png" alt=""></li>
</ul>
<h3 id="Entity头域-1">Entity头域</h3><ul>
<li>ETag<br>作用:  和If-None-Match 配合使用。 （实例请看上节中If-None-Match的实例）<br>例如: ETag: “03f2b33c0bfcc1:0”</li>
<li>Last-Modified:<br>作用： 用于指示资源的最后修改日期和时间。（实例请看上节的If-Modified-Since的实例）<br>例如: Last-Modified: Wed, 21 Dec 2011 09:09:10 GMT</li>
<li>Content-Type<br>作用：WEB服务器告诉浏览器自己响应的对象的类型和字符集,<br>例如:<br>Content-Type: text/html; charset=utf-8<br>Content-Type:text/html;charset=GB2312<br>Content-Type: image/jpeg</li>
<li>Content-Length<br>指明实体正文的长度，以字节方式存储的十进制数字来表示。在数据下行的过程中，Content-Length的方式要预先在服务器中缓存所有数据，然后所有数据再一股脑儿地发给客户端。<br>例如: Content-Length: 19847</li>
<li>Content-Encoding<br>WEB服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。<br>例如：Content-Encoding：gzip</li>
<li>Content-Language<br>作用： WEB服务器告诉浏览器自己响应的对象的语言者<br>例如： Content-Language:da</li>
</ul>
<h3 id="Miscellaneous_头域-1">Miscellaneous 头域</h3><ul>
<li>Server:<br>作用：指明HTTP服务器的软件信息<br>例如:Server: Microsoft-IIS/7.5</li>
<li>X-AspNet-Version:<br>作用：如果网站是用ASP.NET开发的，这个header用来表示ASP.NET的版本<br>例如: X-AspNet-Version: 4.0.30319</li>
<li>X-Powered-By:<br>作用：表示网站是用什么技术开发的<br>例如： X-Powered-By: ASP.NET</li>
</ul>
<h3 id="Transport头域">Transport头域</h3><ul>
<li>Connection<br>例如：　Connection: keep-alive   当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接<br>例如：  Connection: close  代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。</li>
</ul>
<h3 id="Location头域">Location头域</h3><ul>
<li>Location<br>作用： 用于重定向一个新的位置， 包含新的URL地址<br>实例请看304状态实例</li>
</ul>
<h2 id="HTTP协议是无状态的和Connection:_keep-alive的区别">HTTP协议是无状态的和Connection: keep-alive的区别</h2><p>无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。从另一方面讲，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。</p>
<p>HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（无连接）。<br>从HTTP/1.1起，默认都开启了Keep-Alive，保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。</p>
<p>Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="什么是HTTP协议">什么是HTTP协议</h2><p>协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的规定或规则，超文本传输协议(HTTP)是一种通信协议，它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器目前我们使用的是HTTP/1.1版本</p>
<h2 id="Web服务器，浏览器，代理服务器">Web服务器，浏览器，代理服务器</h2><p>当我们打开浏览器，在地址栏中输入URL，然后我们就看到了网页。 原理是怎样的呢？</p>
<p>实际上我们输入URL后，我们的浏览器给Web服务器发送了一个Request, Web服务器接到Request后进行处理，生成相应的Response，然后发送给浏览器， 浏览器解析Response中的HTML,这样我们就看到了网页，过程如下图所示<br>]]>
    
    </summary>
    
      <category term="http" scheme="http://www.wxameng.com/tags/http/"/>
    
      <category term="protocol" scheme="http://www.wxameng.com/tags/protocol/"/>
    
      <category term="server" scheme="http://www.wxameng.com/tags/server/"/>
    
      <category term="Server" scheme="http://www.wxameng.com/categories/Server/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux常用软件的安装]]></title>
    <link href="http://www.wxameng.com/linux-commonly-used-softwares/"/>
    <id>http://www.wxameng.com/linux-commonly-used-softwares/</id>
    <published>2015-11-28T01:52:46.000Z</published>
    <updated>2015-11-25T04:44:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="首先是输入法">首先是输入法</h2><p>sudo apt-get install fcitx-table-wbpy<br>在语言支持中将输入法设置为fcitx<br><a id="more"></a></p>
<h2 id="然后是浏览器">然后是浏览器</h2><p>安装chrome</p>
<pre><code>#<span class="number">32</span>位
wget http<span class="variable">s:</span>//<span class="keyword">dl</span>.google.<span class="keyword">com</span>/linux/direct/google-chrome-stable_current_i386.<span class="keyword">deb</span>
#<span class="number">64</span>位
wget http<span class="variable">s:</span>//<span class="keyword">dl</span>.google.<span class="keyword">com</span>/linux/direct/google-chrome-stable_current_amd64.<span class="keyword">deb</span>


命令以<span class="number">64</span>位为例

sudo dpkg -<span class="keyword">i</span> google-chrome-stable_current_amd64.<span class="keyword">deb</span>
</code></pre><h2 id="词典">词典</h2><p>首选有道词典，可惜官方的是要求ubuntu-14.04.10，我的版本不够，所以选择openyoudao，可以参考官网的安装方法<code>http://openyoudao.org</code></p>
<p>Ubuntu/Debian: Add mirrorlist:</p>
<pre><code>deb <span class="string">http:</span><span class="comment">//ppa.launchpad.net/justzx2011/openyoudao-v0.4/ubuntu trusty main </span>
deb-src <span class="string">http:</span><span class="comment">//ppa.launchpad.net/justzx2011/openyoudao-v0.4/ubuntu trusty main</span>
</code></pre><p>shell:</p>
<pre><code>sudo apt-<span class="built_in">key</span> adv --keyserver keyserver.ubuntu.com --recv-<span class="built_in">keys</span>  <span class="number">14</span>C9B91C3F9493B9
sudo apt-<span class="built_in">get</span> <span class="keyword">update</span> 
sudo apt-<span class="built_in">get</span> install openyoudao
</code></pre><h3 id="未完待续">未完待续</h3>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="首先是输入法">首先是输入法</h2><p>sudo apt-get install fcitx-table-wbpy<br>在语言支持中将输入法设置为fcitx<br>]]>
    
    </summary>
    
      <category term="linux" scheme="http://www.wxameng.com/tags/linux/"/>
    
      <category term="Linux" scheme="http://www.wxameng.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Makefile模板]]></title>
    <link href="http://www.wxameng.com/makefile-temporate/"/>
    <id>http://www.wxameng.com/makefile-temporate/</id>
    <published>2015-11-25T14:40:11.000Z</published>
    <updated>2015-11-25T00:26:31.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Makefile模板">Makefile模板</h2><a id="more"></a>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##########################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#	Makefile 模版 </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">##########################################################</span></span><br><span class="line"></span><br><span class="line"><span class="constant">EXTENSION</span>=cpp</span><br><span class="line"><span class="constant">TARGET</span>=all</span><br><span class="line"></span><br><span class="line"><span class="comment">###################项目路径和程序名称#################################</span></span><br><span class="line"><span class="comment">#不要修改下面的路径</span></span><br><span class="line"></span><br><span class="line"><span class="constant">DIR</span>= <span class="variable">$(</span>shell pwd)</span><br><span class="line"><span class="constant">BIN_DIR</span>=<span class="variable">$(</span><span class="constant">DIR</span>)/bin</span><br><span class="line"><span class="constant">LIB_DIR</span>=<span class="variable">$(</span><span class="constant">DIR</span>)/<span class="class"><span class="keyword">lib</span></span></span><br><span class="line"><span class="constant">SRC_DIR</span>=<span class="variable">$(</span><span class="constant">DIR</span>)/src</span><br><span class="line"><span class="constant">INCLUDE_DIR</span>=<span class="variable">$(</span><span class="constant">DIR</span>)/<span class="keyword">include</span></span><br><span class="line"><span class="constant">OBJ_DIR</span>=<span class="variable">$(</span><span class="constant">DIR</span>)/obj</span><br><span class="line"></span><br><span class="line"><span class="comment">###################OBJ文件及路径############################################</span></span><br><span class="line"></span><br><span class="line"><span class="constant">OBJS</span> =<span class="variable">$(</span>patsubst <span class="variable">$(</span><span class="constant">SRC_DIR</span>)/%.<span class="variable">$(</span><span class="constant">EXTENSION</span>), <span class="variable">$(</span><span class="constant">OBJ_DIR</span>)/%.o,<span class="variable">$(</span>wildcard <span class="variable">$(</span><span class="constant">SRC_DIR</span>)/*.<span class="variable">$(</span><span class="constant">EXTENSION</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">###################include头文件路径##################################</span></span><br><span class="line"></span><br><span class="line"><span class="constant">INCLUDE</span>=-<span class="constant">I</span> <span class="variable">$(</span><span class="constant">INCLUDE_DIR</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">###################编译选项及编译器###################################</span></span><br><span class="line"></span><br><span class="line"><span class="constant">CXX</span>=g++</span><br><span class="line"><span class="constant">CFLAGS</span>=-<span class="constant">Wall</span> -<span class="constant">W</span> -g </span><br><span class="line"><span class="constant">LDFLAGS</span>=</span><br><span class="line"></span><br><span class="line"><span class="comment">###################编译目标###########################################</span></span><br><span class="line"></span><br><span class="line">.<span class="constant">PHONY</span>: all clean rebuild </span><br><span class="line"></span><br><span class="line"><span class="symbol">all:</span> bin/<span class="variable">$(</span><span class="constant">TARGET</span>)</span><br><span class="line"></span><br><span class="line">bin/<span class="variable">$(</span><span class="constant">TARGET</span>):<span class="variable">$(</span><span class="constant">OBJS</span>) </span><br><span class="line">	<span class="variable">$(</span><span class="constant">CXX</span>) <span class="variable">$^</span> -o  <span class="variable">$@</span>  </span><br><span class="line">	<span class="variable">@echo</span> <span class="string">"succeed"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$(</span><span class="constant">OBJ_DIR</span>)/%.<span class="symbol">o:</span><span class="variable">$(</span><span class="constant">SRC_DIR</span>)/%.cpp</span><br><span class="line">	<span class="variable">@if</span> [ ! -d  <span class="variable">$(</span><span class="constant">BIN_DIR</span>) ]; <span class="keyword">then</span> mkdir <span class="variable">$(</span><span class="constant">BIN_DIR</span>); fi</span><br><span class="line">	<span class="variable">@if</span> [ ! -d  <span class="variable">$(</span><span class="constant">OBJ_DIR</span>) ]; <span class="keyword">then</span> mkdir <span class="variable">$(</span><span class="constant">OBJ_DIR</span>); fi</span><br><span class="line">	<span class="variable">$(</span><span class="constant">CXX</span>) <span class="variable">$(</span><span class="constant">INCLUDE</span>)  -g  -o <span class="variable">$@</span>  -c <span class="variable">$&lt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#静态库生成	</span></span><br><span class="line"><span class="comment">#bin/libtest.a:$(OBJ_DIR)/test.o</span></span><br><span class="line"><span class="comment">#	ar r bin/libtest.a $(OBJ_DIR)/test.o  </span></span><br><span class="line">	</span><br><span class="line"><span class="symbol">clean:</span></span><br><span class="line">	rm -rf <span class="variable">$(</span><span class="constant">OBJS</span>)</span><br><span class="line">	rm -rf <span class="variable">$(</span><span class="constant">BIN_DIR</span>)/<span class="variable">$(</span><span class="constant">TARGET</span>)</span><br><span class="line"></span><br><span class="line"><span class="symbol">rebuild:</span> clean all</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Makefile模板">Makefile模板</h2>]]>
    
    </summary>
    
      <category term="makefile" scheme="http://www.wxameng.com/tags/makefile/"/>
    
      <category term="Linux" scheme="http://www.wxameng.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最精简的Git新手入门]]></title>
    <link href="http://www.wxameng.com/git-gettng-start/"/>
    <id>http://www.wxameng.com/git-gettng-start/</id>
    <published>2015-11-09T14:42:56.000Z</published>
    <updated>2015-11-11T04:16:13.000Z</updated>
    <content type="html"><![CDATA[<h2 id="开始">开始</h2><p>这篇教程虽不是全原创但确是本人整理得来的，一篇博客能写完，所以说足够精简，包括Git的主要内容和大部分命令<br><a id="more"></a></p>
<h2 id="Git的起源">Git的起源</h2><p>因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p>
<p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p>
<p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p>
<p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p>
<p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p>
<p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p>
<h2 id="Git的优势">Git的优势</h2><h3 id="集中式vs分布式">集中式vs分布式</h3><ul>
<li>集中式版本控制系统最大的毛病就是必须联网才能工作。</li>
<li>分布式版本控制系统不需要联网，每个人独立工作，然后需要汇总的时候再联网。</li>
</ul>
<h3 id="版本管理系统的三大功能">版本管理系统的三大功能</h3><ul>
<li>快速备份与恢复 （stage）</li>
<li>快速开发 （branch）</li>
<li>团队协作 （repository &amp; branch）</li>
</ul>
<h2 id="安装GIt">安装GIt</h2><h3 id="Ubuntu_（Debian）">Ubuntu （Debian）</h3><pre><code>$ sudo apt-<span class="keyword">get</span> install git
</code></pre><h3 id="Centos_（RedHat）">Centos （RedHat）</h3><pre><code>$ sudo yum install git
$ sudo rpm -ivh git-<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.rpm  <span class="comment">#直接从本地安装包安装</span>
</code></pre><h2 id="初始化Git">初始化Git</h2><h3 id="主要有两种方法">主要有两种方法</h3><ul>
<li>在本地新建一个git项目，然后将其推送到仓库（repository）</li>
<li>直接clone远程的git项目到本地，并继续开发</li>
</ul>
<h3 id="本地新建git项目">本地新建git项目</h3><pre><code><span class="variable">$ </span>cd newproject  <span class="comment">#每个git项目对应一个目录</span>
<span class="variable">$ </span>git init  <span class="comment">#init 后在目录中新建一个.git文件夹，来控制版本库</span>

<span class="comment"># 如果你有远程仓库（比如在github上）可以为这个项目添加远程仓库</span>
<span class="variable">$ </span>git remote add origin git<span class="variable">@github</span>.<span class="symbol">com:</span>michaelliao/learngit.git
</code></pre><h3 id="clone远程项目">clone远程项目</h3><pre><code>$ git <span class="keyword">clone</span> <span class="title">git</span>@github.com:michaelliao/gitskills.git   <span class="comment">#克隆的项目默认具备远程仓库</span>
</code></pre><h2 id="最基本的操作">最基本的操作</h2><pre><code><span class="variable">$ </span>git add readme.txt
<span class="variable">$ </span>git commit -m <span class="string">"append GPL"</span>
</code></pre><h3 id="工作区与暂存区（Working_Directory_And_Stage）">工作区与暂存区（Working Directory And Stage）</h3><ul>
<li>工作区就是你在电脑里能看到的目录</li>
<li>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；</li>
<li>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。<ul>
<li>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。</li>
</ul>
</li>
</ul>
<h3 id="管理修改">管理修改</h3><p>为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。</p>
<p>你会问，什么是修改？比如你新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改。</p>
<pre><code>$ git status
# On branch master
# Changes not staged for <span class="operator"><span class="keyword">commit</span>:
#   (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)
#   (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)
#
#    modified:   readme.txt
#
<span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</span>
</code></pre><p>git status命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，readme.txt被修改过了，但还没有准备提交的修改。</p>
<pre><code>$ git diff readme.txt 
diff --git a/readme.txt b/readme.txt
index 46d49bf..9247db6 100644
<span class="header">--- a/readme.txt</span>
<span class="header">+++ b/readme.txt</span>
<span class="chunk">@@ -1,2 +1,2 @@</span>
<span class="deletion">-Git is a version control system.</span>
<span class="addition">+Git is a distributed version control system.</span>
 Git is free software.
</code></pre><p>git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式，可以从上面的命令输出看到，我们在第一行添加了一个“distributed”单词。</p>
<p><strong>所以需要特别注意文档的编码格式</strong></p>
<p>首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p>
<p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。</p>
<p>因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p>
<p><strong>使用Windows的童鞋要特别注意</strong></p>
<p>千万不要使用Windows自带的记事本编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载Notepad++代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可：</p>
<h3 id="撤销修改">撤销修改</h3><pre><code>git checkout <span class="comment">-- file</span>
</code></pre><p>命令git checkout – readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：</p>
<p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>
<p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>
<p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>
<h3 id="删除文件">删除文件</h3><ul>
<li>直接在文件管理器中把没用的文件删了</li>
<li>用rm命令</li>
</ul>
<h2 id="杀手锏武器：分支（branch）">杀手锏武器：分支（branch）</h2><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p>
<p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p>
<p>所以我们在github上看到的大一点项目基本都有分支，常见的有master分支，还有一个开发版dev，还有一个分布式版parallel</p>
<h3 id="分支的作用">分支的作用</h3><p>当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上。Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！</p>
<p>不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：</p>
<p><img src="../git-gettng-start/b1.png" alt="b1"><br><img src="../git-gettng-start/b2.png" alt="b1"></p>
<p>假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：</p>
<p><img src="../git-gettng-start/b3.png" alt="b1"></p>
<p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p>
<p>合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：</p>
<p><img src="../git-gettng-start/b4.png" alt="b1"></p>
<h3 id="举例说明">举例说明</h3><pre><code>$ git checkout -<span class="tag">b</span> dev
Switched to <span class="tag">a</span> new branch <span class="string">'dev'</span>
</code></pre><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p>
<pre><code>$ git <span class="keyword">branch </span>dev
$ git checkout dev
<span class="keyword">Switched </span>to <span class="keyword">branch </span><span class="string">'dev'</span>
</code></pre><p>然后，用<code>git branch</code>命令查看当前分支：</p>
<pre><code>$ git <span class="keyword">branch
</span>* dev
  master
</code></pre><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个*号。</p>
<p>然后，我们下面的所有工作就都是在dev分支上进行的了。</p>
<pre><code>$ git add readme.txt 
$ git <span class="operator"><span class="keyword">commit</span> -<span class="keyword">m</span> <span class="string">"branch test"</span>
[dev fec145a] branch <span class="keyword">test</span>
 <span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">1</span> insertion(+)</span>
</code></pre><p>现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p>
<pre><code>$ git checkout <span class="keyword">master</span>
<span class="title">Switched</span> to branch '<span class="literal">master</span>'
</code></pre><p><img src="../git-gettng-start/b5.png" alt="b1"></p>
<p>现在，我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p>
<pre><code>$ git <span class="operator"><span class="keyword">merge</span> dev
Updating d17efd8..fec145a
<span class="keyword">Fast</span>-forward
 readme.txt |    <span class="number">1</span> +
 <span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">1</span> insertion(+)</span>
</code></pre><p>git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。</p>
<p>注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。</p>
<p>当然，也不是每次合并都能Fast-forward（当没有冲突时可以），我们后面会将其他方式的合并。</p>
<p>合并完成后，就可以放心地删除dev分支了：</p>
<h3 id="解决冲突">解决冲突</h3><p><img src="../git-gettng-start/m1.png" alt="m1"></p>
<pre><code>$ git merge feature1
<span class="type">Auto</span>-merging readme.txt
<span class="type">CONFLICT</span> (content): <span class="type">Merge</span> conflict <span class="keyword">in</span> readme.txt
<span class="type">Automatic</span> merge failed; fix conflicts <span class="keyword">and</span> then commit the <span class="literal">result</span>.
</code></pre><p>果然冲突了！Git告诉我们，readme.txt文件存在冲突，必须手动解决冲突后再提交。git status也可以告诉我们冲突的文件：</p>
<pre><code>$ git status
<span class="preprocessor"># On branch master</span>
<span class="preprocessor"># Your branch is ahead of 'origin/master' by 2 commits.</span>
<span class="preprocessor">#</span>
<span class="preprocessor"># Unmerged paths:</span>
<span class="preprocessor">#   (use "git add/rm &lt;file&gt;..." as appropriate to mark resolution)</span>
<span class="preprocessor">#</span>
<span class="preprocessor">#       both modified:      readme.txt</span>
<span class="preprocessor">#</span>
no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)
</code></pre><p>我们可以直接查看readme.txt的内容：</p>
<pre><code>Git <span class="keyword">is</span> <span class="keyword">a</span> distributed <span class="keyword">version</span> control <span class="built_in">system</span>.
Git <span class="keyword">is</span> free software distributed under the GPL.
Git <span class="built_in">has</span> <span class="keyword">a</span> mutable <span class="built_in">index</span> called stage.
Git tracks <span class="keyword">changes</span> of <span class="keyword">files</span>.
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
Creating <span class="keyword">a</span> <span class="keyword">new</span> branch <span class="keyword">is</span> quick &amp; simple.
=======
Creating <span class="keyword">a</span> <span class="keyword">new</span> branch <span class="keyword">is</span> quick AND simple.
&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1
</code></pre><p>修改文件并commit</p>
<pre><code>$ git add readme.txt 
$ git <span class="operator"><span class="keyword">commit</span> -<span class="keyword">m</span> <span class="string">"conflict fixed"</span>
[<span class="keyword">master</span> <span class="number">59</span>bc1cb] conflict <span class="keyword">fixed</span></span>
</code></pre><p>再次合并分支</p>
<p><img src="../git-gettng-start/m2.png" alt="m2"></p>
<p>最后，删除<code>feature1</code>分支：</p>
<pre><code>$ git <span class="keyword">branch </span>-d feature1
<span class="label">Deleted</span> <span class="keyword">branch </span>feature1 (was <span class="number">75</span>a857c).
</code></pre><h3 id="分支命令">分支命令</h3><p>Git鼓励大量使用分支：</p>
<p>查看分支：<code>git branch</code></p>
<p>创建分支：<code>git branch &lt;name&gt;</code></p>
<p>切换分支：<code>git checkout &lt;name&gt;</code></p>
<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p>
<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>
<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
<h2 id="多人协作与远程仓库">多人协作与远程仓库</h2><p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。</p>
<h3 id="跟踪">跟踪</h3><p>本地的一个分支会对应一个远程分支，跟踪就是方便我们push和pull，（master是自动跟踪的）</p>
<p>跟踪的命令<code>track</code></p>
<pre><code>git branch --track <span class="built_in">dev</span> origin/<span class="built_in">dev</span>
</code></pre><h3 id="查看">查看</h3><p>要查看远程库的信息，用git remote：</p>
<pre><code><span class="variable">$ </span>git remote
origin
</code></pre><p>或者，用git remote -v显示更详细的信息：</p>
<pre><code>$ git remote -v
origin  git@github<span class="class">.com</span>:michaelliao/learngit<span class="class">.git</span> (fetch)
origin  git@github<span class="class">.com</span>:michaelliao/learngit<span class="class">.git</span> (push)
</code></pre><h3 id="推送">推送</h3><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支（track过的不用），这样，Git就会把该分支推送到远程库对应的远程分支上：</p>
<pre><code>$ git <span class="keyword">push </span>origin master
</code></pre><p>如果要推送其他分支，比如dev，就改成：</p>
<pre><code>$ git <span class="keyword">push </span>origin dev
</code></pre><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p>
<h3 id="冲突">冲突</h3><p>然后如果远程的仓库被改动过了，则我们不能push到仓库，这个时候首先要pull抓回来，然后再本地合并分支，没有冲突以后再push到仓库</p>
<pre><code>git pull origin <span class="literal">master</span>
</code></pre><h2 id="注意事项">注意事项</h2><h3 id="ignore文件">ignore文件</h3><p>git项目可以在根目录下放一个.gitignore的文件，从名字上我们可以看出是一个忽略列表。通常我们需要配置这个文件，使git只包含我们项目中的源代码，比如一个c++项目，我们只需要包含.cpp .h 还有makefile文件，其他中间文件和最终的可执行文件都不用包含在我们的项目中。所以我们在建立git项目的时候一般需要有这么几个文件夹，src,include,bin,obj,lib，在配置makefile的时候最好这样规划。另外lib和include因为是共有的，最好统一配置。</p>
<h3 id="权限问题">权限问题</h3><p>在配置远程仓库的时候，因为用ssh协议传输，需要配置ssh权限<br>git-gui-&gt;help-&gt;show ssh key=&gt;将生成的密钥发给服务器，然后服务器添加到当前git用户的.ssh目录下的authorized_keys文件中即可</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="开始">开始</h2><p>这篇教程虽不是全原创但确是本人整理得来的，一篇博客能写完，所以说足够精简，包括Git的主要内容和大部分命令<br>]]>
    
    </summary>
    
      <category term="git" scheme="http://www.wxameng.com/tags/git/"/>
    
      <category term="guide" scheme="http://www.wxameng.com/tags/guide/"/>
    
      <category term="Git" scheme="http://www.wxameng.com/categories/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[lua快速入门[转]]]></title>
    <link href="http://www.wxameng.com/learn-lua-in-15min/"/>
    <id>http://www.wxameng.com/learn-lua-in-15min/</id>
    <published>2015-10-05T13:59:08.000Z</published>
    <updated>2015-11-09T12:55:27.000Z</updated>
    <content type="html"><![CDATA[<p>很精练简短的教程<br><a id="more"></a></p>
<pre class="theme:sublime-text font-size:15 line-height:18 lang:lua decode:true ">

-- Two dashes start a one-line comment.

--[[
     Adding two ['s and ]'s makes it a
     multi-line comment.
--]]

----------------------------------------------------
-- 1\. Variables and flow control.
----------------------------------------------------

num = 42  -- All numbers are doubles.
-- Don't freak out, 64-bit doubles have 52 bits for
-- storing exact int values; machine precision is
-- not a problem for ints that need < 52 bits.

s = 'walternate'  -- Immutable strings like Python.
t = "double-quotes are also fine"
u = [[ Double brackets
       start and end
       multi-line strings.]]
t = nil  -- Undefines t; Lua has garbage collection.

-- Blocks are denoted with keywords like do/end:
while num < 50 do
  num = num + 1  -- No ++ or += type operators.
end

-- If clauses:
if num > 40 then
  print('over 40')
elseif s ~= 'walternate' then  -- ~= is not equals.
  -- Equality check is == like Python; ok for strs.
  io.write('not over 40n')  -- Defaults to stdout.
else
  -- Variables are global by default.
  thisIsGlobal = 5  -- Camel case is common.

  -- How to make a variable local:
  local line = io.read()  -- Reads next stdin line.

  -- String concatenation uses the .. operator:
  print('Winter is coming, ' .. line)
end

-- Undefined variables return nil.
-- This is not an error:
foo = anUnknownVariable  -- Now foo = nil.

aBoolValue = false

-- Only nil and false are falsy; 0 and '' are true!
if not aBoolValue then print('twas false') end

-- 'or' and 'and' are short-circuited.
-- This is similar to the a?b:c operator in C/js:
ans = aBoolValue and 'yes' or 'no'  --> 'no'

karlSum = 0
for i = 1, 100 do  -- The range includes both ends.
  karlSum = karlSum + i
end

-- Use "100, 1, -1" as the range to count down:
fredSum = 0
for j = 100, 1, -1 do fredSum = fredSum + j end

-- In general, the range is begin, end[, step].

-- Another loop construct:
repeat
  print('the way of the future')
  num = num - 1
until num == 0

----------------------------------------------------
-- 2\. Functions.
----------------------------------------------------

function fib(n)
  if n < 2 then return 1 end
  return fib(n - 2) + fib(n - 1)
end

-- Closures and anonymous functions are ok:
function adder(x)
  -- The returned function is created when adder is
  -- called, and remembers the value of x:
  return function (y) return x + y end
end
a1 = adder(9)
a2 = adder(36)
print(a1(16))  --> 25
print(a2(64))  --> 100

-- Returns, func calls, and assignments all work
-- with lists that may be mismatched in length.
-- Unmatched receivers are nil;
-- unmatched senders are discarded.

x, y, z = 1, 2, 3, 4
-- Now x = 1, y = 2, z = 3, and 4 is thrown away.

function bar(a, b, c)
  print(a, b, c)
  return 4, 8, 15, 16, 23, 42
end

x, y = bar('zaphod')  --> prints "zaphod  nil nil"
-- Now x = 4, y = 8, values 15..42 are discarded.

-- Functions are first-class, may be local/global.
-- These are the same:
function f(x) return x * x end
f = function (x) return x * x end

-- And so are these:
local function g(x) return math.sin(x) end
local g; g  = function (x) return math.sin(x) end
-- the 'local g' decl makes g-self-references ok.

-- Trig funcs work in radians, by the way.

-- Calls with one string param don't need parens:
print 'hello'  -- Works fine.

----------------------------------------------------
-- 3\. Tables.
----------------------------------------------------

-- Tables = Lua's only compound data structure;
--          they are associative arrays.
-- Similar to php arrays or js objects, they are
-- hash-lookup dicts that can also be used as lists.

-- Using tables as dictionaries / maps:

-- Dict literals have string keys by default:
t = {key1 = 'value1', key2 = false}

-- String keys can use js-like dot notation:
print(t.key1)  -- Prints 'value1'.
t.newKey = {}  -- Adds a new key/value pair.
t.key2 = nil   -- Removes key2 from the table.

-- Literal notation for any (non-nil) value as key:
u = {['@!#'] = 'qbert', [{}] = 1729, [6.28] = 'tau'}
print(u[6.28])  -- prints "tau"

-- Key matching is basically by value for numbers
-- and strings, but by identity for tables.
a = u['@!#']  -- Now a = 'qbert'.
b = u[{}]     -- We might expect 1729, but it's nil:
-- b = nil since the lookup fails. It fails
-- because the key we used is not the same object
-- as the one used to store the original value. So
-- strings & numbers are more portable keys.

-- A one-table-param function call needs no parens:
function h(x) print(x.key1) end
h{key1 = 'Sonmi~451'}  -- Prints 'Sonmi~451'.

for key, val in pairs(u) do  -- Table iteration.
  print(key, val)
end

-- _G is a special table of all globals.
print(_G['_G'] == _G)  -- Prints 'true'.

-- Using tables as lists / arrays:

-- List literals implicitly set up int keys:
v = {'value1', 'value2', 1.21, 'gigawatts'}
for i = 1, #v do  -- #v is the size of v for lists.
  print(v[i])  -- Indices start at 1 !! SO CRAZY!
end
-- A 'list' is not a real type. v is just a table
-- with consecutive integer keys, treated as a list.

----------------------------------------------------
-- 3.1 Metatables and metamethods.
----------------------------------------------------

-- A table can have a metatable that gives the table
-- operator-overloadish behavior. Later we'll see
-- how metatables support js-prototypey behavior.

f1 = {a = 1, b = 2}  -- Represents the fraction a/b.
f2 = {a = 2, b = 3}

-- This would fail:
-- s = f1 + f2

metafraction = {}
function metafraction.__add(f1, f2)
  sum = {}
  sum.b = f1.b * f2.b
  sum.a = f1.a * f2.b + f2.a * f1.b
  return sum
end

setmetatable(f1, metafraction)
setmetatable(f2, metafraction)

s = f1 + f2  -- call __add(f1, f2) on f1's metatable

-- f1, f2 have no key for their metatable, unlike
-- prototypes in js, so you must retrieve it as in
-- getmetatable(f1). The metatable is a normal table
-- with keys that Lua knows about, like __add.

-- But the next line fails since s has no metatable:
-- t = s + s
-- Class-like patterns given below would fix this.

-- An __index on a metatable overloads dot lookups:
defaultFavs = {animal = 'gru', food = 'donuts'}
myFavs = {food = 'pizza'}
setmetatable(myFavs, {__index = defaultFavs})
eatenBy = myFavs.animal  -- works! thanks, metatable

-- Direct table lookups that fail will retry using
-- the metatable's __index value, and this recurses.

-- An __index value can also be a function(tbl, key)
-- for more customized lookups.

-- Values of __index,add, .. are called metamethods.
-- Full list. Here a is a table with the metamethod.

-- __add(a, b)                     for a + b
-- __sub(a, b)                     for a - b
-- __mul(a, b)                     for a * b
-- __div(a, b)                     for a / b
-- __mod(a, b)                     for a % b
-- __pow(a, b)                     for a ^ b
-- __unm(a)                        for -a
-- __concat(a, b)                  for a .. b
-- __len(a)                        for #a
-- __eq(a, b)                      for a == b
-- __lt(a, b)                      for a < b
-- __le(a, b)                      for a <= b="" --="" __index(a,="" b)="" <fn="" or="" a="" table="">  for a.b
-- __newindex(a, b, c)             for a.b = c
-- __call(a, ...)                  for a(...)

----------------------------------------------------
-- 3.2 Class-like tables and inheritance.
----------------------------------------------------

-- Classes aren't built in; there are different ways
-- to make them using tables and metatables.

-- Explanation for this example is below it.

Dog = {}                                   -- 1.

function Dog:new()                         -- 2.
  newObj = {sound = 'woof'}                -- 3.
  self.__index = self                      -- 4.
  return setmetatable(newObj, self)        -- 5.
end

function Dog:makeSound()                   -- 6.
  print('I say ' .. self.sound)
end

mrDog = Dog:new()                          -- 7.
mrDog:makeSound()  -- 'I say woof'         -- 8.

-- 1\. Dog acts like a class; it's really a table.
-- 2\. function tablename:fn(...) is the same as
--    function tablename.fn(self, ...)
--    The : just adds a first arg called self.
--    Read 7 & 8 below for how self gets its value.
-- 3\. newObj will be an instance of class Dog.
-- 4\. self = the class being instantiated. Often
--    self = Dog, but inheritance can change it.
--    newObj gets self's functions when we set both
--    newObj's metatable and self's __index to self.
-- 5\. Reminder: setmetatable returns its first arg.
-- 6\. The : works as in 2, but this time we expect
--    self to be an instance instead of a class.
-- 7\. Same as Dog.new(Dog), so self = Dog in new().
-- 8\. Same as mrDog.makeSound(mrDog); self = mrDog.

----------------------------------------------------

-- Inheritance example:

LoudDog = Dog:new()                           -- 1.

function LoudDog:makeSound()
  s = self.sound .. ' '                       -- 2.
  print(s .. s .. s)
end

seymour = LoudDog:new()                       -- 3.
seymour:makeSound()  -- 'woof woof woof'      -- 4.

-- 1\. LoudDog gets Dog's methods and variables.
-- 2\. self has a 'sound' key from new(), see 3.
-- 3\. Same as LoudDog.new(LoudDog), and converted to
--    Dog.new(LoudDog) as LoudDog has no 'new' key,
--    but does have __index = Dog on its metatable.
--    Result: seymour's metatable is LoudDog, and
--    LoudDog.__index = LoudDog. So seymour.key will
--    = seymour.key, LoudDog.key, Dog.key, whichever
--    table is the first with the given key.
-- 4\. The 'makeSound' key is found in LoudDog; this
--    is the same as LoudDog.makeSound(seymour).

-- If needed, a subclass's new() is like the base's:
function LoudDog:new()
  newObj = {}
  -- set up newObj
  self.__index = self
  return setmetatable(newObj, self)
end

----------------------------------------------------
-- 4\. Modules.
----------------------------------------------------

--[[ I'm commenting out this section so the rest of
--   this script remains runnable.

-- Suppose the file mod.lua looks like this:
local M = {}

local function sayMyName()
  print('Hrunkner')
end

function M.sayHello()
  print('Why hello there')
  sayMyName()
end

return M

-- Another file can use mod.lua's functionality:
local mod = require('mod')  -- Run the file mod.lua.

-- require is the standard way to include modules.
-- require acts like:     (if not cached; see below)
local mod = (function ()
  <contents of="" mod.lua="">
end)()
-- It's like mod.lua is a function body, so that
-- locals inside mod.lua are invisible outside it.

-- This works because mod here = M in mod.lua:
mod.sayHello()  -- Says hello to Hrunkner.

-- This is wrong; sayMyName only exists in mod.lua:
mod.sayMyName()  -- error

-- require's return values are cached so a file is
-- run at most once, even when require'd many times.

-- Suppose mod2.lua contains "print('Hi!')".
local a = require('mod2')  -- Prints Hi!
local b = require('mod2')  -- Doesn't print; a=b.

-- dofile is like require without caching:
dofile('mod2.lua')  --> Hi!
dofile('mod2.lua')  --> Hi! (runs it again)

-- loadfile loads a lua file but doesn't run it yet.
f = loadfile('mod2.lua')  -- Call f() to run it.

-- loadstring is loadfile for strings.
g = loadstring('print(343)')  -- Returns a function.
g()  -- Prints out 343; nothing printed before now.

--]]

----------------------------------------------------
-- 5\. References.
----------------------------------------------------

--[[

I was excited to learn Lua so I could make games
with the Löve 2D game engine. That's the why.

I started with BlackBulletIV's Lua for programmers.
Next I read the official Programming in Lua book.
That's the how.

It might be helpful to check out the Lua short
reference on lua-users.org.

The main topics not covered are standard libraries:
 * string library
 * table library
 * math library
 * io library
 * os library

By the way, this entire file is valid Lua; save it
as learn.lua and run it with "lua learn.lua" !

This was first written for tylerneylon.com. It's
also available as a github gist. Tutorials for other
languages, in the same style as this one, are here:

http://learnxinyminutes.com/

Have fun with Lua!

--]]

</contents></=></pre> ]]></content>
    <summary type="html">
    <![CDATA[<p>很精练简短的教程<br>]]>
    
    </summary>
    
      <category term="lua" scheme="http://www.wxameng.com/tags/lua/"/>
    
      <category term="Lua" scheme="http://www.wxameng.com/categories/Lua/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ubuntu14下使用shadowsocks客户端]]></title>
    <link href="http://www.wxameng.com/linux-shadowsocks-ubuntu14/"/>
    <id>http://www.wxameng.com/linux-shadowsocks-ubuntu14/</id>
    <published>2015-10-04T13:17:48.000Z</published>
    <updated>2015-11-09T13:17:55.000Z</updated>
    <content type="html"><![CDATA[<p>现在翻墙的方法大概有三种<br>第一种是搬家，当然成本非常高<br>第二种是VPN，但是VPN比较贵，速度慢，而且人流高峰根本连不上<br>第三种是专属网络shadowsocks，速度快，很稳定。</p><p></p>
<p>windows下和mac下很简单，直接下载软件即可，下面主要说一下linux下的使用<br><a id="more"></a></p>
<h2 id="配置shadowsocks">配置shadowsocks</h2><p>在linux下shadowsocks主要有5个版本， Python ，libev ，Go ， Nodejs，qt，其中前面4中是命令行操作的，只有qt是有gui界面的。<br>我只配置过python，go还有qt版，下面分别介绍一下这3个版本的使用。</p>
<h3 id="qt版">qt版</h3><p>这个可以通过源码安装但是比较麻烦，因为还需要配置许多第三方库。推荐直接使用编译好的，命令如下：</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Ubuntu 14.04及更高版本</span></span><br><span class="line"><span class="comment">#添加ppa源</span></span><br><span class="line">sudo<span class="instruction"> add-apt-repository </span>ppa:hzwhuang/ss-qt5</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure>
<p>启动shadowsocks-qt5</p>
<pre><code><span class="title">sudo</span> ss-qt5
</code></pre><p>然后可以直接在GUI界面中配置服务器</p>
<h3 id="python版">python版</h3><pre><code>sudo apt-get <span class="keyword">install</span> python-pip
pip <span class="keyword">install</span> shadowsocks
</code></pre><p>新建一个配置文件ss_conf.json内容如下</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    server:server_ip,</span><br><span class="line">    server_port:<span class="number">443</span>,</span><br><span class="line">    local_address: <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>,</span><br><span class="line">    local_port:<span class="number">1080</span>,</span><br><span class="line">    password:password,</span><br><span class="line">    timeout:<span class="number">300</span>,</span><br><span class="line">    <span class="keyword">method</span>:aes-<span class="number">256</span>-cfb,</span><br><span class="line">    fast_open: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动方法：</p>
<pre><code>sslocal -c <span class="regexp">/home/u</span>sername<span class="regexp">/Desktop/</span>ss_conf.json
</code></pre><p>这个好像比较老了，这里还有一个更新的版本的<br><a href="https://teddysun.com/342.html" target="_blank" rel="external">https://teddysun.com/342.html</a></p>
<h3 id="go版">go版</h3><p>参考<br><a href="https://teddysun.com/392.html" target="_blank" rel="external">https://teddysun.com/392.html</a></p>
<h2 id="转换HTTP代理">转换HTTP代理</h2><p>Shadowsocks默认是用Socks5协议的，对于Terminal的get,wget等走Http协议的地方是无能为力的，所以需要转换成Http代理，加强通用性，这里使用的转换方法是基于Polipo的。</p>
<p>输入命令安装Polipo：</p>
<pre><code>sudo apt-<span class="keyword">get</span> install polipo
</code></pre><p>修改配置文件：</p>
<pre><code>sudo gedit <span class="regexp">/etc/</span>polipo<span class="regexp">/config</span>
</code></pre><p>将下面的内容整个替换到文件中并保存：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#This file only needs to list configuration variables that deviate</span></span><br><span class="line"><span class="preprocessor">#from the default values.  See /usr/share/doc/polipo/examples/config.sample</span></span><br><span class="line"><span class="preprocessor">#and polipo -v for variables you can tweak and further information.</span></span><br><span class="line">logSyslog = <span class="literal">false</span></span><br><span class="line">logFile = /var/<span class="built_in">log</span>/polipo/polipo.<span class="built_in">log</span></span><br><span class="line">socksParentProxy = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1080</span></span><br><span class="line">socksProxyType = socks5</span><br><span class="line">chunkHighMark = <span class="number">50331648</span></span><br><span class="line">objectHighMark = <span class="number">16384</span></span><br><span class="line">serverMaxSlots = <span class="number">64</span></span><br><span class="line">serverSlots = <span class="number">16</span></span><br><span class="line">serverSlots1 = <span class="number">32</span></span><br><span class="line">proxyAddress = <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">proxyPort = <span class="number">8123</span></span><br></pre></td></tr></table></figure>
<p>重启Polipo：</p>
<pre><code><span class="regexp">/etc/i</span>nit.d<span class="regexp">/polipo restart</span>
</code></pre><p>验证代理是否正常工作：</p>
<pre><code>export http_proxy=http:<span class="comment">//127.0.0.1:8123/</span>
curl www<span class="class">.google</span><span class="class">.com</span>
</code></pre><p>如果正常，就会返回抓取到的Google网页内容。</p>
<p>另外，在浏览器中输入<code>http://127.0.0.1:8123/</code>便可以进入到Polipo的使用说明和配置界面。</p>
<h2 id="配置浏览器">配置浏览器</h2><p>在firefox中<code>preference-&gt;advanced-&gt;network-&gt;connection-&gt;settings</code>中选择手动设置代理，并将http代理设置为127.0.0.1 端口8123  （就是之前第二步配置的port）</p>
<p>PS.如果跳过第二步，直接在第三部中配置http代理设置为127.0.0.1 端口1080，有些文章中是这样配置的，但是本人亲测这样无法连接上网。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>现在翻墙的方法大概有三种<br>第一种是搬家，当然成本非常高<br>第二种是VPN，但是VPN比较贵，速度慢，而且人流高峰根本连不上<br>第三种是专属网络shadowsocks，速度快，很稳定。</p></p>
<p>windows下和mac下很简单，直接下载软件即可，下面主要说一下linux下的使用<br>]]>
    
    </summary>
    
      <category term="linux" scheme="http://www.wxameng.com/tags/linux/"/>
    
      <category term="shadowsocks" scheme="http://www.wxameng.com/tags/shadowsocks/"/>
    
      <category term="ubuntu" scheme="http://www.wxameng.com/tags/ubuntu/"/>
    
      <category term="Linux" scheme="http://www.wxameng.com/categories/Linux/"/>
    
      <category term="Ubuntu" scheme="http://www.wxameng.com/categories/Linux/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LAMP配置+ftp（以Ubuntu14为例）]]></title>
    <link href="http://www.wxameng.com/install-lamp-for-ubuntu14/"/>
    <id>http://www.wxameng.com/install-lamp-for-ubuntu14/</id>
    <published>2015-09-30T16:21:50.000Z</published>
    <updated>2015-11-18T11:10:10.000Z</updated>
    <content type="html"><![CDATA[<p>安装很简单，几个命令搞定</p>
<pre><code>sudo apt-get <span class="operator"><span class="keyword">update</span>
sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> apache2
sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> php5 
sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> mysql-<span class="keyword">server</span>
sudo chmod <span class="number">777</span> /<span class="keyword">var</span>/www</span>
</code></pre><p>一些常用的</p>
<pre><code>apt-get <span class="operator"><span class="keyword">install</span> php5-gd
sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> php5-mysql</span>
</code></pre><a id="more"></a>
<h2 id="1、设置密码">1、设置密码</h2><p>在新安装好Linux系统之后，想要用su root切换到root用户却不知道密码是什么，这个让人很惆怅刚安装好的Linux系统没有设置root用户密码的，下边介绍如何设置root用户的密码</p>
<p>第一步：sudo passwd<br>第二步：输入密码<br>第三步：确认密码</p>
<p>这样三个步骤过后root用户的密码就设置好了<br>切入root用户， su root 输入刚刚设置好的密码就可以了</p>
<h2 id="2、创建用户及密码修改">2、创建用户及密码修改</h2><p>若修改root自己的密码，直接输入 passwd 然后输入两次密码即可。<br>若修改其他用户，如oracle 的密码，可直接输入passwd oracle 输入两遍性新密码即可。</p>
<h2 id="3、使用vim">3、使用vim</h2><p>学会使用vim很有必要，尤其是当通过远程管理linux主机的时候，因为此时无法用gedit等GUI软件，只能使用这种基于命令行的文本编辑器</p>
<p>vi有三种模式：<br>(1)一般模式：进入vi的默认模式，能够进行复制、黏贴、删除等操作；<br>(2)编辑模式：从一般模式按下‘i’即可进入；<br>(3)命令行模式：从一般模式按下“:”、’?’、’/‘即可进入；</p>
<p>注意：如果安装了vim后，输入vi后也是使用vim编辑器，我们输入alias后看到“alias vi=’vim’”；</p>
<p>“命令行模式”的常用按键</p>
<pre><code><span class="pseudo">:w</span>  保存
<span class="pseudo">:q</span>  退出<span class="tag">vim</span>
<span class="pseudo">:wq</span>  保存并退出
<span class="pseudo">:wq</span>!  （在可以转换权限的情况下）强制保存并退出
<span class="pseudo">:q</span>!  直接退出不保存
<span class="pseudo">:w</span> <span class="tag">filename</span>  另存为<span class="tag">filename</span>
<span class="pseudo">:n</span>,<span class="tag">m</span> <span class="tag">w</span> <span class="tag">filename</span>  将第<span class="tag">n</span>行到第<span class="tag">m</span>行另存为<span class="tag">filename</span>
<span class="pseudo">:set</span> <span class="tag">nu</span>  显示行号
<span class="pseudo">:set</span> <span class="tag">nonu</span>  不显示行号
:! <span class="tag">command</span>  暂时离开<span class="tag">vim</span>，并执行<span class="tag">command</span>，执行完后再进入<span class="tag">vim</span>
<span class="pseudo">:r</span> <span class="tag">filename</span>  将<span class="tag">filename</span>文件的数据读入当前文件
<span class="pseudo">:set</span> <span class="keyword">all</span>  显示当前<span class="tag">vim</span>的环境配置
</code></pre><h2 id="4、创建ftp">4、创建ftp</h2><p>4.1 Ubuntu 下安装FTP软件当然选择大名鼎鼎的vsftpd（very secure FTP daemon）， Ubuntu装vsftpd很简单，一句命令就行：</p>
<pre><code>sudo <span class="keyword">rm</span> /etc/pam.<span class="keyword">d</span>/vsftpd（在ubuntu14中请先执行这一条，若没有执行可能会报错，后面第4点会提到）
sudo apt-get install vsftpd
</code></pre><p>命令执行过程中，安装程序会给本地创建一个名为“ftp”的用户组，命令执行完之后会自动启动FTP服务。<br>可以使用“netstat -tl”命令检查FTP端口有没有已经打开，或者直接在浏览器里输入“ftp://你的服务器IP”（新安装的vsftpd默认是可以匿名不需要密码直接访问），如果能直接连接到FTP服务器，则安装vsftpd算是大功告成。</p>
<p>4.2 开启、停止、重启vsftpd服务也很简单：</p>
<pre><code>service vsftpd <span class="literal">start</span> | <span class="literal">stop</span> | restart
</code></pre><p>4.3 新安装的vsftpd默认是可以匿名访问，如果只想给某一个用户专门访问某一目录下的权限，则需要修改vsftpd的配置了。<br>首先，创建一个专门用来访问的用户，例如叫“test”：</p>
<pre><code><span class="keyword">mkdir</span> -p /home/<span class="keyword">test</span>
sudo useradd -<span class="keyword">g</span> ftp -<span class="keyword">d</span> /home/<span class="keyword">test</span> -<span class="keyword">M</span> <span class="keyword">test</span>   (这里关键就是选取你要的目录为ftp的根目录/home/<span class="keyword">test</span>，注意根目录是没有写入权限的，这个后面会提到)
</code></pre><p>解释一下useradd：<br>ftp代表用户组是ftp，必须设定<br>-g initial_group　group名称或以数字来做为使用者登入起始群组(group)。群组名须为现有存在的名称。<br>-d 是在指定的目录下进行建立如；<br>-M是不建立使用者目录，即使/etc/login.defs系统档设定要建立使用者目录</p>
<p>PS: 删除用户用以下命令：</p>
<p>sudo userdel test </p>
<p>设置密码:</p>
<p>passwd test</p>
<p>修改vsftpd的配置文件“vi /etc/vsftpd.conf”：</p>
<p>#禁止匿名访问<br>anonymous_enable=NO</p>
<p>#接受本地用户<br>local_enable=YES</p>
<p>#可以上传</p>
<p>#chroot_local_user=YES<br>(解释：chroot_local_user=YES将所有用户限定在主目录内，chroot_list_enable=YES表示要启用chroot_list_file, 因为chroot_local_user=YES，即全体用户都被“限定在主目录内”,所以总是作为“例外列表”的chroot_list_file这时列出的是那些“不会被限制在主目录下”的用户。)<br>write_enable=YES<br>local_umask=022</p>
<p>#启用在chroot_list_file的用户只能访问根目录<br>chroot_list_enable=YES<br>chroot_list_file=/etc/vsftpd.chroot_list</p>
<p>在/etc/vsftpd.chroot_list添加受访问目录限制的用户：</p>
<p>echo test &gt;&gt; vi /etc/vsftpd.chroot_list</p>
<p>可以在本地测试ftp<br>命令：ftp 127.0.0.1<br>输入当前用户的密码后显示 &gt;ftp<br>输入 bye 或者 quit 可以退出ftp</p>
<p>“500 OOPS: vsftpd: refusing to run with writable root inside chroot()”</p>
<p>启用了chroot的话，根目录要设置为不可写，这是vsftp的保护机制。</p>
<p>chmod a-w /home/test</p>
<p>那么用户登陆FTP就可以访问到test下的东西，但是没法去上传文件。如果把test文件夹设置成777权限，那么FTP就登陆不上去。</p>
<p>所以解决办法是。在test文件夹下再创建一个文件夹“/home/test/wwwroot”，将wwwroot设置成777就可以了，那么以后上传东西就上传到wwwroot里。</p>
<p>OK，重启vsftpd之后就可以使用上面新创建的账号访问。</p>
<p>4.4 但是使用ftp 命令登陆的时候总是提示如下的错误</p>
<p>root@server:~# ftp localhost<br>Connected to localhost.<br>220 (vsFTPd 2.3.5)<br>Name (localhost:root): ubuntu<br>331 Please specify the password.<br>Password:<br>530 Login incorrect.<br>Login failed.</p>
<p>于是我在网上搜了下看看大家都是怎么解决的，最后终于找到了解决的办法</p>
<p>sudo apt-get remove vsftpd<br>sudo rm /etc/pam.d/vsftpd<br>sudo apt-get install vsftpd  </p>
<p>这是因为ubuntu启用了PAM,所在用到vsftp时需要用到 /etc/pam.d/vsftpd 这个文件（默认源码安装的不会有这个文件），因此除了匿名用户外本地用户无法登录。所以只要删除了就可以了。</p>
<p>4.5 修改ftp的目录</p>
<h2 id="5、配置Mysql">5、配置Mysql</h2><p>5.1 在安装mysql的时候会设置一个初始的用户名和密码比如用户名可以上root，但是注意这个root不是系统的root<br>首先用初始密码登陆<br>mysql -h localhost -u root -p123   （密码是123，密码前面必须有一个p，而且必须连在一起）(注意有些时候localhost无法连接，需要换成127.0.0.1)</p>
<p>5.2 我们可以修改密码：<br>方法一：</p>
<p>mysql&gt;set password =password(&#039;你的密码&#039;);<br>mysql&gt;flush privileges;</p>
<p>方法二.使用GRANT语句</p>
<p>mysql&gt;grant all on <em>.</em> to &#039;root&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;你的密码&#039;with grant option ;<br>mysql&gt;flush privileges;</p>
<p>方法三.进入mysql库修改user表</p>
<p>mysql&gt;use mysql;<br>mysql&gt;update user set password=password(&#039;你的密码&#039;) where user=&#039;root&#039;;<br>mysql&gt;flush privileges;</p>
<p>5.3 MySQL 连接远程数据库（192.168.0.201），端口“3306”，用户名为“root”，密码“123”</p>
<p>C:&gt;mysql -h 192.168.0.201 -P 3306 -u root -p123</p>
<p>赋予远程权限<br>在Ubuntu下需要首先：（为什么，不知道）<br>在目录/etc/mysql下找到my.cnf，用vim编辑，找到my.cnf里面的</p>
<p>bind-address           = 127.0.0.1<br>在mysql的命令行下面输入：</p>
<p>grant all privileges on databasename.<em> to root@120.00.00.00 identified by &#039;123456mima&#039;;   （databasename：是数据库名，也可以改为</em>，120.00.00.00，是你的ip，root是你的mysql用户名，）方法其实还用很多种，这种比较简单</p>
<p>比如更高权限的 grant all PRIVILEGES on <em>.</em> to admin@&#039;%&#039; identified by &#039;123456&#039;;  就是赋予了所有的数据库权限，用户名为admin，对于所有ip可以访问，密码123456.<br>flush privileges;</p>
<h2 id="6、附件一些其他模块的安装">6、附件一些其他模块的安装</h2><p>6.1 curl_init — 初始化一个cURL会话<br>解决办法：<br>1，安装php5-curl模块，默认路径会在/etc/php5/路径下</p>
<p>sudo apt-get install php5-curl</p>
<p>2，重启Apache服务器加载curl模块</p>
<p>sudo service apache restart   #或者是 sudo service apache2 restart</p>
<p>3，刷新。OK<br>7、附加一些常用命令</p>
<p>unzip file.zip  解压缩<br>cp -f -r /home/ftp/www/ /var/www/   直接覆盖的copy，不提示</p>
<h2 id="7、一些错误的解决方法">7、一些错误的解决方法</h2><h3 id="1_apache2">1 apache2</h3><p>Starting web server apache2<br>apache2: Could not reliably determine the server&#039;s fully qualified domain name,<br>… waiting apache2: Could not reliably determine the server&#039;s fully qualified domain name, using 127.0.1.1 for ServerName</p>
<p>vim /etc/apache2/apache2.conf</p>
<p>在最下面添加一行：ServerName localhost:80</p>
<h3 id="ftp_登陆不上">ftp 登陆不上</h3><p>linux FTP 链接不上，错误提示：服务器无法识别命令。请使用原始ftp“HELP”来识别服务器所支持的所有命令。</p>
<p>点击详细错误的时候是下面的提示<br>vsftpd: refusing to run with writable root inside chroot() 错误的解决办法<br>一下是解决办法：<br>为了避免一个安全漏洞，从 vsftpd 2.3.5 开始，chroot 目录必须不可写。使用命令：<br>&#039;&#039;&#039;<br> chmod a-w /home/user<br>&#039;&#039;&#039;<br>user 为FTP所连接的目录</p>
<h2 id="8、一些设置选项">8、一些设置选项</h2><h3 id="1、apache的网站路径配置">1、apache的网站路径配置</h3><p>sudo vim /etc/apache2/sites-enabled/000-default.conf</p>
<p>找到这一行</p>
<p> DocumentRoot /home/mysite</p>
<p>设置权限 不允许访问没有index.*文件的目录</p>
<directory var="" www="" html=""><br>        Options Indexes FollowSymLinks<br>        AllowOverride None<br>        Require all granted<br></directory>



<directory var="" www="" html=""><br>        Options FollowSymLinks<br>        AllowOverride None<br>        Require all granted<br></directory>


<h2 id="附录">附录</h2><h3 id="apache2开启htaccess">apache2开启htaccess</h3><ul>
<li>终端运行<br>sudo a2enmod<br>程序提示可供激活的模块名称，输入：<br>rewrite<br>成功会提示 rewrite already load</li>
<li><p>修改/etc/apache2/sites-enabled/000-default (该链接指向的是站点配置文件)<br>把（默认的www目录、或者需要应用.htaccess的目录）下的<strong>AllowOverride 属性改为All</strong>，保存。<br>例如：</p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword"><span class="common">DocumentRoot</span></span> <span class="string">"/var/www"</span>  </span><br><span class="line"><span class="tag">&lt;Directory /&gt;</span>  </span><br><span class="line">    <span class="keyword"><span class="common">Options</span></span> FollowSymLinks  </span><br><span class="line">    <span class="keyword">AllowOverride</span> <span class="literal">All</span>  </span><br><span class="line"><span class="tag">&lt;/Directory&gt;</span>  </span><br><span class="line"><span class="tag">&lt;Directory "/var/www"&gt;</span>  </span><br><span class="line">    <span class="keyword"><span class="common">Options</span></span> Indexes FollowSymLinks ExecCGI Includes  </span><br><span class="line">    <span class="keyword">AllowOverride</span> <span class="literal">All</span>  </span><br><span class="line">    <span class="keyword"><span class="common">Order</span></span> allow,deny  </span><br><span class="line">    <span class="keyword"><span class="common">Allow</span></span> from <span class="literal">all</span>  </span><br><span class="line"><span class="tag">&lt;/Directory&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>apache2几个配置文件的关系 ：<br>apache2.conf  内部依次调用<code>httpd.conf</code>，<code>conf.d/</code> ，<code>sites-enabled/</code>配置的时候可灵活处理</p>
</li>
</ul>
<h3 id="etc/vsftpd-conf_配置信息vs">etc/vsftpd.conf 配置信息vs</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example config file /etc/vsftpd.conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default compiled in settings are fairly paranoid. This sample file</span></span><br><span class="line"><span class="comment"># loosens things up a bit, to make the ftp daemon more usable.</span></span><br><span class="line"><span class="comment"># Please see vsftpd.conf.5 for all compiled in defaults.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</span></span><br><span class="line"><span class="comment"># Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's</span></span><br><span class="line"><span class="comment"># capabilities.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Run standalone?  vsftpd can run either from an inetd or as a standalone</span></span><br><span class="line"><span class="comment"># daemon started from an initscript.</span></span><br><span class="line"><span class="constant">listen</span>=YES</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Run standalone with IPv6?</span></span><br><span class="line"><span class="comment"># Like the listen parameter, except vsftpd will listen on an IPv6 socket</span></span><br><span class="line"><span class="comment"># instead of an IPv4 one. This parameter and the listen parameter are mutually</span></span><br><span class="line"><span class="comment"># exclusive.</span></span><br><span class="line"><span class="comment">#listen_ipv6=YES</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Allow anonymous FTP? (Disabled by default)</span></span><br><span class="line"><span class="constant">anonymous_enable</span>=NO</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Uncomment this to allow local users to log in.</span></span><br><span class="line"><span class="constant">local_enable</span>=YES</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Uncomment this to enable any form of FTP write command.</span></span><br><span class="line"><span class="constant">write_enable</span>=YES</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Default umask for local users is 077\. You may wish to change this to 022,</span></span><br><span class="line"><span class="comment"># if your users expect that (022 is used by most other ftpd's)</span></span><br><span class="line"><span class="comment">#local_umask=022</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Uncomment this to allow the anonymous FTP user to upload files. This only</span></span><br><span class="line"><span class="comment"># has an effect if the above global write enable is activated. Also, you will</span></span><br><span class="line"><span class="comment"># obviously need to create a directory writable by the FTP user.</span></span><br><span class="line"><span class="comment">#anon_upload_enable=YES</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Uncomment this if you want the anonymous FTP user to be able to create</span></span><br><span class="line"><span class="comment"># new directories.</span></span><br><span class="line"><span class="comment">#anon_mkdir_write_enable=YES</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Activate directory messages - messages given to remote users when they</span></span><br><span class="line"><span class="comment"># go into a certain directory.</span></span><br><span class="line"><span class="constant">dirmessage_enable</span>=YES</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If enabled, vsftpd will display directory listings with the time</span></span><br><span class="line"><span class="comment"># in  your  local  time  zone.  The default is to display GMT. The</span></span><br><span class="line"><span class="comment"># times returned by the MDTM FTP command are also affected by this</span></span><br><span class="line"><span class="comment"># option.</span></span><br><span class="line"><span class="constant">use_localtime</span>=YES</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Activate logging of uploads/downloads.</span></span><br><span class="line"><span class="constant">xferlog_enable</span>=YES</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Make sure PORT transfer connections originate from port 20 (ftp-data).</span></span><br><span class="line"><span class="constant">connect_from_port_20</span>=YES</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you want, you can arrange for uploaded anonymous files to be owned by</span></span><br><span class="line"><span class="comment"># a different user. Note! Using root for uploaded files is not</span></span><br><span class="line"><span class="comment"># recommended!</span></span><br><span class="line"><span class="comment">#chown_uploads=YES</span></span><br><span class="line"><span class="comment">#chown_username=whoever</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You may override where the log file goes if you like. The default is shown</span></span><br><span class="line"><span class="comment"># below.</span></span><br><span class="line"><span class="comment">#xferlog_file=/var/log/vsftpd.log</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you want, you can have your log file in standard ftpd xferlog format.</span></span><br><span class="line"><span class="comment"># Note that the default log file location is /var/log/xferlog in this case.</span></span><br><span class="line"><span class="comment">#xferlog_std_format=YES</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You may change the default value for timing out an idle session.</span></span><br><span class="line"><span class="comment">#idle_session_timeout=600</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You may change the default value for timing out a data connection.</span></span><br><span class="line"><span class="comment">#data_connection_timeout=120</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is recommended that you define on your system a unique user which the</span></span><br><span class="line"><span class="comment"># ftp server can use as a totally isolated and unprivileged user.</span></span><br><span class="line"><span class="comment">#nopriv_user=ftpsecure</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Enable this and the server will recognise asynchronous ABOR requests. Not</span></span><br><span class="line"><span class="comment"># recommended for security (the code is non-trivial). Not enabling it,</span></span><br><span class="line"><span class="comment"># however, may confuse older FTP clients.</span></span><br><span class="line"><span class="comment">#async_abor_enable=YES</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default the server will pretend to allow ASCII mode but in fact ignore</span></span><br><span class="line"><span class="comment"># the request. Turn on the below options to have the server actually do ASCII</span></span><br><span class="line"><span class="comment"># mangling on files when in ASCII mode.</span></span><br><span class="line"><span class="comment"># Beware that on some FTP servers, ASCII support allows a denial of service</span></span><br><span class="line"><span class="comment"># attack (DoS) via the command SIZE /big/file in ASCII mode. vsftpd</span></span><br><span class="line"><span class="comment"># predicted this attack and has always been safe, reporting the size of the</span></span><br><span class="line"><span class="comment"># raw file.</span></span><br><span class="line"><span class="comment"># ASCII mangling is a horrible feature of the protocol.</span></span><br><span class="line"><span class="comment">#ascii_upload_enable=YES</span></span><br><span class="line"><span class="comment">#ascii_download_enable=YES</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You may fully customise the login banner string:</span></span><br><span class="line"><span class="constant">ftpd_banner</span>=Welcome to linuxidc's FTP service.</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You may specify a file of disallowed anonymous e-mail addresses. Apparently</span></span><br><span class="line"><span class="comment"># useful for combatting certain DoS attacks.</span></span><br><span class="line"><span class="comment">#deny_email_enable=YES</span></span><br><span class="line"><span class="comment"># (default follows)</span></span><br><span class="line"><span class="comment">#banned_email_file=/etc/vsftpd.banned_emails</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You may restrict local users to their home directories.  See the FAQ for</span></span><br><span class="line"><span class="comment"># the possible risks in this before using chroot_local_user or</span></span><br><span class="line"><span class="comment"># chroot_list_enable below.</span></span><br><span class="line"><span class="comment">#chroot_local_user=YES</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You may specify an explicit list of local users to chroot() to their home</span></span><br><span class="line"><span class="comment"># directory. If chroot_local_user is YES, then this list becomes a list of</span></span><br><span class="line"><span class="comment"># users to NOT chroot().</span></span><br><span class="line"><span class="comment"># (Warning! chroot'ing can be very dangerous. If using chroot, make sure that</span></span><br><span class="line"><span class="comment"># the user does not have write access to the top level directory within the</span></span><br><span class="line"><span class="comment"># chroot)</span></span><br><span class="line"><span class="comment">#chroot_local_user=YES</span></span><br><span class="line"><span class="constant">chroot_list_enable</span>=YES</span><br><span class="line"><span class="comment"># (default follows)</span></span><br><span class="line"><span class="constant">chroot_list_file</span>=/etc/vsftpd.chroot_list</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You may activate the -R option to the builtin ls. This is disabled by</span></span><br><span class="line"><span class="comment"># default to avoid remote users being able to cause excessive I/O on large</span></span><br><span class="line"><span class="comment"># sites. However, some broken FTP clients such as ncftp and mirror assume</span></span><br><span class="line"><span class="comment"># the presence of the -R option, so there is a strong case for enabling it.</span></span><br><span class="line"><span class="comment">#ls_recurse_enable=YES</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Customization</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Some of vsftpd's settings don't fit the filesystem layout by</span></span><br><span class="line"><span class="comment"># default.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This option should be the name of a directory which is empty.  Also, the</span></span><br><span class="line"><span class="comment"># directory should not be writable by the ftp user. This directory is used</span></span><br><span class="line"><span class="comment"># as a secure chroot() jail at times vsftpd does not require filesystem</span></span><br><span class="line"><span class="comment"># access.</span></span><br><span class="line"><span class="constant">secure_chroot_dir</span>=/var/run/vsftpd/empty</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This string is the name of the PAM service vsftpd will use.</span></span><br><span class="line"><span class="constant">pam_service_name</span>=vsftpd</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This option specifies the location of the RSA certificate to use for SSL</span></span><br><span class="line"><span class="comment"># encrypted connections.</span></span><br><span class="line"><span class="constant">rsa_cert_file</span>=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class="line"><span class="comment"># This option specifies the location of the RSA key to use for SSL</span></span><br><span class="line"><span class="comment"># encrypted connections.</span></span><br><span class="line"><span class="constant">rsa_private_key_file</span>=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="constant">local_root</span>=/home/linuxidc/公共的/FTP共享文件</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>安装很简单，几个命令搞定</p>
<pre><code>sudo apt-get <span class="operator"><span class="keyword">update</span>
sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> apache2
sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> php5 
sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> mysql-<span class="keyword">server</span>
sudo chmod <span class="number">777</span> /<span class="keyword">var</span>/www</span>
</code></pre><p>一些常用的</p>
<pre><code>apt-get <span class="operator"><span class="keyword">install</span> php5-gd
sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> php5-mysql</span>
</code></pre>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://www.wxameng.com/categories/Linux/"/>
    
      <category term="Ubuntu" scheme="http://www.wxameng.com/categories/Linux/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[windows下使用lua教程(转)]]></title>
    <link href="http://www.wxameng.com/lua-for-windows/"/>
    <id>http://www.wxameng.com/lua-for-windows/</id>
    <published>2015-09-27T10:09:46.000Z</published>
    <updated>2015-11-10T06:42:01.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><p>lua的简介<br>Lua 是一个小巧的脚本语言。是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个研究小组，由Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo所组成并于1993年开发。 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。Lua由标准C编写而成，几乎在所有操作系统和平台上都可以编译，运行。Lua并没有提供强大的库，这是由它的定位决定的。所以Lua不适合作为开发独立应用程序的语言。Lua 有一个同时进行的JIT项目，提供在特定平台上的即时编译功能。</p>
<a id="more"></a>
</li>
<li><p>下载lua<br>lua官网的下载页面：<a href="http://www.lua.org/download.html" target="_blank" rel="external">http://www.lua.org/download.html</a></p>
</li>
<li><p>lua包含的文件<br>下载后的lua是一个压缩包，解压后可以获得doc和src文件夹，还有makefile和readme文件。<br>doc文件夹下主要有lua的api文档<br>src文件夹包含lua的源码<br>（lua压缩包并不包含lib文件，lib文件直接通过vs去编译lua源代码就可以生成lib了，方法见第四步）</p>
</li>
<li><p>生成lua lib文件。<br>使用visual studio添加静态库项目</p>
</li>
<li><p>使用lua<br>在生成lib文件的步骤中的链接能看到如何在项目中使用lib，lua的使用同样需要使用lib，除了添加lib，还需要添加lauxlib.h,lua.h，luaconf.h，lualib.h这几个头文件。<br>关于lua的使用，我直接用代码说明吧。<br>以下代码演示了lua的栈操作 ，执行内存脚本，加载脚本中定义的变量，执行脚本中定义的无参函数，执行脚本中定义的有参函数，脚本中调用C++函数等操作。</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lua_test.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdafx.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> lua.h</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> lualib.h</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> lauxlib.h</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcAdd</span><span class="params">(lua_State *lu)</span>  </span><br><span class="line"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> a = lua_tointeger(lu, <span class="number">1</span>);  </span><br><span class="line">    <span class="keyword">int</span> b = lua_tointeger(lu, <span class="number">2</span>);  </span><br><span class="line">    lua_pushnumber(lu, a+b);    <span class="comment">//结果压栈  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;           <span class="comment">//返回1个结果  </span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> nret = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line">	<span class="comment">/*创建Lua对象*/</span></span><br><span class="line">	lua_State* lu = luaL_newstate();</span><br><span class="line">	luaL_openlibs(lu);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*栈操作  */</span></span><br><span class="line">	<span class="comment">//压入一个int类型的数据，数值为1</span></span><br><span class="line">    lua_pushinteger(lu, <span class="number">1</span>);  </span><br><span class="line">	<span class="comment">//压入一个int类型的数据，数值为3</span></span><br><span class="line">    lua_pushinteger(lu, <span class="number">3</span>);  </span><br><span class="line">	<span class="comment">//获得栈中第一个元素（也就是刚刚放入的第一个元素“1”）</span></span><br><span class="line">    <span class="keyword">int</span> n = lua_tointeger(lu, <span class="number">1</span>);  </span><br><span class="line">	<span class="comment">//获得栈中第二个元素</span></span><br><span class="line">    n = lua_tointeger(lu, <span class="number">2</span>);  </span><br><span class="line">	<span class="comment">//获得栈中的元素总数（如果总数为0，表示空。前面放入两个，这里的值为2）</span></span><br><span class="line">    <span class="keyword">int</span> nStack = lua_gettop(lu);  </span><br><span class="line">	<span class="comment">//剔除栈中元素（剔除两个，栈空）</span></span><br><span class="line">    lua_pop(lu, <span class="number">2</span>);  </span><br><span class="line">	<span class="comment">//获得栈中元素总数</span></span><br><span class="line">    nStack = lua_gettop(lu);  </span><br><span class="line"></span><br><span class="line">	<span class="comment">/*执行内存脚本*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//在lua脚本中，print函数是打印操作，print(Hello world)相当于打印一句Hello world。此时str相当于脚本中的打印操作</span></span><br><span class="line">    <span class="built_in">string</span> str = print (Hello world!);  </span><br><span class="line">	<span class="comment">//把str加载到内存中，其中最后一个参数name是chunk名字，用于debug或者错误信息的标识</span></span><br><span class="line">    luaL_loadbuffer(lu, str.c_str(), str.length(), line);  </span><br><span class="line">	<span class="comment">//调用函数。PS:lua_pcall的参数中n-nargs表示参数的个数，r-nresults表示...,errfunc表示</span></span><br><span class="line">    lua_pcall(lu, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*加载脚本中定义的变量  */</span></span><br><span class="line">    nret = luaL_dofile(lu, ../../luaScripts/test.lua);  </span><br><span class="line">	<span class="comment">//压入aa名字(必须先压入需要取值的数据名，然后通过取值函数（例如tointeger） 从栈中取值)</span></span><br><span class="line">    lua_getglobal(lu, aa);  </span><br><span class="line">	<span class="comment">//压入bb名字</span></span><br><span class="line">    lua_getglobal(lu, bb);  </span><br><span class="line">	<span class="comment">//前面已经演示过传入正数索引调用tointeger，现在演示如果传入的参数为负数，则会从后开始取值</span></span><br><span class="line">    <span class="keyword">int</span> bb = lua_tointeger(lu, -<span class="number">1</span>);  </span><br><span class="line">    <span class="keyword">int</span> aa = lua_tointeger(lu, -<span class="number">2</span>);  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*执行脚本中定义的无参函数  */</span></span><br><span class="line">	<span class="comment">//压入hello函数名字，其实无论函数还是变量，都是通过压入名字然后去调用的。</span></span><br><span class="line">    lua_getglobal(lu, hello);  </span><br><span class="line">	<span class="comment">//参数nargs为0，表示调用的是无参的函数</span></span><br><span class="line">    nret = lua_pcall(lu, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*执行脚本中定义的有参函数  */</span></span><br><span class="line">    lua_getglobal(lu, fadd);  </span><br><span class="line">	<span class="comment">//压入即将作为参数的对象</span></span><br><span class="line">    lua_pushnumber(lu, aa);  </span><br><span class="line">    lua_pushnumber(lu, bb);  </span><br><span class="line">	<span class="comment">//调用函数并获得返回结果（如果nret为0，表示调用成功，返回值会放入栈，通过取值即可获得。否则失败，失败时lua会产生失败信息放入栈，通过取值就可以获得错误信息）</span></span><br><span class="line">    nret = lua_pcall(lu, <span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>);  </span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &amp;lt;&amp;lt; <span class="number">1</span> 元素总数: &amp;lt;&amp;lt; lua_gettop(lu) &amp;lt;&amp;lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (nret != <span class="number">0</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">		<span class="comment">//打印错误信息</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *pc = lua_tostring(lu, -<span class="number">1</span>);  </span><br><span class="line">        <span class="built_in">cout</span> &amp;lt;&amp;lt; pc;  </span><br><span class="line"></span><br><span class="line">		<span class="built_in">cout</span> &amp;lt;&amp;lt; <span class="number">2</span> 元素总数: &amp;lt;&amp;lt; lua_gettop(lu) &amp;lt;&amp;lt; endl;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">		<span class="comment">//打印结果</span></span><br><span class="line">        nret = lua_tointeger(lu, -<span class="number">1</span>);  </span><br><span class="line">        <span class="built_in">cout</span> &amp;lt;&amp;lt; 调用脚本函数: &amp;lt;&amp;lt; endl;  </span><br><span class="line">        <span class="built_in">cout</span> &amp;lt;&amp;lt; aa &amp;lt;&amp;lt;  +  &amp;lt;&amp;lt; bb &amp;lt;&amp;lt;  =  &amp;lt;&amp;lt; nret &amp;lt;&amp;lt; endl;  </span><br><span class="line"></span><br><span class="line">		<span class="built_in">cout</span> &amp;lt;&amp;lt; <span class="number">3</span> 元素总数: &amp;lt;&amp;lt; lua_gettop(lu) &amp;lt;&amp;lt; endl;</span><br><span class="line">		<span class="comment">//？</span></span><br><span class="line">        lua_pop(lu, <span class="number">1</span>);  </span><br><span class="line">		<span class="built_in">cout</span> &amp;lt;&amp;lt; <span class="number">4</span> 元素总数: &amp;lt;&amp;lt; lua_gettop(lu) &amp;lt;&amp;lt; endl;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*脚本中调用C++函数*/</span></span><br><span class="line">	<span class="comment">//压入c++函数</span></span><br><span class="line">    lua_pushcfunction(lu, fcAdd);  </span><br><span class="line">	<span class="comment">//取出fcAdd函数使用</span></span><br><span class="line">    lua_setglobal(lu, fcAdd);  </span><br><span class="line">	<span class="comment">//压入脚本函数</span></span><br><span class="line">    lua_getglobal(lu, fc);  </span><br><span class="line">	<span class="comment">//压入参数</span></span><br><span class="line">    lua_pushnumber(lu, aa);  </span><br><span class="line">    lua_pushnumber(lu, bb);  </span><br><span class="line">	<span class="comment">//调用函数</span></span><br><span class="line">    nret = lua_pcall(lu, <span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>);  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nret != <span class="number">0</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *pc = lua_tostring(lu, -<span class="number">1</span>);  </span><br><span class="line">        <span class="built_in">cout</span> &amp;lt;&amp;lt; pc;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        nret = lua_tointeger(lu, -<span class="number">1</span>);  </span><br><span class="line">        <span class="built_in">cout</span> &amp;lt;&amp;lt; 调用C++函数: &amp;lt;&amp;lt; endl;  </span><br><span class="line">        <span class="built_in">cout</span> &amp;lt;&amp;lt; aa &amp;lt;&amp;lt;  +  &amp;lt;&amp;lt; bb &amp;lt;&amp;lt;  =  &amp;lt;&amp;lt; nret &amp;lt;&amp;lt; endl;  </span><br><span class="line">        lua_pop(lu, <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    lua_close(lu);  </span><br><span class="line">    <span class="built_in">std</span>::system(pause);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><p>lua的简介<br>Lua 是一个小巧的脚本语言。是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个研究小组，由Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo所组成并于1993年开发。 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。Lua由标准C编写而成，几乎在所有操作系统和平台上都可以编译，运行。Lua并没有提供强大的库，这是由它的定位决定的。所以Lua不适合作为开发独立应用程序的语言。Lua 有一个同时进行的JIT项目，提供在特定平台上的即时编译功能。</p>]]>
    
    </summary>
    
      <category term="lua" scheme="http://www.wxameng.com/tags/lua/"/>
    
      <category term="Lua" scheme="http://www.wxameng.com/categories/Lua/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[visual studio 静态库项目]]></title>
    <link href="http://www.wxameng.com/visual-studio-static-lib/"/>
    <id>http://www.wxameng.com/visual-studio-static-lib/</id>
    <published>2015-09-27T10:07:11.000Z</published>
    <updated>2015-11-17T13:02:38.000Z</updated>
    <content type="html"><![CDATA[<p>##简介<br>visual studio 静态库项目的作用是生成lib文件，静态lib将导出声明和实现都放在lib中。编译后所有代码都嵌入到宿主程序，lib文件是不对外公开的，不能查看一个编译过后的文件.</p>
<a id="more"></a>
<p>##制作lib<br>visual studio 新建项目 - win32项目 在应用程序类型选择时使用静态库（dll为动态库），一般情况下不要使用预编译头，像lua这类型的脚本语言，在使用visual studio生成lib的时候是不可以选择使用预编译头的，否则会报错。 在新建项目后，将需要用到的源代码添加到项目后生成即可得到lib文件。<br><em>（建议把项目属性中得输出路径改为.bin，一个你容易找到的目录，这样生成的lib文件就会放入到这个文件夹中了。）</em></p>
<p>##使用lib<br>两种方法：</p>
<ol>
<li>通过修改 项目属性 - 连接器 - 输入 - 附加依赖项去添加lib </li>
<li>加入预编译指令#pragma comment (lib,”*.lib”)，这种方法优点是可以利用条件预编译指令链接不同版本的LIB文件。因为，在Debug方式下，产生的LIB文件是Debug版本，如Regd.lib；在Release方式下，产生的LIB文件是Release版本，如Regr.lib。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>##简介<br>visual studio 静态库项目的作用是生成lib文件，静态lib将导出声明和实现都放在lib中。编译后所有代码都嵌入到宿主程序，lib文件是不对外公开的，不能查看一个编译过后的文件.</p>]]>
    
    </summary>
    
      <category term="lib" scheme="http://www.wxameng.com/tags/lib/"/>
    
      <category term="static" scheme="http://www.wxameng.com/tags/static/"/>
    
      <category term="Windows" scheme="http://www.wxameng.com/categories/Windows/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[vmware压缩磁盘空间的方法[转]]]></title>
    <link href="http://www.wxameng.com/vm-save-partation/"/>
    <id>http://www.wxameng.com/vm-save-partation/</id>
    <published>2015-09-16T11:53:03.000Z</published>
    <updated>2015-11-10T06:48:51.000Z</updated>
    <content type="html"><![CDATA[<p>转自 <a href="http://blog.csdn.net/gzshun/article/details/8332047" target="_blank" rel="external">http://blog.csdn.net/gzshun/article/details/8332047</a><br><a id="more"></a><br>for linux<br>1、进入系统后，在GUI界面下启动 vmware-toolbox，选择shrink后根据图形提示选择partation压缩<br><strong>2、在shell里 <code>vmware-toolbox-cmd disk shrink /partation</code></strong> 亲测可用 将/partation 直接改为 /<br>3、如果和我一样进不了系统的，可以在本地压缩，要求安装了vmware，vmware目录vmware-vdiskmanager.exe -k f:vmwarerhrh6.vmdk （不能有快照）<br>fow windows<br>1、进虚拟机里面执行vmware-toolbox工具<br>2、采用linux 3的方法<br>另外在vmware社区还有人建议可以用</p>
<pre><code>vmkfstools -<span class="tag">i</span> old<span class="class">.vmdk</span> new<span class="class">.vmdk</span> -d thin
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>转自 <a href="http://blog.csdn.net/gzshun/article/details/8332047">http://blog.csdn.net/gzshun/article/details/8332047</a><br>]]>
    
    </summary>
    
      <category term="vm" scheme="http://www.wxameng.com/tags/vm/"/>
    
      <category term="Windows" scheme="http://www.wxameng.com/categories/Windows/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[QT自动打包依赖dll]]></title>
    <link href="http://www.wxameng.com/qt-auto-develop-dll/"/>
    <id>http://www.wxameng.com/qt-auto-develop-dll/</id>
    <published>2015-09-15T07:07:54.000Z</published>
    <updated>2015-11-10T06:46:15.000Z</updated>
    <content type="html"><![CDATA[<p>Qt Widgets Application的发布方式：<br>打开Qt命令行：</p>
<pre><code><span class="tag">windeployqt</span> <span class="tag">hellomw</span><span class="class">.exe</span>
</code></pre><a id="more"></a>
<p>另外还有Qt Quick Application的发布方式</p>
<p><code>http://tieba.baidu.com/p/3730103947</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Qt Widgets Application的发布方式：<br>打开Qt命令行：</p>
<pre><code><span class="tag">windeployqt</span> <span class="tag">hellomw</span><span class="class">.exe</span>
</code></pre>]]>
    
    </summary>
    
      <category term="Qt" scheme="http://www.wxameng.com/categories/Qt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[配置ROS出现的问题及解决方法]]></title>
    <link href="http://www.wxameng.com/ros-error-solution/"/>
    <id>http://www.wxameng.com/ros-error-solution/</id>
    <published>2015-09-14T09:43:01.000Z</published>
    <updated>2015-11-10T06:45:48.000Z</updated>
    <content type="html"><![CDATA[<p>gazebo出现配置错误：</p>
<pre><code>sudo apt-<span class="built_in">get</span> install libgazebo5-<span class="built_in">dev</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>gazebo出现配置错误：</p>
<pre><code>sudo apt-<span class="built_in">get</span> install libgazebo5-<span class="built_in">dev</span>
</code></pre]]>
    </summary>
    
      <category term="ros" scheme="http://www.wxameng.com/tags/ros/"/>
    
      <category term="Ros" scheme="http://www.wxameng.com/categories/Ros/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[汇编指令速查]]></title>
    <link href="http://www.wxameng.com/asm-dictionary/"/>
    <id>http://www.wxameng.com/asm-dictionary/</id>
    <published>2015-08-26T14:49:56.000Z</published>
    <updated>2015-11-09T12:44:12.000Z</updated>
    <content type="html"><![CDATA[<p>汇编指令速查：普通指令、浮点指令<br><a id="more"></a></p>
<h2 id="普通指令">普通指令</h2><table style="border-collapse: collapse;" border="1" cellpadding="2"><br><tbody><br><tr><br><th>指令</th><br><th>功能</th><br></tr><br><tr><br><td>AAA</td><br><td>调整加</td><br></tr><br><tr><br><td>AAD</td><br><td>调整除</td><br></tr><br><tr><br><td>AAM</td><br><td>调整乘</td><br></tr><br><tr><br><td>AAS</td><br><td>调整减</td><br></tr><br><tr><br><td>ADC</td><br><td>进位加</td><br></tr><br><tr><br><td>ADD</td><br><td>加</td><br></tr><br><tr><br><td>AND</td><br><td>与</td><br></tr><br><tr><br><td>ARPL</td><br><td>调整优先级</td><br></tr><br><tr><br><td>BOUND</td><br><td>检查数组</td><br></tr><br><tr><br><td>BSF</td><br><td>位右扫描</td><br></tr><br><tr><br><td>BSR</td><br><td>位左扫描</td><br></tr><br><tr><br><td>BSWAP</td><br><td>交换字节</td><br></tr><br><tr><br><td>BT</td><br><td>位测试</td><br></tr><br><tr><br><td>BTC</td><br><td>位测试求反</td><br></tr><br><tr><br><td>BTR</td><br><td>位测试清零</td><br></tr><br><tr><br><td>BTS</td><br><td>位测试置一</td><br></tr><br><tr><br><td>CALL</td><br><td>过程调用</td><br></tr><br><tr><br><td>CBW</td><br><td>转换字节</td><br></tr><br><tr><br><td>CDQ</td><br><td>转换双字</td><br></tr><br><tr><br><td>CLC</td><br><td>进位清零</td><br></tr><br><tr><br><td>CLD</td><br><td>方向清零</td><br></tr><br><tr><br><td>CLI</td><br><td>中断清零</td><br></tr><br><tr><br><td>CLTS</td><br><td>任务清除</td><br></tr><br><tr><br><td>CMC</td><br><td>进位求反</td><br></tr><br><tr><br><td>CMOVA</td><br><td>高于传送</td><br></tr><br><tr><br><td>CMOVB</td><br><td>低于传送</td><br></tr><br><tr><br><td>CMOVE</td><br><td>相等传送</td><br></tr><br><tr><br><td>CMOVG</td><br><td>大于传送</td><br></tr><br><tr><br><td>CMOVL</td><br><td>小于传送</td><br></tr><br><tr><br><td>CMOVNA</td><br><td>不高于传送</td><br></tr><br><tr><br><td>CMOVNB</td><br><td>不低于传送</td><br></tr><br><tr><br><td>CMOVNE</td><br><td>不等传送</td><br></tr><br><tr><br><td>CMOVNG</td><br><td>不大于传送</td><br></tr><br><tr><br><td>CMOVNL</td><br><td>不小于传送</td><br></tr><br><tr><br><td>CMOVNO</td><br><td>不溢出传送</td><br></tr><br><tr><br><td>CMOVNP</td><br><td>非奇偶传送</td><br></tr><br><tr><br><td>CMOVNS</td><br><td>非负传送</td><br></tr><br><tr><br><td>CMOVO</td><br><td>溢出传送</td><br></tr><br><tr><br><td>CMOVP</td><br><td>奇偶传送</td><br></tr><br><tr><br><td>CMOVS</td><br><td>负号传送</td><br></tr><br><tr><br><td>CMP</td><br><td>比较</td><br></tr><br><tr><br><td>CMPSB</td><br><td>比较字节串</td><br></tr><br><tr><br><td>CMPSD</td><br><td>比较双字串</td><br></tr><br><tr><br><td>CMPSW</td><br><td>比较字串</td><br></tr><br><tr><br><td>CMPXCHG</td><br><td>比较交换</td><br></tr><br><tr><br><td>CMPXCHG486</td><br><td>比较交换486</td><br></tr><br><tr><br><td>CMPXCHG8B</td><br><td>比较交换8字节</td><br></tr><br><tr><br><td>CPUID</td><br><td>CPU标识</td><br></tr><br><tr><br><td>CWD</td><br><td>转换字</td><br></tr><br><tr><br><td>CWDE</td><br><td>扩展字</td><br></tr><br><tr><br><td>DAA</td><br><td>调整加十</td><br></tr><br><tr><br><td>DAS</td><br><td>调整减十</td><br></tr><br><tr><br><td>DEC</td><br><td>减一</td><br></tr><br><tr><br><td>DIV</td><br><td>除</td><br></tr><br><tr><br><td>ENTER</td><br><td>建立堆栈帧</td><br></tr><br><tr><br><td>HLT</td><br><td>停</td><br></tr><br><tr><br><td>IDIV</td><br><td>符号整除</td><br></tr><br><tr><br><td>IMUL</td><br><td>符号乘法</td><br></tr><br><tr><br><td>IN</td><br><td>端口输入</td><br></tr><br><tr><br><td>INC</td><br><td>加一</td><br></tr><br><tr><br><td>INSB</td><br><td>端口输入字节串</td><br></tr><br><tr><br><td>INSD</td><br><td>端口输入双字串</td><br></tr><br><tr><br><td>INSW</td><br><td>端口输入字串</td><br></tr><br><tr><br><td>JA</td><br><td>高于跳转</td><br></tr><br><tr><br><td>JB</td><br><td>低于跳转</td><br></tr><br><tr><br><td>JBE</td><br><td>不高于跳转</td><br></tr><br><tr><br><td>JCXZ</td><br><td>计数一六零跳转</td><br></tr><br><tr><br><td>JE</td><br><td>相等跳转</td><br></tr><br><tr><br><td>JECXZ</td><br><td>计数三二零跳转</td><br></tr><br><tr><br><td>JG</td><br><td>大于跳转</td><br></tr><br><tr><br><td>JL</td><br><td>小于跳转</td><br></tr><br><tr><br><td>JMP</td><br><td>跳转</td><br></tr><br><tr><br><td>JMPE</td><br><td>跳转扩展</td><br></tr><br><tr><br><td>JNB</td><br><td>不低于跳转</td><br></tr><br><tr><br><td>JNE</td><br><td>不等跳转</td><br></tr><br><tr><br><td>JNG</td><br><td>不大于跳转</td><br></tr><br><tr><br><td>JNL</td><br><td>不小于跳转</td><br></tr><br><tr><br><td>JNO</td><br><td>不溢出跳转</td><br></tr><br><tr><br><td>JNP</td><br><td>非奇偶跳转</td><br></tr><br><tr><br><td>JNS</td><br><td>非负跳转</td><br></tr><br><tr><br><td>JO</td><br><td>溢出跳转</td><br></tr><br><tr><br><td>JP</td><br><td>奇偶跳转</td><br></tr><br><tr><br><td>JS</td><br><td>负号跳转</td><br></tr><br><tr><br><td>LAHF</td><br><td>加载标志低八</td><br></tr><br><tr><br><td>LAR</td><br><td>加载访问权限</td><br></tr><br><tr><br><td>LDS</td><br><td>加载数据段</td><br></tr><br><tr><br><td>LEA</td><br><td>加载有效地址</td><br></tr><br><tr><br><td>LEAVE</td><br><td>清除过程堆栈</td><br></tr><br><tr><br><td>LES</td><br><td>加载附加段</td><br></tr><br><tr><br><td>LFS</td><br><td>加载标志段</td><br></tr><br><tr><br><td>LGDT</td><br><td>加载全局描述符</td><br></tr><br><tr><br><td>LGS</td><br><td>加载全局段</td><br></tr><br><tr><br><td>LIDT</td><br><td>加载中断描述符</td><br></tr><br><tr><br><td>LMSW</td><br><td>加载状态字</td><br></tr><br><tr><br><td>LOADALL</td><br><td>加载所有</td><br></tr><br><tr><br><td>LOADALL286</td><br><td>加载所有286</td><br></tr><br><tr><br><td>LOCK</td><br><td>锁</td><br></tr><br><tr><br><td>LODSB</td><br><td>加载源变址字节串</td><br></tr><br><tr><br><td>LODSD</td><br><td>加载源变址双字串</td><br></tr><br><tr><br><td>LODSW</td><br><td>加载源变址字串</td><br></tr><br><tr><br><td>LOOP</td><br><td>计数循环</td><br></tr><br><tr><br><td>LOOPE</td><br><td>相等循环</td><br></tr><br><tr><br><td>LOOPNE</td><br><td>不等循环</td><br></tr><br><tr><br><td>LOOPNZ</td><br><td>非零循环</td><br></tr><br><tr><br><td>LOOPZ</td><br><td>为零循环</td><br></tr><br><tr><br><td>LSL</td><br><td>加载段界限</td><br></tr><br><tr><br><td>LSS</td><br><td>加载堆栈段</td><br></tr><br><tr><br><td>LTR</td><br><td>加载任务</td><br></tr><br><tr><br><td>MONITOR</td><br><td>监视</td><br></tr><br><tr><br><td>MOV</td><br><td>传送</td><br></tr><br><tr><br><td>MOVSB</td><br><td>传送字节串</td><br></tr><br><tr><br><td>MOVSD</td><br><td>传送双字串</td><br></tr><br><tr><br><td>MOVSW</td><br><td>传送字串</td><br></tr><br><tr><br><td>MOVSX</td><br><td>符号传送</td><br></tr><br><tr><br><td>MOVZX</td><br><td>零传送</td><br></tr><br><tr><br><td>MUL</td><br><td>乘</td><br></tr><br><tr><br><td>MWAIT</td><br><td></td><br></tr><br><tr><br><td>NEG</td><br><td>求补</td><br></tr><br><tr><br><td>NOP</td><br><td>空</td><br></tr><br><tr><br><td>NOT</td><br><td>非</td><br></tr><br><tr><br><td>OR</td><br><td>或</td><br></tr><br><tr><br><td>OUT</td><br><td>端口输出</td><br></tr><br><tr><br><td>OUTSB</td><br><td>端口输出字节串</td><br></tr><br><tr><br><td>OUTSD</td><br><td>端口输出双字串</td><br></tr><br><tr><br><td>OUTSW</td><br><td>端口输出字串</td><br></tr><br><tr><br><td>POP</td><br><td>出栈</td><br></tr><br><tr><br><td>POPA</td><br><td>全部出栈</td><br></tr><br><tr><br><td>POPF</td><br><td>标志出栈</td><br></tr><br><tr><br><td>PUSH</td><br><td>压栈</td><br></tr><br><tr><br><td>PUSHA</td><br><td>全部压栈</td><br></tr><br><tr><br><td>PUSHF</td><br><td>标志压栈</td><br></tr><br><tr><br><td>RCL</td><br><td>进位循环左移</td><br></tr><br><tr><br><td>RCR</td><br><td>进位循环右移</td><br></tr><br><tr><br><td>RDMSR</td><br><td>读专用模式</td><br></tr><br><tr><br><td>RDPMC</td><br><td>读执行监视计数</td><br></tr><br><tr><br><td>RDSHR</td><br><td></td><br></tr><br><tr><br><td>RDTSC</td><br><td>读时间戳计数</td><br></tr><br><tr><br><td>REP</td><br><td>重复</td><br></tr><br><tr><br><td>REPE</td><br><td>相等重复</td><br></tr><br><tr><br><td>REPNE</td><br><td>不等重复</td><br></tr><br><tr><br><td>RET</td><br><td>过程返回</td><br></tr><br><tr><br><td>RETF</td><br><td>远过程返回</td><br></tr><br><tr><br><td>RETN</td><br><td>近过程返回</td><br></tr><br><tr><br><td>ROL</td><br><td>循环左移</td><br></tr><br><tr><br><td>ROR</td><br><td>循环右移</td><br></tr><br><tr><br><td>RSM</td><br><td>恢复系统管理</td><br></tr><br><tr><br><td>SAHF</td><br><td>恢复标志低八</td><br></tr><br><tr><br><td>SAL</td><br><td>算术左移</td><br></tr><br><tr><br><td>SALC</td><br><td></td><br></tr><br><tr><br><td>SAR</td><br><td>算术右移</td><br></tr><br><tr><br><td>SBB</td><br><td>借位减</td><br></tr><br><tr><br><td>SCASB</td><br><td>扫描字节串</td><br></tr><br><tr><br><td>SCASD</td><br><td>扫描双字串</td><br></tr><br><tr><br><td>SCASW</td><br><td>扫描字串</td><br></tr><br><tr><br><td>SETA</td><br><td>高于置位</td><br></tr><br><tr><br><td>SETB</td><br><td>低于置位</td><br></tr><br><tr><br><td>SETE</td><br><td>相等置位</td><br></tr><br><tr><br><td>SETG</td><br><td>大于置位</td><br></tr><br><tr><br><td>SETL</td><br><td>小于置位</td><br></tr><br><tr><br><td>SETNA</td><br><td>不高于置位</td><br></tr><br><tr><br><td>SETNB</td><br><td>不低于置位</td><br></tr><br><tr><br><td>SETNE</td><br><td>不等置位</td><br></tr><br><tr><br><td>SETNG</td><br><td>不大于置位</td><br></tr><br><tr><br><td>SETNL</td><br><td>不小于置位</td><br></tr><br><tr><br><td>SETNO</td><br><td>不溢出置位</td><br></tr><br><tr><br><td>SETNP</td><br><td>非奇偶置位</td><br></tr><br><tr><br><td>SETNS</td><br><td>非负置位</td><br></tr><br><tr><br><td>SETO</td><br><td>溢出置位</td><br></tr><br><tr><br><td>SETP</td><br><td>奇偶置位</td><br></tr><br><tr><br><td>SETS</td><br><td>负号置位</td><br></tr><br><tr><br><td>SGDT</td><br><td>保存全局描述符</td><br></tr><br><tr><br><td>SHL</td><br><td>逻辑左移</td><br></tr><br><tr><br><td>SHLD</td><br><td>双精度左移</td><br></tr><br><tr><br><td>SHR</td><br><td>逻辑右移</td><br></tr><br><tr><br><td>SHRD</td><br><td>双精度右移</td><br></tr><br><tr><br><td>SIDT</td><br><td>保存中断描述符</td><br></tr><br><tr><br><td>SLDT</td><br><td>保存局部描述符</td><br></tr><br><tr><br><td>SMI</td><br><td></td><br></tr><br><tr><br><td>SMINT</td><br><td></td><br></tr><br><tr><br><td>SMINTOLD</td><br><td></td><br></tr><br><tr><br><td>SMSW</td><br><td>保存状态字</td><br></tr><br><tr><br><td>STC</td><br><td>进位设置</td><br></tr><br><tr><br><td>STD</td><br><td>方向设置</td><br></tr><br><tr><br><td>STI</td><br><td>中断设置</td><br></tr><br><tr><br><td>STOSB</td><br><td>保存字节串</td><br></tr><br><tr><br><td>STOSD</td><br><td>保存双字串</td><br></tr><br><tr><br><td>STOSW</td><br><td>保存字串</td><br></tr><br><tr><br><td>STR</td><br><td>保存任务</td><br></tr><br><tr><br><td>SUB</td><br><td>减</td><br></tr><br><tr><br><td>SYSCALL</td><br><td>系统调用</td><br></tr><br><tr><br><td>SYSENTER</td><br><td>系统进入</td><br></tr><br><tr><br><td>SYSEXIT</td><br><td>系统退出</td><br></tr><br><tr><br><td>SYSRET</td><br><td>系统返回</td><br></tr><br><tr><br><td>TEST</td><br><td>数测试</td><br></tr><br><tr><br><td>UD0</td><br><td>未定义指令0</td><br></tr><br><tr><br><td>UD1</td><br><td>未定义指令1</td><br></tr><br><tr><br><td>UD2</td><br><td>未定义指令2</td><br></tr><br><tr><br><td>UMOV</td><br><td></td><br></tr><br><tr><br><td>VERW</td><br><td>校验写</td><br></tr><br><tr><br><td>WAIT</td><br><td>等</td><br></tr><br><tr><br><td>WBINVD</td><br><td>回写无效高速缓存</td><br></tr><br><tr><br><td>WRMSR</td><br><td>写专用模式</td><br></tr><br><tr><br><td>WRSHR</td><br><td></td><br></tr><br><tr><br><td>XADD</td><br><td>交换加</td><br></tr><br><tr><br><td>XBTS</td><br><td></td><br></tr><br><tr><br><td>XCHG</td><br><td>交换</td><br></tr><br><tr><br><td>XLAT</td><br><td>换码</td><br></tr><br><tr><br><td>XOR</td><br><td>异或</td><br></tr><br><tr><br><td>XSTORE</td><br><td></td><br></tr><br></tbody><br></table>

<h2 id="浮点指令">浮点指令</h2><table style="border-collapse: collapse;" border="1" cellpadding="2"><br><tbody><br><tr><br><th>指令</th><br><th>功能</th><br></tr><br><tr><br><td>EMMS</td><br><td>媒体空MMX状态</td><br></tr><br><tr><br><td>F2XM1</td><br><td>浮点栈顶绝对值</td><br></tr><br><tr><br><td>FADD</td><br><td>浮点加</td><br></tr><br><tr><br><td>FADDP</td><br><td>浮点加出栈</td><br></tr><br><tr><br><td>FBLD</td><br><td>浮点加载十数</td><br></tr><br><tr><br><td>FBSTP</td><br><td>浮点保存十数出栈</td><br></tr><br><tr><br><td>FCHS</td><br><td>浮点正负求反</td><br></tr><br><tr><br><td>FCLEX</td><br><td>浮点检查错误清除</td><br></tr><br><tr><br><td>FCMOVB</td><br><td>浮点低于传送</td><br></tr><br><tr><br><td>FCMOVBE</td><br><td>浮点不高于传送</td><br></tr><br><tr><br><td>FCMOVE</td><br><td>浮点相等传送</td><br></tr><br><tr><br><td>FCMOVNB</td><br><td>浮点不低于传送</td><br></tr><br><tr><br><td>FCMOVNBE</td><br><td>浮点高于传送</td><br></tr><br><tr><br><td>FCMOVNE</td><br><td>浮点不等传送</td><br></tr><br><tr><br><td>FCMOVNU</td><br><td>浮点有序传送</td><br></tr><br><tr><br><td>FCMOVU</td><br><td>浮点无序传送</td><br></tr><br><tr><br><td>FCOM</td><br><td>浮点比较</td><br></tr><br><tr><br><td>FCOMI</td><br><td>浮点比较加载标志</td><br></tr><br><tr><br><td>FCOMIP</td><br><td>浮点比较加载标志出栈</td><br></tr><br><tr><br><td>FCOMP</td><br><td>浮点比较出栈</td><br></tr><br><tr><br><td>FCOMPP</td><br><td>浮点比较出栈二</td><br></tr><br><tr><br><td>FCOS</td><br><td>浮点余弦</td><br></tr><br><tr><br><td>FDECSTP</td><br><td>浮点栈针减一</td><br></tr><br><tr><br><td>FDISI</td><br><td>浮点检查禁止中断</td><br></tr><br><tr><br><td>FDIV</td><br><td>浮点除</td><br></tr><br><tr><br><td>FDIVP</td><br><td>浮点除出栈</td><br></tr><br><tr><br><td>FDIVR</td><br><td>浮点反除</td><br></tr><br><tr><br><td>FDIVRP</td><br><td>浮点反除出栈</td><br></tr><br><tr><br><td>FENI</td><br><td>浮点检查禁止中断二</td><br></tr><br><tr><br><td>FFREE</td><br><td>浮点释放</td><br></tr><br><tr><br><td>FFREEP</td><br><td>浮点释放出栈</td><br></tr><br><tr><br><td>FIADD</td><br><td>浮点加整数</td><br></tr><br><tr><br><td>FICOM</td><br><td>浮点比较整数</td><br></tr><br><tr><br><td>FICOMP</td><br><td>浮点比较整数出栈</td><br></tr><br><tr><br><td>FIDIV</td><br><td>浮点除整数</td><br></tr><br><tr><br><td>FIDIVR</td><br><td>浮点反除</td><br></tr><br><tr><br><td>FILD</td><br><td>浮点加载整数</td><br></tr><br><tr><br><td>FIMUL</td><br><td>浮点乘整数</td><br></tr><br><tr><br><td>FINCSTP</td><br><td>浮点栈针加一</td><br></tr><br><tr><br><td>FINIT</td><br><td>浮点检查初始化</td><br></tr><br><tr><br><td>FIST</td><br><td>浮点保存整数</td><br></tr><br><tr><br><td>FISTP</td><br><td>浮点保存整数出栈</td><br></tr><br><tr><br><td>FISTTP</td><br><td></td><br></tr><br><tr><br><td>FISUB</td><br><td>浮点减整数</td><br></tr><br><tr><br><td>FISUBR</td><br><td>浮点反减整数</td><br></tr><br><tr><br><td>FLD</td><br><td>浮点加载数</td><br></tr><br><tr><br><td>FLD1</td><br><td>浮点加载一</td><br></tr><br><tr><br><td>FLDCW</td><br><td>浮点加载控制器</td><br></tr><br><tr><br><td>FLDENV</td><br><td>浮点加载环境</td><br></tr><br><tr><br><td>FLDL2E</td><br><td>浮点加载L2E</td><br></tr><br><tr><br><td>FLDL2T</td><br><td>浮点加载L2T</td><br></tr><br><tr><br><td>FLDLG2</td><br><td>浮点加载LG2</td><br></tr><br><tr><br><td>FLDLN2</td><br><td>浮点加载LN2</td><br></tr><br><tr><br><td>FLDPI</td><br><td>浮点加载PI</td><br></tr><br><tr><br><td>FLDZ</td><br><td>浮点加载零</td><br></tr><br><tr><br><td>FMUL</td><br><td>浮点乘</td><br></tr><br><tr><br><td>FMULP</td><br><td>浮点乘出栈</td><br></tr><br><tr><br><td>FNCLEX</td><br><td>浮点不检查错误清除</td><br></tr><br><tr><br><td>FNDISI</td><br><td>浮点不检查禁止中断</td><br></tr><br><tr><br><td>FNENI</td><br><td>浮点不检查禁止中断二</td><br></tr><br><tr><br><td>FNINIT</td><br><td>浮点不检查初始化</td><br></tr><br><tr><br><td>FNOP</td><br><td>浮点空</td><br></tr><br><tr><br><td>FNSAVE</td><br><td>浮点不检查保存状态</td><br></tr><br><tr><br><td>FNSTCW</td><br><td>浮点不检查保存控制器</td><br></tr><br><tr><br><td>FNSTENV</td><br><td>浮点不检查保存环境</td><br></tr><br><tr><br><td>FNSTSW</td><br><td>浮点不检查保存状态器</td><br></tr><br><tr><br><td>FPATAN</td><br><td>浮点部分反正切</td><br></tr><br><tr><br><td>FPREM</td><br><td>浮点部分余数</td><br></tr><br><tr><br><td>FPREM1</td><br><td>浮点部分余数二</td><br></tr><br><tr><br><td>FPTAN</td><br><td>浮点部分正切</td><br></tr><br><tr><br><td>FRNDINT</td><br><td>浮点舍入求整</td><br></tr><br><tr><br><td>FRSTOR</td><br><td>浮点恢复状态</td><br></tr><br><tr><br><td>FSAVE</td><br><td>浮点检查保存状态</td><br></tr><br><tr><br><td>FSCALE</td><br><td>浮点比例运算</td><br></tr><br><tr><br><td>FSETPM</td><br><td>浮点设置保护</td><br></tr><br><tr><br><td>FSIN</td><br><td>浮点正弦</td><br></tr><br><tr><br><td>FSINCOS</td><br><td>浮点正余弦</td><br></tr><br><tr><br><td>FSQRT</td><br><td>浮点平方根</td><br></tr><br><tr><br><td>FST</td><br><td>浮点保存</td><br></tr><br><tr><br><td>FSTCW</td><br><td>浮点检查保存控制器</td><br></tr><br><tr><br><td>FSTENV</td><br><td>浮点检查保存环境</td><br></tr><br><tr><br><td>FSTP</td><br><td>浮点保存出栈</td><br></tr><br><tr><br><td>FSTSW</td><br><td>浮点检查保存状态器</td><br></tr><br><tr><br><td>FSUB</td><br><td>浮点减</td><br></tr><br><tr><br><td>FSUBP</td><br><td>浮点减出栈</td><br></tr><br><tr><br><td>FSUBR</td><br><td>浮点反减</td><br></tr><br><tr><br><td>FSUBRP</td><br><td>浮点反减出栈</td><br></tr><br><tr><br><td>FTST</td><br><td>浮点比零</td><br></tr><br><tr><br><td>FUCOM</td><br><td>浮点无序比较</td><br></tr><br><tr><br><td>FUCOMI</td><br><td>浮点反比加载标志</td><br></tr><br><tr><br><td>FUCOMIP</td><br><td>浮点反比加载标志出栈</td><br></tr><br><tr><br><td>FUCOMP</td><br><td>浮点无序比较出栈</td><br></tr><br><tr><br><td>FUCOMPP</td><br><td>浮点无序比较出栈二</td><br></tr><br><tr><br><td>FWAIT</td><br><td>浮点等</td><br></tr><br><tr><br><td>FXAM</td><br><td>浮点检查</td><br></tr><br><tr><br><td>FXCH</td><br><td>浮点交换</td><br></tr><br><tr><br><td>FXTRACT</td><br><td>浮点分解</td><br></tr><br><tr><br><td>FYL2X</td><br><td>浮点求L2X</td><br></tr><br><tr><br><td>FYL2XP1</td><br><td>浮点求L2XP1</td><br></tr><br><tr><br><td>MOVED</td><br><td>媒体双字传送</td><br></tr><br><tr><br><td>MOVEQ</td><br><td>媒体四字传送</td><br></tr><br><tr><br><td>PACKSSDW</td><br><td>媒体符号双字压缩</td><br></tr><br><tr><br><td>PACKSSWB</td><br><td>媒体符号字压缩</td><br></tr><br><tr><br><td>PACKUSWB</td><br><td>媒体无符号字压缩</td><br></tr><br><tr><br><td>PADDB</td><br><td>媒体截断字节加</td><br></tr><br><tr><br><td>PADDD</td><br><td>媒体截断双字加</td><br></tr><br><tr><br><td>PADDSB</td><br><td>媒体符号饱和字节加</td><br></tr><br><tr><br><td>PADDSIW</td><br><td></td><br></tr><br><tr><br><td>PADDSW</td><br><td>媒体符号饱和字加</td><br></tr><br><tr><br><td>PADDUSB</td><br><td>媒体无符号饱和字节加</td><br></tr><br><tr><br><td>PADDUSW</td><br><td>媒体无符号饱和字加</td><br></tr><br><tr><br><td>PADDW</td><br><td>媒体截断字加</td><br></tr><br><tr><br><td>PAND</td><br><td>媒体与</td><br></tr><br><tr><br><td>PANDN</td><br><td>媒体与非</td><br></tr><br><tr><br><td>PAVEB</td><br><td></td><br></tr><br><tr><br><td>PCMPEQB</td><br><td>媒体字节比等</td><br></tr><br><tr><br><td>PCMPEQD</td><br><td>媒体双字比等</td><br></tr><br><tr><br><td>PCMPEQW</td><br><td>媒体字比等</td><br></tr><br><tr><br><td>PCMPGTB</td><br><td>媒体字节比大</td><br></tr><br><tr><br><td>PCMPGTD</td><br><td>媒体双字比大</td><br></tr><br><tr><br><td>PCMPGTW</td><br><td>媒体字比大</td><br></tr><br><tr><br><td>PDISTIB</td><br><td></td><br></tr><br><tr><br><td>PMACHRIW</td><br><td></td><br></tr><br><tr><br><td>PMADDWD</td><br><td></td><br></tr><br><tr><br><td>PMAGW</td><br><td></td><br></tr><br><tr><br><td>PMULHRIW</td><br><td></td><br></tr><br><tr><br><td>PMULHRWC</td><br><td></td><br></tr><br><tr><br><td>PMULHW</td><br><td></td><br></tr><br><tr><br><td>PMVGEZB</td><br><td></td><br></tr><br><tr><br><td>PMVLZB</td><br><td></td><br></tr><br><tr><br><td>PMVNZB</td><br><td></td><br></tr><br><tr><br><td>PMVZB</td><br><td></td><br></tr><br><tr><br><td>POR</td><br><td>媒体或</td><br></tr><br><tr><br><td>PSLLD</td><br><td>媒体双字左移</td><br></tr><br><tr><br><td>PSLLQ</td><br><td>媒体四字左移</td><br></tr><br><tr><br><td>PSLLW</td><br><td>媒体字左移</td><br></tr><br><tr><br><td>PSRAD</td><br><td>媒体双字算术右移</td><br></tr><br><tr><br><td>PSRAW</td><br><td>媒体字算术右移</td><br></tr><br><tr><br><td>PSRLD</td><br><td>媒体双字右移</td><br></tr><br><tr><br><td>PSRLQ</td><br><td>媒体四字右移</td><br></tr><br><tr><br><td>PSRLW</td><br><td>媒体字右移</td><br></tr><br><tr><br><td>PSUBB</td><br><td>媒体截断字节减</td><br></tr><br><tr><br><td>PSUBSB</td><br><td>媒体符号饱和字节减</td><br></tr><br><tr><br><td>PSUBSIW</td><br><td></td><br></tr><br><tr><br><td>PSUBSW</td><br><td>媒体符号饱和字减</td><br></tr><br><tr><br><td>PSUBUSB</td><br><td>媒体无符号饱和字节减</td><br></tr><br><tr><br><td>PSUBUSW</td><br><td>媒体无符号饱和字减</td><br></tr><br><tr><br><td>PSUBW</td><br><td>媒体截断字减</td><br></tr><br><tr><br><td>PUNPCKHBW</td><br><td>媒体字节高位解压</td><br></tr><br><tr><br><td>PUNPCKHDQ</td><br><td>媒体双字高位解压</td><br></tr><br><tr><br><td>PUNPCKHWD</td><br><td>媒体字高位解压</td><br></tr><br><tr><br><td>PUNPCKLBW</td><br><td>媒体字节低位解压</td><br></tr><br><tr><br><td>PUNPCKLDQ</td><br><td>媒体双字低位解压</td><br></tr><br><tr><br><td>PUNPCKLWD</td><br><td>媒体字低位解压</td><br></tr><br></tbody><br></table>]]></content>
    <summary type="html">
    <![CDATA[<p>汇编指令速查：普通指令、浮点指令<br>]]>
    
    </summary>
    
      <category term="Asm" scheme="http://www.wxameng.com/categories/Asm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[递归搜索法反汇编]]></title>
    <link href="http://www.wxameng.com/disasm-recursively/"/>
    <id>http://www.wxameng.com/disasm-recursively/</id>
    <published>2015-08-05T09:12:21.000Z</published>
    <updated>2015-11-10T06:25:00.000Z</updated>
    <content type="html"><![CDATA[<p>##概述<br>对程序进行反汇编主要有两种方法</p>
<ul>
<li>线性扫描，OD和Windbg等很多程序都用的是这种方法</li>
<li>递归搜索，IDA用的是这种方法<br>线性扫描法有很多不足，我们知道，一个指令可以有好几个字节，如果扫描的时候错位了，后面的全部都跟着错了<a id="more"></a>
</li>
</ul>
<p>我们这里主要用递归搜索法进行反汇编。我们分为以下几步：</p>
<h2 id="递归搜索程序入口">递归搜索程序入口</h2><p>既然是递归搜索，首先要有一个起始地址，当然就是程序的入口地址了，这样我们将所有的跳转指令（包括各种跳转、Call、ret）全部算进去，也就是只要遇到可能的跳转我们就要进行一次递归。我们将一段指令（从上一次的跳转到的地址到下一次跳转之前）称为一个指令块。这样我们用递归的方法生成了许多指令块，它们成树形结构。</p>
<h2 id="递归搜索函数">递归搜索函数</h2><p>然而仅仅通过搜索程序的起始地址得到的这个指令块的树并不能构成该程序的所有指令，因为很多函数是系统回调的，比如一个按钮的按下会有一个响应函数，除非你去点击它否则程序不会自己去触发。了解系统原理的都知道，windows有一个消息机制，作为消息响应函数，以及我们实现具体功能的子函数，最初的调用，都在消息响应函数中。而仅仅通过程序的入口，是永远执行不到这里的。很容易理解啊，比如你打开了网游，然后什么也不干，人物不会自动释放技能的。所以我们还需要递归搜索剩下的地址（不包括在树中的）。然后我们其实主要关心函数的调用，而函数的最开始的2条汇编指令是相同的，学过汇编的应该知道就是：push ebp; mov ebp,esp; 于是我们搜索这样的指令，如果找到了，就对每一个这样的函数进行递归，找到一个属于它的树。然后将所有的这些树合并去重。</p>
<h2 id="划分基本块">划分基本块</h2><p>做了以上两步其实已经得到了程序的反汇编了，但是其实还可以更进一步，就是找到程序的基本块，基本块的概念就是程序只有一个入口，切仅有一个出口的一段汇编代码。也就是执行到了第一条指令，中间不会跳转，而且也不会有别的跳转到这个块的中间任何一条指令。《龙书》中有提到这个概念。划分基本块是有必要的，可以进一步对程序进行修改，在这些基本块上的修改，可以保证整个程序的不变性。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>##概述<br>对程序进行反汇编主要有两种方法</p>
<ul>
<li>线性扫描，OD和Windbg等很多程序都用的是这种方法</li>
<li>递归搜索，IDA用的是这种方法<br>线性扫描法有很多不足，我们知道，一个指令可以有好几个字节，如果扫描的时候错位了，后面的全部都跟着错了]]>
    
    </summary>
    
      <category term="Disasm" scheme="http://www.wxameng.com/tags/Disasm/"/>
    
      <category term="反汇编" scheme="http://www.wxameng.com/tags/%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    
      <category term="汇编" scheme="http://www.wxameng.com/categories/%E6%B1%87%E7%BC%96/"/>
    
      <category term="逆向C++" scheme="http://www.wxameng.com/categories/%E6%B1%87%E7%BC%96/%E9%80%86%E5%90%91C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[QT::QTableView的使用]]></title>
    <link href="http://www.wxameng.com/qt-qtableview-sample/"/>
    <id>http://www.wxameng.com/qt-qtableview-sample/</id>
    <published>2015-08-04T01:12:48.000Z</published>
    <updated>2015-11-10T06:45:36.000Z</updated>
    <content type="html"><![CDATA[<p>QTableView采用的是类似MVC的内容与表现分离的设计模式</p>
<a id="more"></a>
<h2 id="使用方法">使用方法</h2><p>在MainWindow中为TableView添加Model,注意如果是局部变量要用new来申请,最好申请为类的私有成员变量</p>
<pre><code>ModelEx model<span class="comment">;</span>
ui.tableView-&gt;<span class="comment">;setModel(model);</span>
</code></pre><p>.h文件</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#ifndef MODELEX_H</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MODELEX_H</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#include</span></span><br><span class="line"><span class="preprocessor">#include</span></span><br><span class="line"><span class="preprocessor">#include</span></span><br><span class="line"><span class="preprocessor">#include</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">ModelEx</span> : <span class="title">public</span> <span class="title">QAbstractTableModel</span></span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">ModelEx</span>(<span class="params">QObject *parent = <span class="number">0</span></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">rowCount</span>(<span class="params"><span class="keyword">const</span> QModelIndex parent=QModelIndex(</span>)) <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">columnCount</span>(<span class="params"><span class="keyword">const</span> QModelIndex parent=QModelIndex(</span>)) <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QVariant <span class="title">data</span>(<span class="params"><span class="keyword">const</span> QModelIndex index, <span class="keyword">int</span> role</span>) <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QVariant <span class="title">headerData</span>(<span class="params"><span class="keyword">int</span> section, Qt::Orientation orientation, <span class="keyword">int</span> role</span>) <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QVector army;</span><br><span class="line">    QVector weaponType;</span><br><span class="line">    QMap armyMap;</span><br><span class="line">    QMap weaponTypeMap;</span><br><span class="line">    QStringList  weapon;</span><br><span class="line">    QStringList  header;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">populateModel</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> // MODELEX_H</span></span><br></pre></td></tr></table></figure>
<p>.cpp文件</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"modelex.h"</span></span></span><br><span class="line"></span><br><span class="line">ModelEx::ModelEx(QObject *parent) :</span><br><span class="line">    QAbstractTableModel(parent)</span><br><span class="line">&#123;</span><br><span class="line">    armyMap[<span class="number">1</span>]=tr(<span class="string">"空军"</span>);</span><br><span class="line">    armyMap[<span class="number">2</span>]=tr(<span class="string">"海军"</span>);</span><br><span class="line">    armyMap[<span class="number">3</span>]=tr(<span class="string">"陆军"</span>);</span><br><span class="line">    armyMap[<span class="number">4</span>]=tr(<span class="string">"海军陆战队"</span>);</span><br><span class="line">    weaponTypeMap[<span class="number">1</span>]=tr(<span class="string">"轰炸机"</span>);</span><br><span class="line">    weaponTypeMap[<span class="number">2</span>]=tr(<span class="string">"战斗机"</span>);</span><br><span class="line">    weaponTypeMap[<span class="number">3</span>]=tr(<span class="string">"航空母舰"</span>);</span><br><span class="line">    weaponTypeMap[<span class="number">4</span>]=tr(<span class="string">"驱逐舰"</span>);</span><br><span class="line">    weaponTypeMap[<span class="number">5</span>]=tr(<span class="string">"直升机"</span>);</span><br><span class="line">    weaponTypeMap[<span class="number">6</span>]=tr(<span class="string">"坦克"</span>);</span><br><span class="line">    header&lt;&lt;tr(<span class="string">"军种"</span>)&lt;&lt;tr(<span class="string">"种类"</span>)&lt;&lt;tr(<span class="string">"武器"</span>);</span><br><span class="line">    army&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="number">3</span>&lt;&lt;<span class="number">4</span>&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="number">4</span>&lt;&lt;<span class="number">3</span>&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    weaponType&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="number">3</span>&lt;&lt;<span class="number">5</span>&lt;&lt;<span class="number">7</span>&lt;&lt;<span class="number">4</span>&lt;&lt;<span class="number">8</span>&lt;&lt;<span class="number">6</span>&lt;&lt;<span class="number">2</span>;</span><br><span class="line">    weapon&lt;&lt;tr(<span class="string">"B-2"</span>)&lt;&lt;tr(<span class="string">"尼米兹级"</span>)&lt;&lt;</span><br><span class="line">            (<span class="string">"阿帕奇"</span>)&lt;&lt;tr(<span class="string">"黄蜂级"</span>)&lt;&lt;</span><br><span class="line">            tr(<span class="string">"阿利伯克级"</span>)&lt;&lt;tr(<span class="string">"AAAV"</span>)&lt;&lt;</span><br><span class="line">            tr(<span class="string">"M1A1"</span>)&lt;&lt;tr(<span class="string">"F-22"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ModelEx::columnCount(<span class="keyword">const</span> QModelIndex &amp;parent) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ModelEx::rowCount(<span class="keyword">const</span> QModelIndex &amp;parent) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> army.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QVariant ModelEx::data(<span class="keyword">const</span> QModelIndex &amp;index, <span class="keyword">int</span> role) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!index.isValid())</span><br><span class="line">        <span class="keyword">return</span> QVariant();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (role == Qt::TextAlignmentRole &amp;&amp; index.column()!=<span class="number">1</span>)  <span class="comment">//除了第2列以外居中对齐</span></span><br><span class="line">	<span class="keyword">return</span> Qt::AlignCenter | Qt::AlignVCenter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(role==Qt::DisplayRole)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(index.column())</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> armyMap[army[index.row()]];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> weaponTypeMap[weaponType[index.row()]];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> weapon[index.row()];</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> QVariant();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> QVariant();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QVariant ModelEx::headerData(<span class="keyword">int</span> section, Qt::Orientation orientation, <span class="keyword">int</span> role) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(role==Qt::DisplayRole&amp;&amp;orientation==Qt::Horizontal)</span><br><span class="line">        <span class="keyword">return</span> header[section];</span><br><span class="line">    <span class="keyword">return</span> QAbstractTableModel::headerData(section,orientation,role);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="常用设置">常用设置</h2><ol>
<li>居中对齐（可指定列）： 在data函数中实现；见代码</li>
<li>水平表头自适应宽度： view-&gt;horizontalHeader()-&gt;sectionResizeMode(QHeaderView::Stretch);</li>
<li>设置制定行（列）宽度： view-&gt;horizontalHeader()-&gt;resizeSection(0, 70);</li>
<li>不显示表头：ui编辑器中设置</li>
<li>拉伸最后一列：ui编辑器中设置</li>
</ol>
<h2 id="其他优化">其他优化</h2><p>因为ui编辑器自动生成的View类有很多属性设置不了，比如上面提到的“设置行宽度”但是如果把代码写到类外面有不符合“封装”的设计原则，所以我们可以把控制View的部分内容放到我们自定义的ViewModel中，见代码：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">void</span> ModelEx<span class="tag">::initView</span>(QTableView *view)</span><br><span class="line">&#123;</span><br><span class="line">	view-<span class="subst">&amp;</span><span class="literal">gt</span>;horizontalHeader()-<span class="subst">&amp;</span><span class="literal">gt</span>;sectionResizeMode(QHeaderView<span class="tag">::Stretch</span>);</span><br><span class="line">	view-<span class="subst">&amp;</span><span class="literal">gt</span>;horizontalHeader()-<span class="subst">&amp;</span><span class="literal">gt</span>;resizeSection(<span class="number">0</span>, <span class="number">70</span>);</span><br><span class="line">	view-<span class="subst">&amp;</span><span class="literal">gt</span>;horizontalHeader()-<span class="subst">&amp;</span><span class="literal">gt</span>;resizeSection(<span class="number">1</span>, <span class="number">270</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ModelEx <span class="keyword">model</span>;</span><br><span class="line">ui.tableView-&amp;<span class="keyword">gt</span>;setModel(<span class="keyword">model</span>);</span><br><span class="line">pCodeTableModel-&amp;<span class="keyword">gt</span>;initView(ui.tableView);</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>QTableView采用的是类似MVC的内容与表现分离的设计模式</p>]]>
    
    </summary>
    
      <category term="qtableview" scheme="http://www.wxameng.com/tags/qtableview/"/>
    
      <category term="tq" scheme="http://www.wxameng.com/tags/tq/"/>
    
      <category term="Qt" scheme="http://www.wxameng.com/categories/Qt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows批处理(bat)增加环境变量]]></title>
    <link href="http://www.wxameng.com/windows-bat-add-envionment-variables/"/>
    <id>http://www.wxameng.com/windows-bat-add-envionment-variables/</id>
    <published>2015-07-30T01:50:30.000Z</published>
    <updated>2015-11-10T06:48:17.000Z</updated>
    <content type="html"><![CDATA[<p>经常遇到安装完某个软件或者库，需要配置环境变量的情况，手动修改太麻烦，而且重装系统后还需要再次修改。有没有简单的方法呢？</p>
<p>当然有了，就是用批处理命令<br><a id="more"></a></p>
<p>以下批处理仅在win7测试，xp未必能用</p>
<p>注意设置完环境变量需要重启生效</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">echo</span> off  </span><br><span class="line"><span class="keyword">set</span> _Path=<span class="envvar">%cd%</span></span><br><span class="line">SETX <span class="built_in">PATH</span> <span class="envvar">%PATH%</span>;<span class="envvar">%_Path%</span> /M</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>经常遇到安装完某个软件或者库，需要配置环境变量的情况，手动修改太麻烦，而且重装系统后还需要再次修改。有没有简单的方法呢？</p>
<p>当然有了，就是用批处理命令<br>]]>
    
    </summary>
    
      <category term="windows" scheme="http://www.wxameng.com/tags/windows/"/>
    
      <category term="Windows" scheme="http://www.wxameng.com/categories/Windows/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu常用shell整理]]></title>
    <link href="http://www.wxameng.com/ubuntu-shell-list/"/>
    <id>http://www.wxameng.com/ubuntu-shell-list/</id>
    <published>2015-07-05T12:23:03.000Z</published>
    <updated>2015-11-25T00:19:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="软件安装">软件安装</h2><p>有时候安装一些大的软件，因为网络太慢或其它原因放弃安装了，如果再继续安装其它软件的时候（apt-get）就会提示错误（sudo dpkg –configure -a 解决此问题）    </p>
<p>【解决方案一】<br>这个时候需要先apt-get clean，在su下，然后就可以了 apt-get clean</p>
<pre><code><span class="preprocessor">#注意clean以后其实只是忽略错误软件，但是安装完毕一个软件后会提示是否继续，如果继续的话就会继续安装之前的有错误的软件</span>
</code></pre><p>【解决方案二】<br>好像有时候apt-get clean无效，上面问题更好地解决方法：</p>
<pre><code>sudo pkill dpkg
sudo rm /var/<span class="class"><span class="keyword">lib</span>/<span class="title">dpkg</span>/<span class="title">lock</span></span>
</code></pre><p>【解决方案三（推荐）】<br>oracle-java7-installer安装java失败之后的处理 ：（这个方法切实可行）<br>sudo rm /var/lib/dpkg/info/oracle-java7-installer<em><br>sudo apt-get purge oracle-java7-installer</em><br>sudo rm /etc/apt/sources.list.d/<em>java</em></p>
<h2 id="Shell命令">Shell命令</h2><h3 id="Ubuntu下默认sh脚本_双击运行">Ubuntu下默认sh脚本 双击运行</h3><ol>
<li>ctrl-alt-t呼出控制台。</li>
<li>输入dconf-editor，无需sudo，表示为当前用户配置。</li>
<li>如果没有提供可用apt-get install dconf-editor 命令来获得</li>
<li>出来一个窗口，找到这个键值路径<code>org.gnome.nautilus.preferences</code>，旗下有<code>executable-text-activation</code>个键值，默认是display，也就是开默认文本编辑器。改为ask。如果想改回去就点右下的，set to default，回复默认，默认是display。改后立刻生效。</li>
</ol>
<h3 id="常用shell">常用shell</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rm</span></span><br><span class="line"><span class="keyword">rm</span>-rf表示删除文件，而且可以删除非空目录。-rf参数表示递归强制删除</span><br></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./:为文件增加可执行权限，往往通过U盘拷贝的文件都不具备执行权限</span><br><span class="line">所以不具备写权限的文件 用sudo ./abc 是不会自动补全文件名的</span><br><span class="line"></span><br><span class="line"><span class="string">touch :</span>创建文件</span><br><span class="line"><span class="string">gedit :</span>用文本编辑器打开并编辑</span><br><span class="line">mkdir examples/_temp</span><br></pre></td></tr></table></figure>
<p>#Python<br>caffe用到的一些python库：</p>
<pre><code>sudo apt-<span class="built_in">get</span> install <span class="keyword">python</span>-yaml
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="软件安装">软件安装</h2><p>有时候安装一些大的软件，因为网络太慢或其它原因放弃安装了，如果再继续安装其它软件的时候（apt-get）就会提示错误（sudo dpkg –configure -a 解决此问题）    </p>
<p>【解决方案一】<br>这个]]>
    </summary>
    
      <category term="Ubuntu" scheme="http://www.wxameng.com/categories/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows常用cmd命令]]></title>
    <link href="http://www.wxameng.com/windows-cmd/"/>
    <id>http://www.wxameng.com/windows-cmd/</id>
    <published>2015-07-05T01:41:02.000Z</published>
    <updated>2015-11-10T06:47:54.000Z</updated>
    <content type="html"><![CDATA[<p>计算机定时关机：</p>
<pre><code>shutdown -s -t <span class="number">1800</span>  <span class="comment">//1800表示1800秒后  //取消：shutdown -a</span>
</code></pre><p>计算机定时休眠的cmd命令怎么写：</p>
<pre><code>at <span class="number">8</span>:<span class="number">10</span> rundll32 powrprof.dll,SetSuspendState
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>计算机定时关机：</p>
<pre><code>shutdown -s -t <span class="number">1800</span>  <span class="comment">//1800表示1800秒后  //取消：shutdown -a</span>
</]]>
    </summary>
    
      <category term="shell" scheme="http://www.wxameng.com/tags/shell/"/>
    
      <category term="windows" scheme="http://www.wxameng.com/tags/windows/"/>
    
      <category term="Windows" scheme="http://www.wxameng.com/categories/Windows/"/>
    
  </entry>
  
</feed>
